{"version":3,"sources":["fieldInstructions.js","components/ModalForm.js","components/DataTable.js","components/SavedDrafts.js","App.js","reportWebVitals.js","index.js"],"names":["fieldInstructions","identifier","type","title","alternativeTitle","acronym","description","homepageURL","otherPages","roleCreator","rolePublisher","roleFunder","prov:qualifiedAttribution","createdDate","modifiedDate","publishedDate","vocabulariesUsed","metadataSchema","primaryReferenceDocument","metaGraph","statistics","distTitle","distReleaseDate","distModificationDate","restAPI","sparqlEndpoint","exampleQueries","version","license","keywords","category","publicationReferences","language","iriTemplate","linkedResources","exampleResource","accessStatement","source","nameSpace","ModalForm","_ref","onSubmit","onClose","initialFormData","onDraftSaved","formData","setFormData","useState","agent","givenName","mbox","distributions","isSubmitting","setIsSubmitting","message","setMessage","identifierInput","setIdentifierInput","alternativeTitleInput","setAlternativeTitleInput","acronymInput","setAcronymInput","homepageURLInput","setHomepageURLInput","otherPagesInput","setOtherPagesInput","modifiedDateInput","setModifiedDateInput","primaryReferenceDocInput","setPrimaryReferenceDocInput","statisticsInput","setStatisticsInput","keywordsInput","setKeywordsInput","categoryInput","setCategoryInput","publicationReferencesInput","setPublicationReferencesInput","languageInput","setLanguageInput","iriTemplateInput","setIriTemplateInput","linkedResourcesInput","setLinkedResourcesInput","exampleResourceInput","setExampleResourceInput","sourceInput","setSourceInput","nameSpaceInput","setNameSpaceInput","imageFileName","setImageFileName","roleCreatorToggle","setRoleCreatorToggle","rolePublisherToggle","setRolePublisherToggle","roleFunderToggle","setRoleFunderToggle","fileInputRef","useRef","createdDateError","setCreatedDateError","publishedDateError","setPublishedDateError","modifiedDateError","setModifiedDateError","distReleaseDateError","setDistReleaseDateError","distModificationDateError","setDistModificationDateError","currentDistribution","setCurrentDistribution","mediaType","downloadURL","accessURL","accessService","byteSize","compressionFormat","packagingFormat","hasPolicy","rights","spatialResolution","temporalResolution","releaseDate","modificationDate","vocabulariesUsedInput","setVocabulariesUsedInput","metadataSchemaInput","setMetadataSchemaInput","restAPIInput","setRestAPIInput","exampleQueriesInput","setExampleQueriesInput","emptySparqlEndpoint","dataService","endpointURL","endpointDescription","status","currentSparqlEndpoint","setCurrentSparqlEndpoint","sparqlEndpoints","setSparqlEndpoints","editingSparqlEndpointIdx","setEditingSparqlEndpointIdx","sparqlDataServiceValid","setSparqlDataServiceValid","sparqlEndpointURLValid","setSparqlEndpointURLValid","sparqlEndpointURLError","setSparqlEndpointURLError","sparqlIdentifierValid","setSparqlIdentifierValid","sparqlTitleValid","setSparqlTitleValid","sparqlEndpointDescriptionValid","setSparqlEndpointDescriptionValid","sparqlStatusValid","setSparqlStatusValid","emptyExampleResource","currentExampleResource","setCurrentExampleResource","exampleResources","setExampleResources","editingExampleResourceIdx","setEditingExampleResourceIdx","exampleResourceAccessURLValid","setExampleResourceAccessURLValid","exampleResourceAccessURLError","setExampleResourceAccessURLError","exampleResourceTitleValid","setExampleResourceTitleValid","exampleResourceMediaTypeValid","setExampleResourceMediaTypeValid","exampleResourceDescriptionValid","setExampleResourceDescriptionValid","exampleResourceStatusValid","setExampleResourceStatusValid","handleCurrentSparqlEndpointChange","field","value","prev","[object Object]","handleCurrentExampleResourceChange","handleKeyPress","e","tagType","inputValue","setInputFunction","key","preventDefault","handleAddTag","resetSparqlEndpointForm","resetExampleResourceForm","acronymInputValid","setAcronymInputValid","metaGraphInput","setMetaGraphInput","homepageURLInputError","setHomepageURLInputError","otherPagesInputError","setOtherPagesInputError","primaryReferenceDocInputError","setPrimaryReferenceDocInputError","metaGraphInputError","setMetaGraphInputError","statisticsInputError","setStatisticsInputError","categoryInputError","setCategoryInputError","publicationReferencesInputError","setPublicationReferencesInputError","sourceInputError","setSourceInputError","createdDateValid","setCreatedDateValid","publishedDateValid","setPublishedDateValid","modifiedDateValid","setModifiedDateValid","homepageURLInputValid","setHomepageURLInputValid","otherPagesInputValid","setOtherPagesInputValid","primaryReferenceDocInputValid","setPrimaryReferenceDocInputValid","statisticsInputValid","setStatisticsInputValid","categoryInputValid","setCategoryInputValid","publicationReferencesInputValid","setPublicationReferencesInputValid","sourceInputValid","setSourceInputValid","titleValid","setTitleValid","descriptionValid","setDescriptionValid","typeValid","setTypeValid","licenseValid","setLicenseValid","versionValid","setVersionValid","accessStatementValid","setAccessStatementValid","keywordsInputValid","setKeywordsInputValid","nameSpaceInputValid","setNameSpaceInputValid","languageInputValid","setLanguageInputValid","iriTemplateInputValid","setIriTemplateInputValid","linkedResourcesInputValid","setLinkedResourcesInputValid","restAPIInputValid","setRestAPIInputValid","exampleQueriesInputValid","setExampleQueriesInputValid","distReleaseDateValid","setDistReleaseDateValid","distModificationDateValid","setDistModificationDateValid","identifierInputValid","setIdentifierInputValid","alternativeTitleInputValid","setAlternativeTitleInputValid","distLicenseValid","setDistLicenseValid","distRightsValid","setDistRightsValid","distSpatialResolutionValid","setDistSpatialResolutionValid","distTemporalResolutionValid","setDistTemporalResolutionValid","distCompressionFormatValid","setDistCompressionFormatValid","distPackagingFormatValid","setDistPackagingFormatValid","distHasPolicyValid","setDistHasPolicyValid","useEffect","document","body","style","overflow","querySelectorAll","forEach","label","fieldId","getAttribute","setAttribute","timeoutId","setTimeout","clearTimeout","isValidIriString","iriString","console","log","trim","trimmed","test","match","length","validateIriInput","name","target","setErrorFunc","setVocabulariesUsedInputError","setMetadataSchemaInputError","setLicenseError","setAccessStatementError","roleCreatorAgent","setRoleCreatorAgentError","rolePublisherAgent","setRolePublisherAgentError","roleFunderAgent","setRoleFunderAgentError","distDownloadURL","setDistDownloadURLError","distAccessURL","setDistAccessURLError","sparqlEndpointURL","exampleResourceAccessURL","setValidFunc","setVocabulariesUsedInputValid","setMetadataSchemaInputValid","setRoleCreatorAgentValid","setRolePublisherAgentValid","setRoleFunderAgentValid","setDistDownloadURLValid","setDistAccessURLValid","iriError","vocabulariesUsedInputError","metadataSchemaInputError","licenseError","accessStatementError","roleCreatorAgentError","rolePublisherAgentError","roleFunderAgentError","distDownloadURLError","distAccessURLError","vocabulariesUsedInputValid","metadataSchemaInputValid","roleCreatorAgentValid","rolePublisherAgentValid","roleFunderAgentValid","distDownloadURLValid","distAccessURLValid","fieldName","setInputFunc","includes","prevFormData","handleChange","validateRegularInput","handleTypeChange","prevData","currentTypes","newTypes","filter","handleRoleChange","role","validateDateInput","errorMessage","setCustomValidity","parts","split","year","parseInt","month","day","daysInMonth","isLeapYear","date","Date","isNaN","getTime","getFullYear","getMonth","getDate","distLicense","distRights","distSpatialResolution","distTemporalResolution","distCompressionFormat","distPackagingFormat","distHasPolicy","sparqlDataService","sparqlIdentifier","sparqlTitle","sparqlEndpointDescription","sparqlStatus","exampleResourceTitle","exampleResourceMediaType","exampleResourceDescription","exampleResourceStatus","handleRemoveTag","index","newTags","splice","addPendingTagInputs","updatedFormData","currDist","handleDistributionChange","handleRemoveDistribution","newDistributions","handleDatePickerChange","targetFieldName","formattedDate","replace","handleSubmit","async","updatedForm","missingFields","invalidDates","push","join","result","success","error","formatDate","dateString","toISOString","React","createElement","className","onClick","stopPropagation","aria-label","htmlFor","id","onChange","onBlur","onKeyPress","map","checked","placeholder","required","disabled","onKeyUp","item","doc","current","click","ref","file","files","accept","display","graph","stat","acr","url","page","newToggle","Fragment","dist","querySelector","scrollIntoView","behavior","rows","defaultValue","tabIndex","handleAddDistribution","validateDistribution","endpoint","idx","handleEditSparqlEndpoint","_","i","handleRemoveSparqlEndpoint","handleAddSparqlEndpoint","updated","handleCancelEditSparqlEndpoint","resource","handleEditExampleResource","handleRemoveExampleResource","handleAddExampleResource","handleCancelEditExampleResource","keyword","cat","lang","iri","src","ns","handleSaveDraft","existingDraftId","draftId","now","draft","savedDrafts","draftsString","localStorage","getItem","JSON","parse","d","setItem","stringify","DataTable","submissions","downloadJSON","alert","enrichedData","submission","browserType","navigator","userAgent","timestamp","exportDate","jsonData","blob","Blob","URL","createObjectURL","link","slice","visibility","appendChild","removeChild","clearSubmissions","window","confirm","removeItem","location","reload","toLocaleString","SavedDrafts","forwardRef","onLoadDraft","drafts","setDrafts","loadDrafts","parsedDrafts","sort","a","b","dateA","useImperativeHandle","refreshDrafts","handleLoadDraft","clearAllDrafts","cursor","getHours","toString","padStart","getMinutes","handleDeleteDraft","updatedDrafts","App","setSubmissions","showModal","setShowModal","draftToLoad","setDraftToLoad","savedDraftsRef","savedSubmissions","handleOpenModal","width","submissionId","newSubmissions","handleCloseModal","handleDraftSaved","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.afebca59.chunk.js","sourcesContent":["const fieldInstructions = {\n    \"identifier\": \"The identifier for KG metadata.\",\n    \"type\": \"The type of object in the description.\",\n    \"title\": \"The name or formal title for the KG.\",\n    \"alternativeTitle\": \"Another name for the KG.\",\n    \"acronym\": \"An acronym used to identify the KG.\",\n    \"description\": \"Provide a human readable description of the KG. Minimally, the description should be in English, and ideally, there would be descriptions available in other languages.\",\n    \n    // URL fields\n    \"homepageURL\": \"Provides minimal information, link to access to data.\",\n    \"otherPages\": \"Provide additional relevant pages for the KG.\",\n    \n    // Roles\n    \"roleCreator\": \"The author of the KG.\",\n    \"rolePublisher\": \"The publisher of the KG (this ID typically has an ROR ID corresponding to the institution to which the authors belong).\",\n    \"roleFunder\": \"The organization(s) that funded the KG building and/or publication.\",\n    \"prov:qualifiedAttribution\": \"The contact point for inquiries about the KG, name and Email of the contact person.\",\n    \n    // Date fields\n    \"createdDate\": \"Provide the date when the KG is created.\",\n    \"modifiedDate\": \"The date when the KG is lastly modified.\",\n    \"publishedDate\": \"The date when the KG is published.\",\n    \n    // Vocabularies and schemas\n    \"vocabulariesUsed\": \"Specify the vocabularies used in the knowledge.\",\n    \"metadataSchema\": \"Specify the file against which to validate the KG metadata. Recommend that IRI is a Profile (https://www.w3.org/TR/dx-prof/).\",\n    \n    // Documentation\n    \"primaryReferenceDocument\": \"Provide a reference to a document, preprint or data paper describing the KG.\",\n    \"metaGraph\": \"Provide an illustration of the graph connectivity through its types and relations between instances.\",\n    \"statistics\": \"Provide a computational representation of the summary statistics of the knowledge graph. See HCLS: https://www.w3.org/TR/hcls-dataset/#s6.\",\n    \n    // Distribution related - not in the reference spreadsheet\n    \"distTitle\": \"Required title for this distribution\",\n    \"distReleaseDate\": \"Provide the release date for this specific distribution.\",\n    \"distModificationDate\": \"The date when this distribution was modified.\",\n    \n\n    \"restAPI\": \"Provide a REST API for the KG.\",\n    \"sparqlEndpoint\": \"Provide a SPARQL endpoint for the KG.\",\n    \"exampleQueries\": \"Provide an exemplar query against the KG.\",\n    \n  \n    \"version\": \"Specify the version of the dataset, if defined.\",\n    \"license\": \"Provide the license that the KG is released with. The Software Ontology defines a set of standard licenses to could be chosen from (see http://www.ebi.ac.uk/swo/license/SWO_0000002).\",\n    \"keywords\": \"Provide a set of keywords for the KG.\",\n    \"category\": \"A main category of the resource. A resource can have multiple themes.\",\n    \"publicationReferences\": \"Provide references for the KG.\",\n    \"language\": \"Languages represented in the knowledge graph.\",\n    \"iriTemplate\": \"Provide a 'J' IRI Templates, following RFC 6570, that individuals are typically identified by.\",\n    \"linkedResources\": \"Specify linkable resources to the knowledge graph.Link to a description of a relationship with another resource.\",\n    \"exampleResource\": \"Provide an example instance in the KG.\",\n    \"accessStatement\": \"Specify any restrictions on the access to the resource, and how to gain legitimate access.\",\n    \"source\": \"Specify the origin or source of data for the KG.\",\n    \"nameSpace\": \"Often, the entities described in a dataset share URIs of a common form. For example, all DBpedia entity URIs start with http://dbpedia.org/resource/. The void:uriSpace property can be used to state that all entity URIs in a dataset start with a given string. In other words, they share a common “URI namespace\"\n \n  };\n  \n  export default fieldInstructions;","import React, { useState, useEffect, useRef } from 'react';\nimport fieldInstructions from '../fieldInstructions';\n\nfunction ModalForm({ onSubmit, onClose, initialFormData = null, onDraftSaved = null }) {\n  // Initial form state\n  const initialFormState = {\n    identifier: [],\n    type: [],\n    title: '',\n    description: '',\n    \n    // Date fields\n    createdDate: '',\n    modifiedDate: [],\n    publishedDate: '',\n    \n    alternativeTitle: [],\n    acronym: [],\n    homepageURL: [],\n    otherPages: [],\n    \n    // Role fields\n    roleCreator: {\n      agent: '',\n      givenName: '',\n      mbox: ''\n    },\n    rolePublisher: {\n      agent: '',\n      givenName: '',\n      mbox: ''\n    },\n    roleFunder: {\n      agent: '',\n      givenName: '',\n      mbox: ''\n    },\n    \n    // Other fields\n    license: '',\n    version: '',\n\n    // Distributions array\n    distributions: [],\n    \n    primaryReferenceDocument: [],\n    metaGraph: [],\n    statistics: [],\n    vocabulariesUsed: [],\n    metadataSchema: [],\n    restAPI: [],\n    sparqlEndpoint: [],\n    exampleQueries: [],\n    keywords: [],\n    category: [],\n    publicationReferences: [],\n    language: [],\n    iriTemplate: [],\n    linkedResources: [],\n    exampleResource: [],\n    accessStatement: '',\n    source: [],\n    nameSpace: []\n  };\n\n  const [formData, setFormData] = useState(initialFormData || initialFormState);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [message, setMessage] = useState('');\n  const [identifierInput, setIdentifierInput] = useState('');\n  const [alternativeTitleInput, setAlternativeTitleInput] = useState('');\n  const [acronymInput, setAcronymInput] = useState('');\n  const [homepageURLInput, setHomepageURLInput] = useState('');\n  const [otherPagesInput, setOtherPagesInput] = useState('');\n  const [modifiedDateInput, setModifiedDateInput] = useState('');\n  const [primaryReferenceDocInput, setPrimaryReferenceDocInput] = useState('');\n  const [statisticsInput, setStatisticsInput] = useState('');\n  const [keywordsInput, setKeywordsInput] = useState('');\n  const [categoryInput, setCategoryInput] = useState('');\n  const [publicationReferencesInput, setPublicationReferencesInput] = useState('');\n  const [languageInput, setLanguageInput] = useState('');\n  const [iriTemplateInput, setIriTemplateInput] = useState('');\n  const [linkedResourcesInput, setLinkedResourcesInput] = useState('');\n  const [exampleResourceInput, setExampleResourceInput] = useState('');\n  const [sourceInput, setSourceInput] = useState('');\n  const [nameSpaceInput, setNameSpaceInput] = useState('');\n  const [imageFileName, setImageFileName] = useState('');\n  const [roleCreatorToggle, setRoleCreatorToggle] = useState('agentIRI'); // 'agentIRI' or 'nameEmail'\n  const [rolePublisherToggle, setRolePublisherToggle] = useState('agentIRI');\n  const [roleFunderToggle, setRoleFunderToggle] = useState('agentIRI');\n\n  const fileInputRef = useRef(null);\n\n  const [createdDateError, setCreatedDateError] = useState('');\n  const [publishedDateError, setPublishedDateError] = useState('');\n  const [modifiedDateError, setModifiedDateError] = useState('');\n  const [distReleaseDateError, setDistReleaseDateError] = useState('');\n  const [distModificationDateError, setDistModificationDateError] = useState('');\n\n  // New state for distribution editing\n  const [currentDistribution, setCurrentDistribution] = useState({\n    title: '',\n    description: '',\n    mediaType: '',\n    downloadURL: '',\n    accessURL: '',\n    accessService: '',\n    byteSize: '',\n    compressionFormat: '',\n    packagingFormat: '',\n    hasPolicy: '',\n    license: '',\n    rights:'',\n    spatialResolution: '',\n    temporalResolution: '',\n    releaseDate: '',\n    modificationDate: ''\n  });\n\n  const [vocabulariesUsedInput, setVocabulariesUsedInput] = useState('');\n  const [metadataSchemaInput, setMetadataSchemaInput] = useState('');\n  const [restAPIInput, setRestAPIInput] = useState('');\n  const [exampleQueriesInput, setExampleQueriesInput] = useState('');\n\n// SPARQL Endpoints Section State\nconst emptySparqlEndpoint = {\n  dataService: '',\n  endpointURL: '',\n  identifier: '',\n  title: '',\n  endpointDescription: '',\n  status: ''\n};\nconst [currentSparqlEndpoint, setCurrentSparqlEndpoint] = useState(emptySparqlEndpoint);\nconst [sparqlEndpoints, setSparqlEndpoints] = useState([]);\nconst [editingSparqlEndpointIdx, setEditingSparqlEndpointIdx] = useState(null);\nconst [sparqlDataServiceValid, setSparqlDataServiceValid] = useState(false);\nconst [sparqlEndpointURLValid, setSparqlEndpointURLValid] = useState(false);\nconst [sparqlEndpointURLError, setSparqlEndpointURLError] = useState('');\nconst [sparqlIdentifierValid, setSparqlIdentifierValid] = useState(false);\nconst [sparqlTitleValid, setSparqlTitleValid] = useState(false);\nconst [sparqlEndpointDescriptionValid, setSparqlEndpointDescriptionValid] = useState(false);\nconst [sparqlStatusValid, setSparqlStatusValid] = useState(false);\n\n// Example Resource Section State\nconst emptyExampleResource = {\n  accessURL: '',\n  title: '',\n  mediaType: '',\n  description: '',\n  status: ''\n};\nconst [currentExampleResource, setCurrentExampleResource] = useState(emptyExampleResource);\nconst [exampleResources, setExampleResources] = useState([]);\nconst [editingExampleResourceIdx, setEditingExampleResourceIdx] = useState(null);\nconst [exampleResourceAccessURLValid, setExampleResourceAccessURLValid] = useState(false);\nconst [exampleResourceAccessURLError, setExampleResourceAccessURLError] = useState('');\nconst [exampleResourceTitleValid, setExampleResourceTitleValid] = useState(false);\nconst [exampleResourceMediaTypeValid, setExampleResourceMediaTypeValid] = useState(false);\nconst [exampleResourceDescriptionValid, setExampleResourceDescriptionValid] = useState(false);\nconst [exampleResourceStatusValid, setExampleResourceStatusValid] = useState(false);\n\nconst handleCurrentSparqlEndpointChange = (field, value) => {\n  setCurrentSparqlEndpoint(prev => ({ ...prev, [field]: value }));\n};\n\nconst handleCurrentExampleResourceChange = (field, value) => {\n  setCurrentExampleResource(prev => ({ ...prev, [field]: value }));\n};\n\n// Handle Enter key press for tag inputs\nconst handleKeyPress = (e, tagType, inputValue, setInputFunction) => {\n  if (e.key === 'Enter') {\n    e.preventDefault();\n    handleAddTag(tagType, inputValue, setInputFunction);\n  }\n};\n\nconst resetSparqlEndpointForm = () => {\n  setCurrentSparqlEndpoint(emptySparqlEndpoint);\n  setEditingSparqlEndpointIdx(null);\n  setSparqlDataServiceValid(false);\n  setSparqlEndpointURLValid(false);\n  setSparqlEndpointURLError('');\n  setSparqlIdentifierValid(false);\n  setSparqlTitleValid(false);\n  setSparqlEndpointDescriptionValid(false);\n  setSparqlStatusValid(false);\n};\n\nconst resetExampleResourceForm = () => {\n  setCurrentExampleResource(emptyExampleResource);\n  setEditingExampleResourceIdx(null);\n  setExampleResourceAccessURLValid(false);\n  setExampleResourceAccessURLError('');\n  setExampleResourceTitleValid(false);\n  setExampleResourceMediaTypeValid(false);\n  setExampleResourceDescriptionValid(false);\n  setExampleResourceStatusValid(false);\n};\n\nconst handleAddSparqlEndpoint = () => {\n  if (editingSparqlEndpointIdx !== null) {\n    // Save edits\n    const updated = [...sparqlEndpoints];\n    updated[editingSparqlEndpointIdx] = currentSparqlEndpoint;\n    setSparqlEndpoints(updated);\n  } else {\n    setSparqlEndpoints(prev => [...prev, currentSparqlEndpoint]);\n  }\n  resetSparqlEndpointForm();\n};\n\nconst handleEditSparqlEndpoint = (idx) => {\n  setCurrentSparqlEndpoint(sparqlEndpoints[idx]);\n  setEditingSparqlEndpointIdx(idx);\n  // Optionally set valid states for fields if desired\n};\n\nconst handleRemoveSparqlEndpoint = (idx) => {\n  setSparqlEndpoints(prev => prev.filter((_, i) => i !== idx));\n  if (editingSparqlEndpointIdx === idx) {\n    resetSparqlEndpointForm();\n  }\n};\n\nconst handleCancelEditSparqlEndpoint = () => {\n  resetSparqlEndpointForm();\n};\n\nconst handleAddExampleResource = () => {\n  if (editingExampleResourceIdx !== null) {\n    // Save edits\n    const updated = [...exampleResources];\n    updated[editingExampleResourceIdx] = currentExampleResource;\n    setExampleResources(updated);\n  } else {\n    setExampleResources(prev => [...prev, currentExampleResource]);\n  }\n  resetExampleResourceForm();\n};\n\nconst handleEditExampleResource = (idx) => {\n  setCurrentExampleResource(exampleResources[idx]);\n  setEditingExampleResourceIdx(idx);\n  // Optionally set valid states based on current values\n};\n\nconst handleRemoveExampleResource = (idx) => {\n  setExampleResources(prev => prev.filter((_, i) => i !== idx));\n  if (editingExampleResourceIdx === idx) {\n    resetExampleResourceForm();\n  }\n};\n\nconst handleCancelEditExampleResource = () => {\n  resetExampleResourceForm();\n};\n\n  const [acronymInputValid, setAcronymInputValid] = useState(false);\n  const [metaGraphInput, setMetaGraphInput] = useState('');\n\n  const [homepageURLInputError, setHomepageURLInputError] = useState('');\n  const [otherPagesInputError, setOtherPagesInputError] = useState('');\n  const [primaryReferenceDocInputError, setPrimaryReferenceDocInputError] = useState('');\n  const [metaGraphInputError, setMetaGraphInputError] = useState('');\n  const [statisticsInputError, setStatisticsInputError] = useState('');\n  const [categoryInputError, setCategoryInputError] = useState('');\n  const [publicationReferencesInputError, setPublicationReferencesInputError] = useState('');\n  const [sourceInputError, setSourceInputError] = useState('');\n\n  // Valid states for date fields\n  const [createdDateValid, setCreatedDateValid] = useState(false);\n  const [publishedDateValid, setPublishedDateValid] = useState(false);\n  const [modifiedDateValid, setModifiedDateValid] = useState(false);\n\n  // Valid states for IRI fields (removed metaGraph)\n  const [homepageURLInputValid, setHomepageURLInputValid] = useState(false);\n  const [otherPagesInputValid, setOtherPagesInputValid] = useState(false);\n  const [primaryReferenceDocInputValid, setPrimaryReferenceDocInputValid] = useState(false);\n  const [statisticsInputValid, setStatisticsInputValid] = useState(false);\n  const [categoryInputValid, setCategoryInputValid] = useState(false);\n  const [publicationReferencesInputValid, setPublicationReferencesInputValid] = useState(false);\n  const [sourceInputValid, setSourceInputValid] = useState(false);\n\n  // Valid states for other fields\n  const [titleValid, setTitleValid] = useState(false);\n  const [descriptionValid, setDescriptionValid] = useState(false);\n  const [typeValid, setTypeValid] = useState(false);\n  const [licenseValid, setLicenseValid] = useState(false);\n  const [versionValid, setVersionValid] = useState(false);\n  const [accessStatementValid, setAccessStatementValid] = useState(false);\n  const [keywordsInputValid, setKeywordsInputValid] = useState(false);\n  const [nameSpaceInputValid, setNameSpaceInputValid] = useState(false);\n  const [languageInputValid, setLanguageInputValid] = useState(false);\n  const [iriTemplateInputValid, setIriTemplateInputValid] = useState(false);\n  const [linkedResourcesInputValid, setLinkedResourcesInputValid] = useState(false);\n  const [restAPIInputValid, setRestAPIInputValid] = useState(false);\n  const [exampleQueriesInputValid, setExampleQueriesInputValid] = useState(false);\n\n  const [distReleaseDateValid, setDistReleaseDateValid] = useState(false);\n  const [distModificationDateValid, setDistModificationDateValid] = useState(false);\n  const [identifierInputValid, setIdentifierInputValid] = useState(false);\n  const [alternativeTitleInputValid, setAlternativeTitleInputValid] = useState(false);\n  const [distLicenseValid, setDistLicenseValid] = useState(false);\n  const [distRightsValid, setDistRightsValid] = useState(false);\n  const [distSpatialResolutionValid, setDistSpatialResolutionValid] = useState(false);\n  const [distTemporalResolutionValid, setDistTemporalResolutionValid] = useState(false);\n  const [distCompressionFormatValid, setDistCompressionFormatValid] = useState(false);\n  const [distPackagingFormatValid, setDistPackagingFormatValid] = useState(false);\n  const [distHasPolicyValid, setDistHasPolicyValid] = useState(false);\n\n  useEffect(() => {\n      if (initialFormData) {\n        setFormData(initialFormData);\n      }\n    }, [initialFormData]);\n\n    \n  useEffect(() => {\n    document.body.style.overflow = 'hidden';\n    \n    // Re-enable scrolling when component unmounts\n    return () => {\n      document.body.style.overflow = 'auto';\n    };\n  }, []);\n  \n  useEffect(() => {\n    const labels = document.querySelectorAll('.form-group label');\n    \n    // Loop through each label\n    labels.forEach(label => {\n      // Get the 'for' attribute which connects to the input ID\n      const fieldId = label.getAttribute('for');\n      \n      // If we have instructions for this field, add the tooltip\n      if (fieldId && fieldInstructions[fieldId]) {\n        label.setAttribute('data-tooltip', fieldInstructions[fieldId]);\n        label.setAttribute('tabindex', '0'); // Make focusable for accessibility\n      }\n    });\n  }, []);\n\n\n  useEffect(() => {\n    let timeoutId;\n    if (message) {\n      timeoutId = setTimeout(() => {\n        setMessage(null);\n      }, 20000);\n    }\n    return () => timeoutId && clearTimeout(timeoutId);\n  }, [message]);\n\n\n\n\n    const isValidIriString = (iriString) => {\n      console.log('Validating IRI:', iriString);\n      \n      // Allow empty values for optional fields\n      if (!iriString || !iriString.trim()) {\n        console.log('IRI is empty - allowed for optional fields');\n        return null;\n      }\n      \n      const trimmed = iriString.trim();\n      \n      // Check for obviously invalid characters at the start\n      if (/^[@#{}|\\\\^`<>\"']/.test(trimmed)) {\n        return 'IRI cannot start with invalid characters.';\n      }\n      \n      // Basic scheme check - IRI must have a scheme\n      if (!/^[a-zA-Z][a-zA-Z0-9+.-]*:/.test(trimmed)) {\n        return 'IRI must have a valid scheme (e.g., http:, https:, ftp:).';\n      }\n      \n      // Check for invalid characters that should not appear in IRIs\n      if (/[\\s<>\"{}|\\\\^`]/.test(trimmed)) {\n        return 'IRI contains invalid characters.';\n      }\n      \n      // Check for unmatched brackets\n      const openBrackets = (trimmed.match(/\\[/g) || []).length;\n      const closeBrackets = (trimmed.match(/\\]/g) || []).length;\n      if (openBrackets !== closeBrackets) {\n        return 'IRI has unmatched brackets.';\n      }\n      \n      // Check for @ symbol in inappropriate places (not in userinfo or email schemes)\n      if (/@/.test(trimmed) && !/^(mailto:|http:\\/\\/[^@]*@|https:\\/\\/[^@]*@)/.test(trimmed)) {\n        return 'IRI contains @ symbol in invalid position.';\n      }\n      \n      console.log('IRI is valid');\n      return null;\n    };\n\n\n    const validateIriInput = (e) => {\n      const { name, value } = e.target;\n      \n      // Map field names to their error setter functions - EXPANDED LIST\n      const errorSetters = {\n        'homepageURLInput': setHomepageURLInputError,\n        'otherPagesInput': setOtherPagesInputError,\n        'vocabulariesUsedInput': setVocabulariesUsedInputError,\n        'metadataSchemaInput': setMetadataSchemaInputError,\n        'primaryReferenceDocInput': setPrimaryReferenceDocInputError,\n        'license': setLicenseError,\n        'categoryInput': setCategoryInputError,\n        'publicationReferencesInput': setPublicationReferencesInputError,\n        'accessStatement': setAccessStatementError,\n        'sourceInput': setSourceInputError,\n        'roleCreatorAgent': setRoleCreatorAgentError,\n        'rolePublisherAgent': setRolePublisherAgentError,\n        'roleFunderAgent': setRoleFunderAgentError,\n        'distDownloadURL': setDistDownloadURLError,\n        'distAccessURL': setDistAccessURLError,\n        'sparqlEndpointURL': setSparqlEndpointURLError,\n        'exampleResourceAccessURL': setExampleResourceAccessURLError\n      };\n      \n      // Map field names to their valid setter functions - EXPANDED LIST\n      const validSetters = {\n        'homepageURLInput': setHomepageURLInputValid,\n        'otherPagesInput': setOtherPagesInputValid,\n        'vocabulariesUsedInput': setVocabulariesUsedInputValid,\n        'metadataSchemaInput': setMetadataSchemaInputValid,\n        'primaryReferenceDocInput': setPrimaryReferenceDocInputValid,\n        'license': setLicenseValid,\n        \n        'categoryInput': setCategoryInputValid,\n        'publicationReferencesInput': setPublicationReferencesInputValid,\n        'accessStatement': setAccessStatementValid,\n        'sourceInput': setSourceInputValid,\n        'roleCreatorAgent': setRoleCreatorAgentValid,\n        'rolePublisherAgent': setRolePublisherAgentValid,\n        'roleFunderAgent': setRoleFunderAgentValid,\n        'distDownloadURL': setDistDownloadURLValid,\n        'distAccessURL': setDistAccessURLValid,\n        'sparqlEndpointURL': setSparqlEndpointURLValid,\n        'exampleResourceAccessURL': setExampleResourceAccessURLValid\n      };\n      \n      const setErrorFunc = errorSetters[name];\n      const setValidFunc = validSetters[name];\n      \n      if (!setErrorFunc || !setValidFunc) return; // Field doesn't need IRI validation\n      // DEBUG: Log which field is being validated\n      // console.log('Validating IRI for field:', name, value);\n      \n      // Skip validation for empty optional fields\n      if (!value || !value.trim()) {\n        setErrorFunc('');\n        setValidFunc(false);\n        return;\n      }\n      \n      const iriError = isValidIriString(value);\n      if (iriError) {\n        setErrorFunc(iriError);\n        setValidFunc(false);\n      } else {\n        setErrorFunc('');\n        setValidFunc(true);\n      }\n    };\n    \n    // 2. Add new state declarations for error and valid states (add these to your existing state declarations):\n    \n    // Error states for new IRI fields\n    const [vocabulariesUsedInputError, setVocabulariesUsedInputError] = useState('');\n    const [metadataSchemaInputError, setMetadataSchemaInputError] = useState('');\n    const [licenseError, setLicenseError] = useState('');\n    const [accessStatementError, setAccessStatementError] = useState('');\n    const [roleCreatorAgentError, setRoleCreatorAgentError] = useState('');\n    const [rolePublisherAgentError, setRolePublisherAgentError] = useState('');\n    const [roleFunderAgentError, setRoleFunderAgentError] = useState('');\n    const [distDownloadURLError, setDistDownloadURLError] = useState('');\n    const [distAccessURLError, setDistAccessURLError] = useState('');\n    \n    // Valid states for new IRI fields\n    const [vocabulariesUsedInputValid, setVocabulariesUsedInputValid] = useState(false);\n    const [metadataSchemaInputValid, setMetadataSchemaInputValid] = useState(false);\n    const [roleCreatorAgentValid, setRoleCreatorAgentValid] = useState(false);\n    const [rolePublisherAgentValid, setRolePublisherAgentValid] = useState(false);\n    const [roleFunderAgentValid, setRoleFunderAgentValid] = useState(false);\n    const [distDownloadURLValid, setDistDownloadURLValid] = useState(false);\n    const [distAccessURLValid, setDistAccessURLValid] = useState(false);\n    \n    // 3. Update handleAddTag to include IRI validation for new fields:\n    \n    const handleAddTag = (fieldName, inputValue, setInputFunc, setErrorFunc) => {\n      if (setErrorFunc) setErrorFunc(''); // Clear previous error\n      if (fieldName === 'identifier') setIdentifierInputValid(false);\n      if (fieldName === 'alternativeTitle') setAlternativeTitleInputValid(false);\n    \n      // Fields that require IRI validation - EXPANDED LIST\n      const iriFields = [\n        'homepageURL', 'otherPages', 'vocabulariesUsed', 'metadataSchema',\n        'primaryReferenceDocument', 'category', \n        'publicationReferences', 'source'\n      ];\n    \n      if (iriFields.includes(fieldName)) {\n        const iriError = isValidIriString(inputValue);\n        if (iriError) {\n          if (setErrorFunc) setErrorFunc(iriError);\n          return;\n        }\n      }\n    \n      if (inputValue.trim()) {\n        setFormData(prevFormData => ({\n          ...prevFormData,\n          [fieldName]: [...(prevFormData[fieldName] || []), inputValue.trim()]\n        }));\n        setInputFunc('');\n      }\n    };\n    \n\n    const handleChange = (e) => {\n      const { name, value } = e.target;\n      \n      // Clear valid states when user starts typing in date fields\n      if (name === 'createdDate') setCreatedDateValid(false);\n      if (name === 'publishedDate') setPublishedDateValid(false);\n      \n      // Clear valid states for regular fields when typing\n      if (name === 'title') setTitleValid(false);\n      if (name === 'description') setDescriptionValid(false);\n      if (name === 'license') setLicenseValid(false);\n      if (name === 'version') setVersionValid(false);\n      if (name === 'accessStatement') setAccessStatementValid(false);\n      if (name === 'keywords') setKeywordsInputValid(false);\n      if (name === 'nameSpace') setNameSpaceInputValid(false);\n      if (name === 'restAPI') setRestAPIInputValid(false);\n      \n      if (name === 'exampleQueries') setExampleQueriesInputValid(false);\n      \n      setFormData({\n        ...formData,\n        [name]: value\n      });\n\n      // Validate non-IRI and non-date fields\n      validateRegularInput(e);\n    };\n  \n    const handleTypeChange = (value) => {\n      setFormData(prevData => {\n        const currentTypes = prevData.type || [];\n        let newTypes;\n        \n        if (currentTypes.includes(value)) {\n          // Remove the value if it's already selected\n          newTypes = currentTypes.filter(type => type !== value);\n        } else {\n          // Add the value if it's not selected\n          newTypes = [...currentTypes, value];\n        }\n        \n        // Update validation state\n        setTypeValid(newTypes.length > 0);\n        \n        return {\n          ...prevData,\n          type: newTypes\n        };\n      });\n    };\n\n\n  // Handle role field changes\n  const handleRoleChange = (role, field, value) => {\n    setFormData({\n      ...formData,\n      [role]: {\n        ...formData[role],\n        [field]: value\n      }\n    });\n  };\n  \n  // Handle adding a date tag\n  const handleAddDate = (e) => {\n    if (modifiedDateInput) {\n      setFormData({\n        ...formData,\n        modifiedDate: [...formData.modifiedDate, modifiedDateInput]\n      });\n      setModifiedDateInput('');\n    }\n  };\n\n  const validateDateInput = (e) => {\n    const { name, value } = e.target;\n    let errorMessage = '';\n    \n    const validSetters = {\n      'createdDate': setCreatedDateValid,\n      'publishedDate': setPublishedDateValid,\n      'modifiedDate': setModifiedDateValid,\n      'distReleaseDate': setDistReleaseDateValid,\n      'distModificationDate': setDistModificationDateValid\n    };\n    \n    const setValidFunc = validSetters[name];\n    \n    if (!value && name !== 'publishedDate') {\n      e.target.setCustomValidity('');\n      \n      if (name === 'createdDate') setCreatedDateError('');\n      else if (name === 'modifiedDate') setModifiedDateError('');\n      else if (name === 'distReleaseDate') setDistReleaseDateError('');\n      else if (name === 'distModificationDate') setDistModificationDateError('');\n      \n      if (setValidFunc) setValidFunc(false);\n      return;\n    }\n    \n    const datePattern = /^\\d{4}\\/\\d{2}\\/\\d{2}$/;\n    if (!datePattern.test(value)) {\n      errorMessage = 'Please use YYYY/MM/DD format';\n      e.target.setCustomValidity(errorMessage);\n      \n      if (name === 'createdDate') setCreatedDateError(errorMessage);\n      else if (name === 'publishedDate') setPublishedDateError(errorMessage);\n      else if (name === 'modifiedDate') setModifiedDateError(errorMessage);\n      else if (name === 'distReleaseDate') setDistReleaseDateError(errorMessage);\n      else if (name === 'distModificationDate') setDistModificationDateError(errorMessage);\n      \n      if (setValidFunc) setValidFunc(false);\n      return;\n    }\n    \n    const parts = value.split('/');\n    const year = parseInt(parts[0], 10);\n    const month = parseInt(parts[1], 10);\n    const day = parseInt(parts[2], 10);\n    \n    if (year < 1900 || year > 2100) {\n      errorMessage = 'Year should be between 1900 and 2100';\n      e.target.setCustomValidity(errorMessage);\n      \n      if (name === 'createdDate') setCreatedDateError(errorMessage);\n      else if (name === 'publishedDate') setPublishedDateError(errorMessage);\n      else if (name === 'modifiedDate') setModifiedDateError(errorMessage);\n      else if (name === 'distReleaseDate') setDistReleaseDateError(errorMessage);\n      else if (name === 'distModificationDate') setDistModificationDateError(errorMessage);\n      \n      if (setValidFunc) setValidFunc(false);\n      return;\n    }\n    \n    if (month < 1 || month > 12) {\n      errorMessage = 'Month should be between 1 and 12';\n      e.target.setCustomValidity(errorMessage);\n      \n      if (name === 'createdDate') setCreatedDateError(errorMessage);\n      else if (name === 'publishedDate') setPublishedDateError(errorMessage);\n      else if (name === 'modifiedDate') setModifiedDateError(errorMessage);\n      else if (name === 'distReleaseDate') setDistReleaseDateError(errorMessage);\n      else if (name === 'distModificationDate') setDistModificationDateError(errorMessage);\n      \n      if (setValidFunc) setValidFunc(false);\n      return;\n    }\n    \n    const daysInMonth = [\n      31, isLeapYear(year) ? 29 : 28, 31, 30, 31, 30,\n      31, 31, 30, 31, 30, 31\n    ];\n    \n    if (day < 1 || day > daysInMonth[month - 1]) {\n      errorMessage = `Day should be between 1 and ${daysInMonth[month - 1]} for this month`;\n      e.target.setCustomValidity(errorMessage);\n      \n      if (name === 'createdDate') setCreatedDateError(errorMessage);\n      else if (name === 'publishedDate') setPublishedDateError(errorMessage);\n      else if (name === 'modifiedDate') setModifiedDateError(errorMessage);\n      else if (name === 'distReleaseDate') setDistReleaseDateError(errorMessage);\n      else if (name === 'distModificationDate') setDistModificationDateError(errorMessage);\n      \n      if (setValidFunc) setValidFunc(false);\n      return;\n    }\n    \n    const date = new Date(year, month - 1, day);\n    if (\n      isNaN(date.getTime()) || \n      date.getFullYear() !== year || \n      date.getMonth() !== month - 1 || \n      date.getDate() !== day\n    ) {\n      errorMessage = 'Invalid date';\n      e.target.setCustomValidity(errorMessage);\n      \n      if (name === 'createdDate') setCreatedDateError(errorMessage);\n      else if (name === 'publishedDate') setPublishedDateError(errorMessage);\n      else if (name === 'modifiedDate') setModifiedDateError(errorMessage);\n      else if (name === 'distReleaseDate') setDistReleaseDateError(errorMessage);\n      else if (name === 'distModificationDate') setDistModificationDateError(errorMessage);\n      \n      if (setValidFunc) setValidFunc(false);\n      return;\n    }\n    \n    e.target.setCustomValidity('');\n    \n    if (name === 'createdDate') setCreatedDateError('');\n    else if (name === 'publishedDate') setPublishedDateError('');\n    else if (name === 'modifiedDate') setModifiedDateError('');\n    else if (name === 'distReleaseDate') setDistReleaseDateError('');\n    else if (name === 'distModificationDate') setDistModificationDateError('');\n    \n    if (setValidFunc) setValidFunc(true);\n\n    if (setValidFunc) {\n      setValidFunc(true);\n      console.log(`Setting ${name} to valid`); // Add this line\n    }\n\n    };\n  \n\n  const isLeapYear = (year) => {\n    return (year % 4 === 0 && year % 100 !== 0) || (year % 400 === 0);\n  };\n  \n  \n  const convertToISODate = (dateString) => {\n    if (!dateString) return '';\n    \n    if (/^\\d{4}\\/\\d{2}\\/\\d{2}$/.test(dateString)) {\n      return dateString.replace(/\\//g, '-');\n    }\n    \n    return dateString;\n  };\n\n\n  const validateRegularInput = (e) => {\n    const { name, value } = e.target;\n    \n    // Map field names to their valid setter functions\n    const validSetters = {\n      'title': setTitleValid,\n      'description': setDescriptionValid,\n      'type': setTypeValid,\n      \n      'version': setVersionValid,\n      'accessStatement': setAccessStatementValid,\n      'keywords': setKeywordsInputValid,\n      'language': setLanguageInputValid,\n      'iriTemplate': setIriTemplateInputValid,\n      'linkedResources': setLinkedResourcesInputValid,\n      'nameSpace': setNameSpaceInputValid,\n      'vocabulariesUsed': setVocabulariesUsedInputValid,\n      'metadataSchema': setMetadataSchemaInputValid,\n      'restAPI': setRestAPIInputValid,\n      \n      'exampleQueries': setExampleQueriesInputValid,\n      'distLicense': setDistLicenseValid,\n      'distRights': setDistRightsValid,\n      'distSpatialResolution': setDistSpatialResolutionValid,\n      'distTemporalResolution': setDistTemporalResolutionValid,\n      'distCompressionFormat': setDistCompressionFormatValid,\n      'distPackagingFormat': setDistPackagingFormatValid,\n      'distHasPolicy': setDistHasPolicyValid,\n    'sparqlDataService': setSparqlDataServiceValid,\n    'sparqlIdentifier': setSparqlIdentifierValid,\n    'sparqlTitle': setSparqlTitleValid,\n    'sparqlEndpointDescription': setSparqlEndpointDescriptionValid,\n    'sparqlStatus': setSparqlStatusValid,\n    'exampleResourceTitle': setExampleResourceTitleValid,\n    'exampleResourceMediaType': setExampleResourceMediaTypeValid,\n    'exampleResourceDescription': setExampleResourceDescriptionValid,\n    'exampleResourceStatus': setExampleResourceStatusValid\n    };\n    \n    const setValidFunc = validSetters[name];\n    if (!setValidFunc) return;\n    \n    // Set valid if field has content\n    setValidFunc(value && value.trim().length > 0);\n};\n  \n  const handleRemoveTag = (fieldName, index) => {\n    const newTags = [...formData[fieldName]];\n    newTags.splice(index, 1);\n    setFormData({\n      ...formData,\n      [fieldName]: newTags\n    });\n  };\n  \n  const handleFileUpload = (e) => {\n    const file = e.target.files[0];\n    if (file) {\n      setImageFileName(file.name);\n      setFormData({\n        ...formData,\n        metaGraph: [...formData.metaGraph, file.name]\n      });\n    }\n  };\n  \n  const addPendingTagInputs = () => {\n    // Create a copy of the current form data that we'll update\n    let updatedFormData = {...formData};\n    \n    // Handle all tag input fields\n    if (identifierInput.trim()) {\n      updatedFormData = {\n        ...updatedFormData,\n        identifier: [...updatedFormData.identifier, identifierInput.trim()]\n      };\n    }\n    \n    \n    if (alternativeTitleInput.trim()) {\n      updatedFormData = {\n        ...updatedFormData,\n        alternativeTitle: [...updatedFormData.alternativeTitle, alternativeTitleInput.trim()]\n      };\n    }\n    \n    if (acronymInput.trim()) {\n      updatedFormData = {\n        ...updatedFormData,\n        acronym: [...updatedFormData.acronym, acronymInput.trim()]\n      };\n    }\n    \n    if (homepageURLInput.trim()) {\n      const iriError = isValidIriString(homepageURLInput);\n      if (!iriError) {\n        updatedFormData = {\n          ...updatedFormData,\n          homepageURL: [...updatedFormData.homepageURL, homepageURLInput.trim()]\n        };\n      } else {\n        setHomepageURLInputError(iriError);\n      }\n    }\n    \n    if (otherPagesInput.trim()) {\n      const iriError = isValidIriString(otherPagesInput);\n      if (!iriError) {\n        updatedFormData = {\n          ...updatedFormData,\n          otherPages: [...updatedFormData.otherPages, otherPagesInput.trim()]\n        };\n      } else {\n        setOtherPagesInputError(iriError);\n      }\n    }\n    \n    if (modifiedDateInput) {\n      updatedFormData = {\n        ...updatedFormData,\n        modifiedDate: [...updatedFormData.modifiedDate, modifiedDateInput]\n      };\n    }\n    \n    if (primaryReferenceDocInput.trim()) {\n      updatedFormData = {\n        ...updatedFormData,\n        primaryReferenceDocument: [...updatedFormData.primaryReferenceDocument, primaryReferenceDocInput.trim()]\n      };\n    }\n    \n    if (statisticsInput.trim()) {\n      updatedFormData = {\n        ...updatedFormData,\n        statistics: [...updatedFormData.statistics, statisticsInput.trim()]\n      };\n    }\n    \n    if (keywordsInput.trim()) {\n      updatedFormData = {\n        ...updatedFormData,\n        keywords: [...updatedFormData.keywords, keywordsInput.trim()]\n      };\n    }\n    \n    if (categoryInput.trim()) {\n      updatedFormData = {\n        ...updatedFormData,\n        category: [...updatedFormData.category, categoryInput.trim()]\n      };\n    }\n    \n    if (publicationReferencesInput.trim()) {\n      updatedFormData = {\n        ...updatedFormData,\n        publicationReferences: [...updatedFormData.publicationReferences, publicationReferencesInput.trim()]\n      };\n    }\n    \n    if (languageInput.trim()) {\n      updatedFormData = {\n        ...updatedFormData,\n        language: [...updatedFormData.language, languageInput.trim()]\n      };\n    }\n    \n    if (iriTemplateInput.trim()) {\n      updatedFormData = {\n        ...updatedFormData,\n        iriTemplate: [...updatedFormData.iriTemplate, iriTemplateInput.trim()]\n      };\n    }\n    \n    if (linkedResourcesInput.trim()) {\n      updatedFormData = {\n        ...updatedFormData,\n        linkedResources: [...updatedFormData.linkedResources, linkedResourcesInput.trim()]\n      };\n    }\n    \n    if (exampleResourceInput.trim()) {\n      updatedFormData = {\n        ...updatedFormData,\n        exampleResource: [...updatedFormData.exampleResource, exampleResourceInput.trim()]\n      };\n    }\n    \n    if (sourceInput.trim()) {\n      updatedFormData = {\n        ...updatedFormData,\n        source: [...updatedFormData.source, sourceInput.trim()]\n      };\n    }\n    \n    if (nameSpaceInput.trim()) {\n      updatedFormData = {\n        ...updatedFormData,\n        nameSpace: [...updatedFormData.nameSpace, nameSpaceInput.trim()]\n      };\n    }\n  \n    if (vocabulariesUsedInput.trim()) {\n      updatedFormData = {\n        ...updatedFormData,\n        vocabulariesUsed: [...updatedFormData.vocabulariesUsed, vocabulariesUsedInput.trim()]\n      };\n    }\n    \n    if (metadataSchemaInput.trim()) {\n      updatedFormData = {\n        ...updatedFormData,\n        metadataSchema: [...updatedFormData.metadataSchema, metadataSchemaInput.trim()]\n      };\n    }\n    \n    \n    if (restAPIInput.trim()) {\n      updatedFormData = {\n        ...updatedFormData,\n        restAPI: [...updatedFormData.restAPI, restAPIInput.trim()]\n      };\n    }\n    \n    if (exampleQueriesInput.trim()) {\n      updatedFormData = {\n        ...updatedFormData,\n        exampleQueries: [...updatedFormData.exampleQueries, exampleQueriesInput.trim()]\n      };\n    }\n    \n    // Check if current distribution is partially filled and valid\n    const currDist = currentDistribution;\n    if (currDist.title || currDist.description || currDist.mediaType || \n        currDist.downloadURL || currDist.accessURL) {\n      // Only add the distribution if it has the required fields\n      if (currDist.title && currDist.description && currDist.mediaType && \n          currDist.downloadURL && currDist.accessURL) {\n        updatedFormData = {\n          ...updatedFormData,\n          distributions: [...updatedFormData.distributions, {...currDist}]\n        };\n      }\n    }\n    \n    // Update the state with all changes\n    setFormData(updatedFormData);\n    \n    // Return the updated form data for immediate use\n    return updatedFormData;\n  };\n\n  const handleDistributionChange = (field, value) => {\n    setCurrentDistribution({\n      ...currentDistribution,\n      [field]: value\n    });\n  };\n\n  // Validate a distribution before adding it\n  const validateDistribution = (dist) => {\n    return dist.title && dist.description && dist.mediaType && \n           dist.downloadURL && dist.accessURL;\n  };\n\n  // Add a distribution\n  const handleAddDistribution = () => {\n    if (!validateDistribution(currentDistribution)) {\n      setMessage('Please fill in all required fields for the distribution');\n      return;\n    }\n    \n    setFormData({\n      ...formData,\n      distributions: [...formData.distributions, {...currentDistribution}]\n    });\n    \n    // Reset the current distribution form\n    setCurrentDistribution({\n      title: '',\n      description: '',\n      mediaType: '',\n      downloadURL: '',\n      accessURL: '',\n      accessService: '',\n      byteSize: '',\n      compressionFormat: '',\n      packagingFormat: '',\n      hasPolicy: '',\n      license: '',\n       rights:'',\n      spatialResolution: '',\n      temporalResolution: '',\n      releaseDate: '',\n      modificationDate: ''\n    });\n\n    setMessage('Distribution added successfully');\n    setTimeout(() => setMessage(''), 2000);\n  };\n\n  // Remove a distribution\n  const handleRemoveDistribution = (index) => {\n    const newDistributions = [...formData.distributions];\n    newDistributions.splice(index, 1);\n    setFormData({\n      ...formData,\n      distributions: newDistributions\n    });\n  };\n\n\n\n\n\n  const validateDateField = (fieldName, dateValue) => {\n    if (!dateValue) {\n      // For required fields, this would be caught later\n      return true;\n    }\n    \n    if (!isValidDate(dateValue)) {\n      // Create a synthetic event to pass to validateDateInput\n      const syntheticEvent = {\n        target: {\n          name: fieldName,\n          value: dateValue,\n          setCustomValidity: () => {} // Mock function\n        }\n      };\n      \n      validateDateInput(syntheticEvent);\n      return false;\n    }\n    \n    return true;\n  };\n  \n  // Helper function to check if a date string is valid\n  const isValidDate = (dateString) => {\n    // Skip empty values\n    if (!dateString) return true;\n    \n    // Check format\n    const datePattern = /^\\d{4}\\/\\d{2}\\/\\d{2}$/;\n    if (!datePattern.test(dateString)) {\n      return false;\n    }\n    \n    // Parse date parts\n    const parts = dateString.split('/');\n    const year = parseInt(parts[0], 10);\n    const month = parseInt(parts[1], 10);\n    const day = parseInt(parts[2], 10);\n    \n    // Check ranges\n    if (year < 1990 || year > 2030) return false;\n    if (month < 1 || month > 12) return false;\n    \n    // Check days in month\n    const daysInMonth = [\n      31, isLeapYear(year) ? 29 : 28, 31, 30, 31, 30,\n      31, 31, 30, 31, 30, 31\n    ];\n    \n    if (day < 1 || day > daysInMonth[month - 1]) return false;\n    \n    return true;\n  };\n\n\n\n  const handleDatePickerChange = (e, targetFieldName) => {\n    const selectedDate = e.target.value; // This will be in YYYY-MM-DD format\n    \n    // Convert from YYYY-MM-DD to YYYY/MM/DD\n    const formattedDate = selectedDate.replace(/-/g, '/');\n    \n    // Set the value in the appropriate field based on targetFieldName\n    if (targetFieldName === 'createdDate') {\n      // For direct form fields\n      setFormData({\n        ...formData,\n        createdDate: formattedDate\n      });\n    } else if (targetFieldName === 'publishedDate') {\n      setFormData({\n        ...formData,\n        publishedDate: formattedDate\n      });\n    } else if (targetFieldName === 'modifiedDate') {\n      // For the modified date input\n      setModifiedDateInput(formattedDate);\n    } else if (targetFieldName === 'distReleaseDate') {\n      // For distribution date fields\n      setCurrentDistribution({\n        ...currentDistribution,\n        releaseDate: formattedDate\n      });\n    } else if (targetFieldName === 'distModificationDate') {\n      setCurrentDistribution({\n        ...currentDistribution,\n        modificationDate: formattedDate\n      });\n    }\n    \n    // Validate the date after setting it\n    setTimeout(() => {\n      const syntheticEvent = {\n        target: {\n          name: targetFieldName,\n          value: formattedDate,\n          setCustomValidity: () => {}\n        }\n      };\n      validateDateInput(syntheticEvent);\n    }, 0);\n  };\n\n\n  const formatDatesForSubmission = (formData) => {\n    const updatedForm = { ...formData };\n    \n    // Format single date fields\n    if (updatedForm.createdDate) {\n      updatedForm.createdDate = convertToISODate(updatedForm.createdDate);\n    }\n    \n    if (updatedForm.publishedDate) {\n      updatedForm.publishedDate = convertToISODate(updatedForm.publishedDate);\n    }\n    \n    // Format date arrays\n    if (updatedForm.modifiedDate && updatedForm.modifiedDate.length > 0) {\n      updatedForm.modifiedDate = updatedForm.modifiedDate.map(date => \n        convertToISODate(date)\n      );\n    }\n    \n    // Format dates in distributions\n    if (updatedForm.distributions && updatedForm.distributions.length > 0) {\n      updatedForm.distributions = updatedForm.distributions.map(dist => {\n        const newDist = { ...dist };\n        if (newDist.releaseDate) {\n          newDist.releaseDate = convertToISODate(newDist.releaseDate);\n        }\n        if (newDist.modificationDate) {\n          newDist.modificationDate = convertToISODate(newDist.modificationDate);\n        }\n        return newDist;\n      });\n    }\n    \n    return updatedForm;\n  };\n  \n  \n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    const updatedForm = addPendingTagInputs();\n    \n    // Separate arrays for different types of errors\n    const missingFields = [];\n    const invalidDates = [];\n    \n    // Check for missing required fields (including dates)\n    if (!updatedForm.title) missingFields.push('Title');\n    if (!updatedForm.description) missingFields.push('Description'); \n    if (!updatedForm.type || updatedForm.type.length === 0) missingFields.push('Type');\n    if (!updatedForm.publishedDate) missingFields.push('Published Date');\n    if (updatedForm.distributions.length === 0) missingFields.push('Distribution');\n    if (updatedForm.primaryReferenceDocument.length === 0) missingFields.push('Primary Reference Document');\n    if (updatedForm.keywords.length === 0) missingFields.push('Keywords');\n    if (updatedForm.language.length === 0) missingFields.push('Language');\n    if (!updatedForm.accessStatement) missingFields.push('Access Statement');\n    if (updatedForm.vocabulariesUsed.length === 0) missingFields.push('Vocabularies Used');\n    if (updatedForm.metadataSchema.length === 0) missingFields.push('Metadata Schema');\n    \n    // Check for invalid dates (only for dates that are filled)\n    if (createdDateError && updatedForm.createdDate) invalidDates.push(`Created Date: ${createdDateError}`);\n    if (publishedDateError && updatedForm.publishedDate) invalidDates.push(`Published Date: ${publishedDateError}`);\n    if (modifiedDateError && updatedForm.modifiedDate.length > 0) invalidDates.push(`Modified Date: ${modifiedDateError}`);\n    if (distReleaseDateError) invalidDates.push(`Distribution Release Date: ${distReleaseDateError}`);\n    if (distModificationDateError) invalidDates.push(`Distribution Modification Date: ${distModificationDateError}`);\n    \n    // For optional date fields that have values, validate them\n    if (updatedForm.createdDate) {\n      const e = {\n        target: {\n          name: 'createdDate',\n          value: updatedForm.createdDate,\n          setCustomValidity: () => {}\n        }\n      };\n      validateDateInput(e);\n      if (createdDateError) {\n        invalidDates.push(`Created Date: ${createdDateError}`);\n      }\n    }\n\n    // Construct error message\n    let errorMessage = '';\n    \n    if (missingFields.length > 0) {\n      errorMessage += `The following fields are required but have not been filled: ${missingFields.join(', ')}`;\n    }\n    \n    if (invalidDates.length > 0) {\n      if (errorMessage) errorMessage += '\\n\\n';\n      errorMessage += `The following dates are invalid:\\n${invalidDates.join('\\n')}`;\n    }\n\n    if (errorMessage) {\n      setMessage(errorMessage);\n      setIsSubmitting(false);\n      return;\n    }\n    \n    // Sync SPARQL endpoints and Example Resources before submission\n    updatedForm.sparqlEndpoint = sparqlEndpoints;\n    updatedForm.exampleResource = exampleResources;\n\n    // Proceed with submission\n    setIsSubmitting(true);\n    setMessage('');\n    \n    try {\n      // Submit form data to parent component\n      const result = await onSubmit(updatedForm);\n      \n      if (result.success) {\n        setMessage('Form submitted successfully!');\n        setTimeout(() => {\n          setMessage('');\n          onClose();\n        }, 3000);\n      } else {\n        setMessage(result.message);\n      }\n    } catch (error) {\n      console.error('Error in form submission:', error);\n      setMessage('An unexpected error occurred. Please try again.');\n    } finally {\n      setIsSubmitting(false);\n    }\n};\n\n  const formatDate = (dateString) => {\n    if (!dateString) return '';\n    try {\n      const date = new Date(dateString);\n      return date.toISOString().split('T')[0]; //YYYY-MM-DD\n    } catch (e) {\n      return dateString;\n    }\n  };\n\n\n  const handleSaveDraft = () => {\n    // First add any pending tag inputs\n    const updatedForm = addPendingTagInputs();\n    \n    \n    const existingDraftId = updatedForm.draftId || null;\n    const draftId = existingDraftId || `draft-${Date.now()}`;\n    const draft = {\n      id: draftId,\n      name: updatedForm.title || 'Untitled Draft',\n      date: new Date().toISOString(),\n      formData: {\n        ...updatedForm,\n        draftId: draftId // Store the draft ID in the form data\n      }\n    };\n    \n    // Get existing drafts from localStorage\n    let savedDrafts = [];\n    try {\n      const draftsString = localStorage.getItem('kg-metadata-drafts');\n      if (draftsString) {\n        savedDrafts = JSON.parse(draftsString);\n      }\n    } catch (error) {\n      console.error('Error loading saved drafts:', error);\n    }\n    \n    \n    if (existingDraftId) {\n      savedDrafts = savedDrafts.filter(d => d.id !== existingDraftId);\n    }\n    \n    \n    savedDrafts.push(draft);\n    localStorage.setItem('kg-metadata-drafts', JSON.stringify(savedDrafts));\n    \n    \n    setMessage('Draft saved successfully!');\n    setTimeout(() => setMessage(''), 2000);\n\n    if (onDraftSaved) {\n      onDraftSaved();\n    }\n    setTimeout(() => {\n      onClose();\n    }, 2000); \n  };\n\n\n  return (\n    <div className={`modal-overlay`}>\n    <div className={`modal-content`} onClick={e => e.stopPropagation()}>\n    \n    {message && (\n      <div className={`floating-message`}>\n        <div className={message.includes('success') ? 'success-message' : 'error-message'}>\n          <div className={`message-content`}>{message}</div>\n          <button \n            type=\"button\" \n            className={`message-close-button`} \n            onClick={() => setMessage(null)} \n            aria-label=\"Dismiss message\"\n          >\n            Dismiss\n          </button>\n        </div>\n      </div>\n    )}\n      <div className={`modal-header`}>\n        <h2>Knowledge Graph Metadata</h2>\n        <button className={`modal-close-button`} onClick={onClose}>×</button>\n      </div>\n      \n      <div className={`modal-body`} onClick={(e) => e.stopPropagation()}>\n        \n        <form onSubmit={handleSubmit}>\n          \n          {/* Identifier (now optional, multiple values) */}\n          <div className=\"form-group\">\n            <label htmlFor=\"identifier\">\n              Identifier <span className=\"field-indicator optional-indicator\">optional, multiple values allowed</span>\n            </label>\n            <div className=\"tag-input-container\">\n              <div className=\"tag-input-row\">\n                <input\n                  type=\"text\"\n                  id=\"identifier\"\n                  value={identifierInput}\n                  onChange={(e) => {\n                    setIdentifierInput(e.target.value);\n                    setIdentifierInputValid(false);\n                  }}\n                  onBlur={() => {\n                    if (identifierInput.trim()) setIdentifierInputValid(true);\n                  }}\n                  onKeyPress={(e) => handleKeyPress(e, 'identifier', identifierInput, setIdentifierInput)}\n                  className={`tag-input ${identifierInputValid ? 'tag-input-valid' : ''}`}\n                />\n                <button \n                  type=\"button\" \n                  className=\"tag-add-button\"\n                  onClick={() => {\n                    handleAddTag('identifier', identifierInput, setIdentifierInput);\n                    setIdentifierInputValid(false);\n                  }}\n                >\n                  +\n                </button>\n              </div>\n              <div className=\"tag-list\">\n                {formData.identifier.map((id, index) => (\n                  <div key={`identifier-${index}`} className=\"tag-item tag-item-valid\">\n                    <span className=\"tag-text\">{id}</span>\n                    <button \n                      type=\"button\"\n                      className=\"tag-remove\"\n                      onClick={() => handleRemoveTag('identifier', index)}\n                    >\n                      ×\n                    </button>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"form-group\">\n            <label htmlFor=\"type\">\n              Type <span className=\"field-indicator required-indicator\">required</span>\n            </label>\n            <div className={`checkbox-group ${typeValid ? 'form-input-valid' : ''}`}>\n              <label className=\"checkbox-label\">\n                <input\n                  type=\"checkbox\"\n                  name=\"type\"\n                  value=\"dcat:Dataset\"\n                  checked={formData.type.includes('dcat:Dataset')}\n                  onChange={() => handleTypeChange('dcat:Dataset')}\n                  className=\"checkbox-input\"\n                />\n                dcat:Dataset\n              </label>\n              <label className=\"checkbox-label\">\n                <input\n                  type=\"checkbox\"\n                  name=\"type\"\n                  value=\"void:Dataset\"\n                  checked={formData.type.includes('void:Dataset')}\n                  onChange={() => handleTypeChange('void:Dataset')}\n                  className=\"checkbox-input\"\n                />\n                void:Dataset\n              </label>\n            </div>\n          </div>\n          \n          {/* Title */}\n          <div className=\"form-group\">\n            <label htmlFor=\"title\">\n              Title <span className=\"field-indicator required-indicator\">required, 1 value only</span>\n            </label>\n            <input\n              type=\"text\"\n              id=\"title\"\n              name=\"title\"\n              value={formData.title}\n              onChange={handleChange}\n              className={`form-control ${titleValid ? 'form-input-valid' : ''}`}\n              placeholder=\"Enter title\"\n              required\n            />\n          </div>\n          \n          <div className=\"form-group\">\n            <label htmlFor=\"alternativeTitle\">\n              Alternative Title <span className=\"field-indicator optional-indicator\">optional, multiple values allowed</span>\n            </label>\n            <div className=\"tag-input-container\">\n              <div className=\"tag-input-row\">\n                <input\n                  type=\"text\"\n                  id=\"alternativeTitle\"\n                  value={alternativeTitleInput}\n                  onChange={(e) => {\n                    setAlternativeTitleInput(e.target.value);\n                    setAlternativeTitleInputValid(false);\n                  }}\n                  onBlur={() => {\n                    if (alternativeTitleInput.trim()) setAlternativeTitleInputValid(true);\n                  }}\n                  onKeyPress={(e) => handleKeyPress(e, 'alternativeTitle', alternativeTitleInput, setAlternativeTitleInput)}\n                  className={`tag-input ${alternativeTitleInputValid ? 'tag-input-valid' : ''}`}\n                />\n                <button \n                  type=\"button\" \n                  className=\"tag-add-button\"\n                  onClick={() => {\n                    handleAddTag('alternativeTitle', alternativeTitleInput, setAlternativeTitleInput);\n                    setAlternativeTitleInputValid(false);\n                  }}\n                >\n                  +\n                </button>\n              </div>\n              <div className=\"tag-list\">\n                {formData.alternativeTitle.map((title, index) => (\n                  <div key={`alt-title-${index}`} className=\"tag-item tag-item-valid\">\n                    <span className=\"tag-text\">{title}</span>\n                    <button \n                      type=\"button\"\n                      className=\"tag-remove\"\n                      onClick={() => handleRemoveTag('alternativeTitle', index)}\n                    >\n                      ×\n                    </button>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n          \n          {/* Description */}\n          <div className=\"form-group\">\n            <label htmlFor=\"description\">\n              Description <span className=\"field-indicator required-indicator\">required, 1 value only</span>\n            </label>\n            <input\n              type=\"text\"\n              id=\"description\"\n              name=\"description\"\n              value={formData.description}\n              onChange={handleChange}\n              className={`form-control ${descriptionValid ? 'form-input-valid' : ''}`}\n              required\n            />\n          </div>\n          \n          {/* Date fields */}\n          <div className=\"form-group\">\n            <label htmlFor=\"createdDate\">\n              Created Date <span className=\"field-indicator optional-indicator\">optional, 1 value only</span>\n            </label>\n            <div className=\"date-input-container\">\n              <input\n                type=\"text\"\n                id=\"createdDate\"\n                name=\"createdDate\"\n                value={formData.createdDate}\n                onChange={handleChange}\n                onBlur={validateDateInput}\n                placeholder=\"YYYY/MM/DD\"\n                className={`date-input ${createdDateError ? 'date-input-error' : ''} ${createdDateValid ? 'date-input-valid' : ''}`}\n              />\n              <input\n                type=\"date\"\n                className=\"date-picker-control\"\n                onChange={(e) => handleDatePickerChange(e, 'createdDate')}\n                aria-label=\"Date picker for Created Date\"\n              />\n            </div>\n            {createdDateError && <div className=\"date-error-message\">{createdDateError}</div>}\n          </div>\n          \n    \n          <div className=\"form-group\">\n            <label htmlFor=\"modifiedDate\">\n              Modified Date <span className=\"field-indicator optional-indicator\">optional, multiple values allowed</span>\n            </label>\n            <div className=\"tag-input-container\">\n              <div className=\"tag-input-row\">\n                <input\n                  type=\"text\"\n                  id=\"modifiedDate\"\n                  name=\"modifiedDate\"\n                  value={modifiedDateInput}\n                  onChange={(e) => setModifiedDateInput(e.target.value)}\n                  onBlur={validateDateInput}\n                  placeholder=\"YYYY/MM/DD\"\n                  className={`date-input ${modifiedDateError ? 'date-input-error' : ''} ${modifiedDateValid ? 'date-input-valid' : ''}`}\n                />\n                <input\n                  type=\"date\"\n                  className=\"date-picker-control\"\n                  onChange={(e) => handleDatePickerChange(e, 'modifiedDate')}\n                  aria-label=\"Date picker for Modified Date\"\n                />\n                <button \n                  type=\"button\" \n                  className=\"tag-add-button\"\n                  onClick={handleAddDate}\n                  disabled={!modifiedDateInput || modifiedDateError}\n                >\n                  +\n                </button>\n              </div>\n              {modifiedDateError && <div className=\"date-error-message\">{modifiedDateError}</div>}\n              <div className=\"tag-list\">\n                {formData.modifiedDate.map((date, index) => (\n                  <div key={`modified-date-${index}`} className=\"tag-item\">\n                    <span className=\"tag-text date-tag\">{date}</span>\n                    <button \n                      type=\"button\"\n                      className=\"tag-remove\"\n                      onClick={() => handleRemoveTag('modifiedDate', index)}\n                    >\n                      ×\n                    </button>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n    \n                      \n          <div className=\"form-group\">\n            <label htmlFor=\"publishedDate\">\n              Published Date <span className=\"field-indicator required-indicator\">required, 1 value only</span>\n            </label>\n            <div className=\"date-input-container\">\n              <input\n                type=\"text\"\n                id=\"publishedDate\"\n                name=\"publishedDate\"\n                value={formData.publishedDate}\n                onChange={handleChange}\n                onBlur={validateDateInput}\n                placeholder=\"YYYY/MM/DD\"\n                required\n                className={`date-input ${publishedDateError ? 'date-input-error' : ''} ${publishedDateValid ? 'date-input-valid' : ''}`}\n              />\n              <input\n                type=\"date\"\n                className=\"date-picker-control\"\n                onChange={(e) => handleDatePickerChange(e, 'publishedDate')}\n                aria-label=\"Date picker for Published Date\"\n              />\n            </div>\n            {publishedDateError && <div className=\"date-error-message\">{publishedDateError}</div>}\n          </div>\n    \n    \n          <div className=\"form-group\">\n          <label htmlFor=\"vocabulariesUsed\">\n              Vocabularies Used <span className=\"field-indicator required-indicator\">required (IRI), multiple values allowed</span>\n          </label>\n          <div className=\"tag-input-container\">\n              <div className=\"tag-input-row\">\n              <input\n                  type=\"text\"\n                  id=\"vocabulariesUsed\"\n                  name=\"vocabulariesUsedInput\"\n                  value={vocabulariesUsedInput}\n                  onChange={(e) => {\n                    setVocabulariesUsedInput(e.target.value);\n                    setVocabulariesUsedInputError('');\n                    setVocabulariesUsedInputValid(false);\n                  }}\n                  onBlur={validateIriInput}\n                  onKeyUp= {(e) => handleKeyPress(e, 'vocabulariesUsed', vocabulariesUsedInput, setVocabulariesUsedInput, setVocabulariesUsedInputError)}\n                  className={`tag-input ${vocabulariesUsedInputError ? 'tag-input-error' : ''} ${vocabulariesUsedInputValid ? 'tag-input-valid' : ''}`}\n              />\n              {vocabulariesUsedInputError && <div className=\"iri-error-message\">{vocabulariesUsedInputError}</div>}\n\n              <button \n                  type=\"button\" \n                  className=\"tag-add-button\"\n                  onClick={() => handleAddTag('vocabulariesUsed', vocabulariesUsedInput, setVocabulariesUsedInput)}\n              >\n                  +\n              </button>\n              </div>\n              <div className=\"tag-list\">\n              {formData.vocabulariesUsed.map((item, index) => (\n                  <div key={`vocabulary-${index}`} className=\"tag-item\">\n                  <span className=\"tag-text\">{item}</span>\n                  <button \n                      type=\"button\"\n                      className=\"tag-remove\"\n                      onClick={() => handleRemoveTag('vocabulariesUsed', index)}\n                  >\n                      ×\n                  </button>\n                  </div>\n              ))}\n              </div>\n              <div className=\"field-hint\"> </div>\n          </div>\n          </div>\n    \n          {/* Metadata Schema [1,∞] - Required, multiple values */}\n          <div className=\"form-group\">\n          <label htmlFor=\"metadataSchema\">\n              Metadata Schema <span className=\"field-indicator required-indicator\">required (IRI), multiple values allowed</span>\n          </label>\n          <div className=\"tag-input-container\">\n              <div className=\"tag-input-row\">\n              <input\n                type=\"text\"\n                id=\"metadataSchema\"\n                name=\"metadataSchemaInput\"\n                value={metadataSchemaInput}\n                onChange={(e) => {\n                  setMetadataSchemaInput(e.target.value);\n                  setMetadataSchemaInputError('');\n                  setMetadataSchemaInputValid(false);\n                }}\n                onBlur={validateIriInput}\n                onKeyPress={(e) => handleKeyPress(e, 'metadataSchema', metadataSchemaInput, setMetadataSchemaInput, setMetadataSchemaInputError)}\n                className={`tag-input ${metadataSchemaInputError ? 'tag-input-error' : ''} ${metadataSchemaInputValid ? 'tag-input-valid' : ''}`}\n              />\n              {metadataSchemaInputError && <div className=\"iri-error-message\">{metadataSchemaInputError}</div>}\n\n              <button \n                  type=\"button\" \n                  className=\"tag-add-button\"\n                  onClick={() => handleAddTag('metadataSchema', metadataSchemaInput, setMetadataSchemaInput)}\n              >\n                  +\n              </button>\n              </div>\n              <div className=\"tag-list\">\n              {formData.metadataSchema.map((item, index) => (\n                  <div key={`metadata-schema-${index}`} className=\"tag-item\">\n                  <span className=\"tag-text\">{item}</span>\n                  <button \n                      type=\"button\"\n                      className=\"tag-remove\"\n                      onClick={() => handleRemoveTag('metadataSchema', index)}\n                  >\n                      ×\n                  </button>\n                  </div>\n              ))}\n              </div>\n              <div className=\"field-hint\"> </div>\n          </div>\n          </div>\n    \n          {/* Primary Reference Document */}\n          <div className=\"form-group\">\n            <label htmlFor=\"primaryReferenceDocument\">\n              Primary Reference Document <span className=\"field-indicator required-indicator\">required (IRI), multiple values allowed</span>\n            </label>\n            <div className=\"tag-input-container\">\n              <div className=\"tag-input-row\">\n              <input\n                type=\"text\"\n                id=\"primaryReferenceDocument\"\n                name=\"primaryReferenceDocInput\"\n                value={primaryReferenceDocInput}\n                onChange={(e) => {\n                  setPrimaryReferenceDocInput(e.target.value);\n                  setPrimaryReferenceDocInputError('');\n                  setPrimaryReferenceDocInputValid(false);\n                }}\n                onBlur={validateIriInput}\n                onKeyUp={(e) => handleKeyPress(e, 'primaryReferenceDocument', primaryReferenceDocInput, setPrimaryReferenceDocInput, setPrimaryReferenceDocInputError)}\n                className={`${primaryReferenceDocInputError ? 'tag-input-error' : ''} ${primaryReferenceDocInputValid ? 'tag-input-valid' : ''}`}\n              />\n              {primaryReferenceDocInputError && <div className=\"iri-error-message\">{primaryReferenceDocInputError}</div>}\n\n                <button \n                  type=\"button\" \n                  className=\"tag-add-button\"\n                  onClick={() => handleAddTag('primaryReferenceDocument', primaryReferenceDocInput, setPrimaryReferenceDocInput)}\n                >\n                  +\n                </button>\n              </div>\n              <div className=\"tag-list\">\n                {formData.primaryReferenceDocument.map((doc, index) => (\n                  <div key={`ref-doc-${index}`} className=\"tag-item\">\n                    <span className=\"tag-text\">{doc}</span>\n                    <button \n                      type=\"button\"\n                      className=\"tag-remove\"\n                      onClick={() => handleRemoveTag('primaryReferenceDocument', index)}\n                    >\n                      ×\n                    </button>\n                  </div>\n                ))}\n              </div>\n              <div className=\"field-hint\"> </div>\n            </div>\n          </div>\n          \n          {/* Meta Graph */}\n          <div className=\"form-group\">\n            <label htmlFor=\"metaGraph\">\n              Meta Graph <span className=\"field-indicator optional-indicator\">optional, multiple values allowed</span>\n            </label>\n            <div className=\"file-upload-section\">\n              <div className=\"file-upload-label\">\n                <span className=\"file-name\">{imageFileName || \"No file selected\"}</span>\n                <button \n                  type=\"button\" \n                  className=\"browse-button\"\n                  onClick={() => fileInputRef.current.click()}\n                >\n                  Browse\n                </button>\n                <input\n          onBlur={validateRegularInput}              type=\"file\"\n                  id=\"metaGraph\"\n                  ref={fileInputRef}\n                  onChange={handleFileUpload}\n                  accept=\"image/*\"\n                  className=\"file-upload-input\"\n                  style={{ display: \"none\" }}\n                />\n              </div>\n              <div className=\"tag-list\">\n                {formData.metaGraph.map((graph, index) => (\n                  <div key={`meta-graph-${index}`} className=\"tag-item\">\n                    <span className=\"tag-text\">{graph}</span>\n                    <button \n                      type=\"button\"\n                      className=\"tag-remove\"\n                      onClick={() => handleRemoveTag('metaGraph', index)}\n                    >\n                      ×\n                    </button>\n                  </div>\n                ))}\n              </div>\n              <div className=\"field-hint\">Upload image files to add to meta graph</div>\n            </div>\n          </div>\n          \n          {/* Statistics */}\n          <div className=\"form-group\">\n            <label htmlFor=\"statistics\">\n              Statistics <span className=\"field-indicator optional-indicator\">optional, multiple values allowed</span>\n            </label>\n            <div className=\"tag-input-container\">\n              <div className=\"tag-input-row\">\n              <input\n                type=\"text\"\n                id=\"statistics\"\n                value={statisticsInput}\n                onChange={(e) => {\n                  setStatisticsInput(e.target.value);\n                  setStatisticsInputValid(false);\n                }}\n                onBlur={() => setStatisticsInputValid(!!statisticsInput.trim())}\n                onKeyPress={(e) => handleKeyPress(e, 'statistics', statisticsInput, setStatisticsInput)}\n                className={`tag-input ${statisticsInputValid ? 'tag-input-valid' : ''}`}\n              />\n              <button \n                  type=\"button\" \n                  className=\"tag-add-button\"\n                  onClick={() => handleAddTag('statistics', statisticsInput, setStatisticsInput)}\n              >\n                  +\n              </button>\n              </div>\n              <div className=\"tag-list\">\n                {formData.statistics.map((stat, index) => (\n                  <div key={`stat-${index}`} className=\"tag-item\">\n                    <span className=\"tag-text\">{stat}</span>\n                    <button \n                      type=\"button\"\n                      className=\"tag-remove\"\n                      onClick={() => handleRemoveTag('statistics', index)}\n                    >\n                      ×\n                    </button>\n                  </div>\n                ))}\n              </div>\n              <div className=\"field-hint\"> </div>\n            </div>\n          </div>\n    \n          {/* Acronym */}\n          <div className=\"form-group\">\n            <label htmlFor=\"acronym\">\n              Acronym <span className=\"field-indicator optional-indicator\">optional, multiple values allowed</span>\n            </label>\n            <div className=\"tag-input-container\">\n              <div className=\"tag-input-row\">\n              <input\n                  type=\"text\"\n                  id=\"acronym\"\n                  value={acronymInput}\n                  onChange={(e) => {\n                    setAcronymInput(e.target.value);\n                    setAcronymInputValid(false);\n                  }}\n                  onBlur={() => setAcronymInputValid(!!acronymInput.trim())}\n                  onKeyPress={(e) => handleKeyPress(e, 'acronym', acronymInput, setAcronymInput)}\n                  className={`tag-input ${acronymInputValid ? 'tag-input-valid' : ''}`}\n              />\n              <button \n                  type=\"button\" \n                  className=\"tag-add-button\"\n                  onClick={() => handleAddTag('acronym', acronymInput, setAcronymInput)}\n              >\n                  +\n              </button>\n              </div>\n              <div className=\"tag-list\">\n                {formData.acronym.map((acr, index) => (\n                  <div key={`acronym-${index}`} className=\"tag-item\">\n                    <span className=\"tag-text\">{acr}</span>\n                    <button \n                      type=\"button\"\n                      className=\"tag-remove\"\n                      onClick={() => handleRemoveTag('acronym', index)}\n                    >\n                      ×\n                    </button>\n                  </div>\n                ))}\n              </div>\n              <div className=\"field-hint\"> </div>\n            </div>\n          </div>\n          \n          {/* Homepage URL (optional, multiple values allowed, IRIs) */}\n          <div className=\"form-group\">\n            <label htmlFor=\"homepageURL\">\n              Homepage URL <span className=\"field-indicator optional-indicator\">optional (IRI), multiple values allowed, IRIs</span>\n            </label>\n            <div className=\"tag-input-container\">\n              <div className=\"tag-input-row\">\n              <input\n                type=\"text\"\n                id=\"homepageURL\"\n                name=\"homepageURLInput\"\n                value={homepageURLInput}\n                onChange={(e) => {\n                  setHomepageURLInput(e.target.value);\n                  setHomepageURLInputError('');\n                  setHomepageURLInputValid(false);\n                }}\n                onBlur={validateIriInput}\n                onKeyPress={(e) => handleKeyPress(e, 'homepageURL', homepageURLInput, setHomepageURLInput, setHomepageURLInputError)}\n                placeholder=\"Enter IRI and press Enter or +\"\n                className={`${homepageURLInputError ? 'tag-input-error' : ''} ${homepageURLInputValid ? 'tag-input-valid' : ''}`}\n              />\n                <button\n                  type=\"button\"\n                  className=\"tag-add-button\"\n                  onClick={() => handleAddTag('homepageURL', homepageURLInput, setHomepageURLInput)}\n                >\n                  +\n                </button>\n              </div>\n              <div className=\"tag-list\">\n                {formData.homepageURL.map((url, index) => (\n                  <div key={`homepage-url-${index}`} className=\"tag-item\">\n                    <span className=\"tag-text\">{url}</span>\n                    <button\n                      type=\"button\"\n                      className=\"tag-remove\"\n                      onClick={() => handleRemoveTag('homepageURL', index)}\n                    >\n                      ×\n                    </button>\n                  </div>\n                ))}\n              </div>\n              {homepageURLInputError && <div className=\"iri-error-message\">{homepageURLInputError}</div>}\n              <div className=\"field-hint\">Press Enter or click + to add IRI</div>\n            </div>\n          </div>\n          \n         {/* Other Pages (optional, multiple values allowed, IRIs) */}\n          <div className=\"form-group\">\n            <label htmlFor=\"otherPages\">\n              Other Pages <span className=\"field-indicator optional-indicator\">optional (IRI), multiple values allowed, IRIs</span>\n            </label>\n            <div className=\"tag-input-container\">\n              <div className=\"tag-input-row\">\n              <input\n                type=\"text\"\n                id=\"otherPages\"\n                name=\"otherPagesInput\"\n                value={otherPagesInput}\n                onChange={(e) => {\n                  setOtherPagesInput(e.target.value);\n                  setOtherPagesInputError('');\n                  setOtherPagesInputValid(false);\n                }}\n                onBlur={validateIriInput}\n                onKeyPress={(e) => handleKeyPress(e, 'otherPages', otherPagesInput, setOtherPagesInput, setOtherPagesInputError)}\n                placeholder=\"Enter IRI and press Enter or +\"\n                className={`tag-input ${otherPagesInputError ? 'tag-input-error' : ''} ${otherPagesInputValid ? 'tag-input-valid' : ''}`}\n              />\n              {otherPagesInputError && <div className=\"iri-error-message\">{otherPagesInputError}</div>}\n\n                <button\n                  type=\"button\"\n                  className=\"tag-add-button\"\n                  onClick={() => handleAddTag('otherPages', otherPagesInput, setOtherPagesInput)}\n                >\n                  +\n                </button>\n              </div>\n              {otherPagesInputError && <div className={`field-error-message`}>{otherPagesInputError}</div>}\n              <div className=\"tag-list\">\n                {formData.otherPages.map((page, index) => (\n                  <div key={`other-page-${index}`} className=\"tag-item\">\n                    <span className=\"tag-text\">{page}</span>\n                    <button\n                      type=\"button\"\n                      className=\"tag-remove\"\n                      onClick={() => handleRemoveTag('otherPages', index)}\n                    >\n                      ×\n                    </button>\n                  </div>\n                ))}\n              </div>\n              <div className=\"field-hint\">Press Enter or click + to add IRI</div>\n            </div>\n          </div>\n\n          {/* Role fields */}\n          <div className={`role-section`}>\n          <div className=\"form-group\">\n          <label className=\"role-label\">\n            Role: Creator <span className=\"field-indicator optional-indicator\">optional, 1 set of values</span>\n          </label>\n          {/* Role Creator */}\n          <div className=\"toggle-container\">\n            <div className=\"toggle-switch-container\">\n              <label className={`toggle-option ${roleCreatorToggle === 'agentIRI' ? 'active' : 'inactive'}`}>\n                Agent IRI available\n              </label>\n              <label className=\"toggle-switch\">\n                <input\n                  type=\"checkbox\"\n                  checked={roleCreatorToggle === 'nameEmail'}\n                  onChange={(e) => {\n                    const newToggle = e.target.checked ? 'nameEmail' : 'agentIRI';\n                    setRoleCreatorToggle(newToggle);\n                    \n                    // Clear fields when switching\n                    if (newToggle === 'agentIRI') {\n                      handleRoleChange('roleCreator', 'givenName', '');\n                      handleRoleChange('roleCreator', 'mbox', '');\n                    } else {\n                      handleRoleChange('roleCreator', 'agent', '');\n                      setRoleCreatorAgentError('');\n                      setRoleCreatorAgentValid(false);\n                    }\n                  }}\n                />\n                <span className={`slider ${roleCreatorToggle === 'nameEmail' ? 'active' : ''}`}></span>\n              </label>\n              <label className={`toggle-option ${roleCreatorToggle === 'nameEmail' ? 'active' : 'inactive'}`}>\n                Name + mBox\n              </label>\n            </div>\n          </div>\n          \n          <div className=\"role-fields\">\n            {roleCreatorToggle === 'agentIRI' ? (\n              <div className=\"role-field\">\n                <label htmlFor=\"roleCreatorAgent\" className=\"subfield-label\">Agent</label>\n                <input\n                  onBlur={validateIriInput}\n                  type=\"text\"\n                  id=\"roleCreatorAgent\"\n                  name=\"roleCreatorAgent\"\n                  value={formData.roleCreator.agent}\n                  onChange={(e) => {\n                    handleRoleChange('roleCreator', 'agent', e.target.value);\n                    setRoleCreatorAgentError('');\n                    setRoleCreatorAgentValid(false);\n                  }}\n                  className={`subfield-input ${roleCreatorAgentError ? 'input-error' : ''} ${roleCreatorAgentValid ? 'input-valid' : ''}`}\n                />\n                {roleCreatorAgentError && <div className=\"iri-error-message\">{roleCreatorAgentError}</div>}\n              </div> \n            ) : (\n              <>\n                <div className=\"role-field\">\n                  <label htmlFor=\"roleCreatorGivenName\" className=\"subfield-label\">Given Name</label>\n                  <input\n                    onBlur={validateRegularInput}\n                    type=\"text\"\n                    id=\"roleCreatorGivenName\"\n                    value={formData.roleCreator.givenName}\n                    onChange={(e) => handleRoleChange('roleCreator', 'givenName', e.target.value)}\n                    className=\"subfield-input\"\n                  />\n                </div>\n                <div className=\"role-field\">\n                  <label htmlFor=\"roleCreatorMbox\" className=\"subfield-label\">Mbox</label>\n                  <input\n                    onBlur={validateRegularInput}\n                    type=\"email\"\n                    id=\"roleCreatorMbox\"\n                    value={formData.roleCreator.mbox}\n                    onChange={(e) => handleRoleChange('roleCreator', 'mbox', e.target.value)}\n                    className=\"subfield-input\"\n                  />\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n\n        {/* Role: Publisher */}\n        <div className=\"form-group\">\n          <label className=\"role-label\">\n            Role: Publisher <span className=\"field-indicator optional-indicator\">optional, 1 set of values</span>\n          </label>\n          \n          <div className=\"toggle-container\">\n            <div className=\"toggle-switch-container\">\n              <label className={`toggle-option ${rolePublisherToggle === 'agentIRI' ? 'active' : 'inactive'}`}>\n                Agent IRI available\n              </label>\n              <label className=\"toggle-switch\">\n                <input\n                  type=\"checkbox\"\n                  checked={rolePublisherToggle === 'nameEmail'}\n                  onChange={(e) => {\n                    const newToggle = e.target.checked ? 'nameEmail' : 'agentIRI';\n                    setRolePublisherToggle(newToggle);\n                    \n                    if (newToggle === 'agentIRI') {\n                      handleRoleChange('rolePublisher', 'givenName', '');\n                      handleRoleChange('rolePublisher', 'mbox', '');\n                    } else {\n                      handleRoleChange('rolePublisher', 'agent', '');\n                      setRolePublisherAgentError('');\n                      setRolePublisherAgentValid(false);\n                    }\n                  }}\n                />\n                <span className={`slider ${rolePublisherToggle === 'nameEmail' ? 'active' : ''}`}></span>\n              </label>\n              <label className={`toggle-option ${rolePublisherToggle === 'nameEmail' ? 'active' : 'inactive'}`}>\n                Name + mBox\n              </label>\n            </div>\n          </div>\n          \n          <div className=\"role-fields\">\n            {rolePublisherToggle === 'agentIRI' ? (\n              <div className=\"role-field\">\n                <label htmlFor=\"rolePublisherAgent\" className=\"subfield-label\">Agent</label>\n                <input\n                  onBlur={validateIriInput}\n                  type=\"text\"\n                  id=\"rolePublisherAgent\"\n                  name=\"rolePublisherAgent\"\n                  value={formData.rolePublisher.agent}\n                  onChange={(e) => {\n                    handleRoleChange('rolePublisher', 'agent', e.target.value);\n                    setRolePublisherAgentError('');\n                    setRolePublisherAgentValid(false);\n                  }}\n                  className={`subfield-input ${rolePublisherAgentError ? 'input-error' : ''} ${rolePublisherAgentValid ? 'input-valid' : ''}`}\n                />\n                {rolePublisherAgentError && <div className=\"iri-error-message\">{rolePublisherAgentError}</div>}\n              </div>\n            ) : (\n              <>\n                <div className=\"role-field\">\n                  <label htmlFor=\"rolePublisherGivenName\" className=\"subfield-label\">Given Name</label>\n                  <input\n                    onBlur={validateRegularInput}\n                    type=\"text\"\n                    id=\"rolePublisherGivenName\"\n                    value={formData.rolePublisher.givenName}\n                    onChange={(e) => handleRoleChange('rolePublisher', 'givenName', e.target.value)}\n                    className=\"subfield-input\"\n                  />\n                </div>\n                <div className=\"role-field\">\n                  <label htmlFor=\"rolePublisherMbox\" className=\"subfield-label\">Mbox</label>\n                  <input\n                    onBlur={validateRegularInput}\n                    type=\"email\"\n                    id=\"rolePublisherMbox\"\n                    value={formData.rolePublisher.mbox}\n                    onChange={(e) => handleRoleChange('rolePublisher', 'mbox', e.target.value)}\n                    className=\"subfield-input\"\n                  />\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n\n        {/* Role Funder */}\n        <div className=\"form-group\">\n          <label className=\"role-label\">\n            Role: Funder <span className=\"field-indicator optional-indicator\">optional, 1 set of values</span>\n          </label>\n          \n          <div className=\"toggle-container\">\n            <div className=\"toggle-switch-container\">\n              <label className={`toggle-option ${roleFunderToggle === 'agentIRI' ? 'active' : 'inactive'}`}>\n                Agent IRI available\n              </label>\n              <label className=\"toggle-switch\">\n                <input\n                  type=\"checkbox\"\n                  checked={roleFunderToggle === 'nameEmail'}\n                  onChange={(e) => {\n                    const newToggle = e.target.checked ? 'nameEmail' : 'agentIRI';\n                    setRoleFunderToggle(newToggle);\n                    \n                    if (newToggle === 'agentIRI') {\n                      handleRoleChange('roleFunder', 'givenName', '');\n                      handleRoleChange('roleFunder', 'mbox', '');\n                    } else {\n                      handleRoleChange('roleFunder', 'agent', '');\n                      setRoleFunderAgentError('');\n                      setRoleFunderAgentValid(false);\n                    }\n                  }}\n                />\n                <span className={`slider ${roleFunderToggle === 'nameEmail' ? 'active' : ''}`}></span>\n              </label>\n              <label className={`toggle-option ${roleFunderToggle === 'nameEmail' ? 'active' : 'inactive'}`}>\n                Name + mBox\n              </label>\n            </div>\n          </div>\n          \n          <div className=\"role-fields\">\n            {roleFunderToggle === 'agentIRI' ? (\n              <div className=\"role-field\">\n                <label htmlFor=\"roleFunderAgent\" className=\"subfield-label\">Agent</label>\n                <input\n                  onBlur={validateIriInput}\n                  type=\"text\"\n                  id=\"roleFunderAgent\"\n                  name=\"roleFunderAgent\"\n                  value={formData.roleFunder.agent}\n                  onChange={(e) => {\n                    handleRoleChange('roleFunder', 'agent', e.target.value);\n                    setRoleFunderAgentError('');\n                    setRoleFunderAgentValid(false);\n                  }}\n                  className={`subfield-input ${roleFunderAgentError ? 'input-error' : ''} ${roleFunderAgentValid ? 'input-valid' : ''}`}\n                />\n                {roleFunderAgentError && <div className=\"iri-error-message\">{roleFunderAgentError}</div>}\n              </div>  \n            ) : (\n              <>\n                <div className=\"role-field\">\n                  <label htmlFor=\"roleFunderGivenName\" className=\"subfield-label\">Given Name</label>\n                  <input\n                    onBlur={validateRegularInput}\n                    type=\"text\"\n                    id=\"roleFunderGivenName\"\n                    value={formData.roleFunder.givenName}\n                    onChange={(e) => handleRoleChange('roleFunder', 'givenName', e.target.value)}\n                    className=\"subfield-input\"\n                  />\n                </div>\n                <div className=\"role-field\">\n                  <label htmlFor=\"roleFunderMbox\" className=\"subfield-label\">Mbox</label>\n                  <input\n                    onBlur={validateRegularInput}\n                    type=\"email\"\n                    id=\"roleFunderMbox\"\n                    value={formData.roleFunder.mbox}\n                    onChange={(e) => handleRoleChange('roleFunder', 'mbox', e.target.value)}\n                    className=\"subfield-input\"\n                  />\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n        </div>\n\n         {/* License */}\n         <div className=\"form-group\">\n           <label htmlFor=\"license\">\n             License <span className=\"field-indicator required-indicator\">required (IRI), 1 value only</span>\n           </label>\n           <input\n              type=\"text\"\n              id=\"license\"\n              name=\"license\"\n              value={formData.license}\n              onChange={(e) => {\n                handleChange(e);\n                setLicenseError('');\n                setLicenseValid(false);\n              }}\n              onBlur={validateIriInput}\n              required\n              className={`form-control ${licenseValid ? 'form-input-valid' : ''} ${licenseError ? 'form-input-error' : ''}`}\n            />\n            {licenseError && <div className=\"iri-error-message\">{licenseError}</div>}\n         </div>\n         \n         {/* Version */}\n         <div className=\"form-group\">\n           <label htmlFor=\"version\">\n             Version <span className=\"field-indicator required-indicator\">required, 1 value only</span>\n           </label>\n           <input\n              type=\"text\"\n              id=\"version\"\n              name=\"version\"\n              value={formData.version}\n              onChange={handleChange}\n              onBlur={() => setVersionValid(!!formData.version.trim())}\n              required\n              className={`form-control ${versionValid ? 'form-input-valid' : ''}`}\n           />\n         </div>\n    \n         {/* Distributions Section */}\n         <div className=\"form-section\">\n           <h3 className=\"section-title\">Distributions</h3>\n           <div className=\"field-indicator required-indicator\">required, multiple submissions allowed</div>\n         </div>\n    \n         {/* Display existing distributions */}\n         <div className=\"distributions-list\">\n           {formData.distributions.map((dist, index) => (\n             <div key={`distribution-${index}`} className=\"distribution-item\">\n               <div className=\"distribution-header\">\n                 <div className=\"distribution-title\">{dist.title}</div>\n                 <div className=\"distribution-actions\">\n                      <button \n                        type=\"button\"\n                        className=\"edit-button\"\n                        onClick={() => {\n                          setCurrentDistribution({...dist});\n                          handleRemoveDistribution(index);\n                          document.querySelector('.distribution-form').scrollIntoView({ behavior: 'smooth' });\n                        }}\n                      >\n                        Edit\n                      </button>\n                      <button \n                        type=\"button\"\n                        className=\"tag-remove\"\n                        onClick={() => handleRemoveDistribution(index)}\n                      >\n                        ×\n                      </button>\n                    </div>\n                  </div>\n               <div className=\"distribution-preview\">\n                 <div className=\"distribution-field\">\n                   <span className=\"field-label\">Description:</span>\n                   <span className=\"field-value\">{dist.description}</span>\n                 </div>\n                 <div className=\"distribution-field\">\n                   <span className=\"field-label\">Media Type:</span>\n                   <span className=\"field-value\">{dist.mediaType}</span>\n                 </div>\n                 <div className=\"distribution-field\">\n                   <span className=\"field-label\">Download URL:</span>\n                   <span className=\"field-value\">{dist.downloadURL}</span>\n                 </div>\n                 <div className=\"distribution-field\">\n                   <span className=\"field-label\">Access URL:</span>\n                   <span className=\"field-value\">{dist.accessURL}</span>\n                 </div>\n                 {dist.accessService && (\n                   <div className=\"distribution-field\">\n                     <span className=\"field-label\">Access Service:</span>\n                     <span className=\"field-value\">{dist.accessService}</span>\n                   </div>\n                 )}\n                 {dist.byteSize && (\n                   <div className=\"distribution-field\">\n                     <span className=\"field-label\">Byte Size:</span>\n                     <span className=\"field-value\">{dist.byteSize}</span>\n                   </div>\n                 )}\n                 {dist.compressionFormat && (\n                   <div className=\"distribution-field\">\n                     <span className=\"field-label\">Compression Format:</span>\n                     <span className=\"field-value\">{dist.compressionFormat}</span>\n                   </div>\n                 )}\n                 {dist.packagingFormat && (\n                   <div className=\"distribution-field\">\n                     <span className=\"field-label\">Packaging Format:</span>\n                     <span className=\"field-value\">{dist.packagingFormat}</span>\n                   </div>\n                 )}\n    \n    \n                 {dist.hasPolicy && (\n                   <div className=\"distribution-field\">\n                     <span className=\"field-label\">Has Policy:</span>\n                     <span className=\"field-value\">{dist.hasPolicy}</span>\n                   </div>\n                 )}\n                 {dist.license && (\n                   <div className=\"distribution-field\">\n                     <span className=\"field-label\">license:</span>\n                     <span className=\"field-value\">{dist.license}</span>\n                   </div>\n                 )}\n                 {dist.rights && (\n                   <div className=\"distribution-field\">\n                     <span className=\"field-label\">Rights:</span>\n                     <span className=\"field-value\">{dist.rights}</span>\n                   </div>\n                 )}\n                 {dist.spatialResolution && (\n                   <div className=\"distribution-field\">\n                     <span className=\"field-label\">Spatial Resolution:</span>\n                     <span className=\"field-value\">{dist.spatialResolution}</span>\n                   </div>\n                 )}\n                 {dist.temporalResolution && (\n                   <div className=\"distribution-field\">\n                     <span className=\"field-label\">Temporal Resolution:</span>\n                     <span className=\"field-value\">{dist.temporalResolution}</span>\n                   </div>\n                 )}\n    \n    \n    \n    \n                 {dist.releaseDate && (\n                   <div className=\"distribution-field\">\n                     <span className=\"field-label\">Release Date:</span>\n                     <span className=\"field-value\">{formatDate(dist.releaseDate)}</span>\n                   </div>\n                 )}\n                 {dist.modificationDate && (\n                   <div className=\"distribution-field\">\n                     <span className=\"field-label\">Modification Date:</span>\n                     <span className=\"field-value\">{formatDate(dist.modificationDate)}</span>\n                   </div>\n                 )}\n               </div>\n             </div>\n           ))}\n         </div>\n    \n         {/* Distribution Form */}\n         <div className=\"distribution-form\">\n           <div className=\"distribution-form-header\">\n             <h4>Add New Distribution</h4>\n           </div>\n           \n           {/* Required distribution fields */}\n           <div className=\"form-group\">\n             <label htmlFor=\"distTitle\">\n               Title <span className=\"field-indicator required-indicator\">required</span>\n             </label>\n             <input\n              type=\"text\"\n              id=\"distTitle\"\n              value={currentDistribution.title}\n              onChange={(e) => handleDistributionChange('title', e.target.value)}\n              className=\"subfield-input\"\n             />\n           </div>\n           \n           <div className=\"form-group\">\n             <label htmlFor=\"distDescription\">\n               Description <span className=\"field-indicator required-indicator\">required</span>\n             </label>\n             <textarea\n              id=\"distDescription\"\n               value={currentDistribution.description}\n               onChange={(e) => handleDistributionChange('description', e.target.value)}\n               rows=\"2\"\n               className=\"subfield-input\"\n             ></textarea>\n           </div>\n           \n           <div className=\"form-group\">\n             <label htmlFor=\"distMediaType\">\n               Media Type <span className=\"field-indicator required-indicator\">required</span>\n             </label>\n             <input\n              type=\"text\"\n              id=\"distMediaType\"\n              value={currentDistribution.mediaType}\n              onChange={(e) => handleDistributionChange('mediaType', e.target.value)}\n              className=\"subfield-input\"\n             />\n           </div>\n           \n           <div className=\"form-group\">\n             <label htmlFor=\"distDownloadURL\">\n               Download URL (dcat:downloadURL) <span className=\"field-indicator required-indicator\">required (IRI)</span>\n             </label>\n             <input\n                type=\"url\"\n                id=\"distDownloadURL\"\n                name=\"distDownloadURL\"\n                value={currentDistribution.downloadURL}\n                onChange={(e) => {\n                  handleDistributionChange('downloadURL', e.target.value);\n                  setDistDownloadURLError('');\n                  setDistDownloadURLValid(false);\n                }}\n                onBlur={validateIriInput}\n                className={`subfield-input ${distDownloadURLError ? 'input-error' : ''} ${distDownloadURLValid ? 'input-valid' : ''}`}\n              />\n              {distDownloadURLError && <div className=\"iri-error-message\">{distDownloadURLError}</div>}\n\n           </div>\n           \n           <div className=\"form-group\">\n             <label htmlFor=\"distAccessURL\">\n               Access URL <span className=\"field-indicator required-indicator\">required (IRI)</span>\n             </label>\n             <input\n                type=\"url\"\n                id=\"distAccessURL\"\n                name=\"distAccessURL\"\n                value={currentDistribution.accessURL}\n                onChange={(e) => {\n                  handleDistributionChange('accessURL', e.target.value);\n                  setDistAccessURLError('');\n                  setDistAccessURLValid(false);\n                }}\n                onBlur={validateIriInput}\n                className={`subfield-input ${distAccessURLError ? 'input-error' : ''} ${distAccessURLValid ? 'input-valid' : ''}`}\n              />\n              {distAccessURLError && <div className=\"iri-error-message\">{distAccessURLError}</div>}\n          </div>    \n           {/* Optional distribution fields */}\n           <div className=\"form-group\">\n             <label htmlFor=\"distAccessService\">\n               Access Service <span className=\"field-indicator optional-indicator\">optional</span>\n             </label>\n             <input\n              type=\"text\"\n              id=\"distAccessService\"\n              value={currentDistribution.accessService}\n              onChange={(e) => handleDistributionChange('accessService', e.target.value)}\n              className=\"subfield-input\"\n             />\n           </div>\n           \n           <div className=\"form-group\">\n             <label htmlFor=\"distByteSize\">\n               Byte Size <span className=\"field-indicator optional-indicator\">optional</span>\n             </label>\n             <input\n              type=\"text\"\n              id=\"distByteSize\"\n              value={currentDistribution.byteSize}\n              onChange={(e) => handleDistributionChange('byteSize', e.target.value)}\n              className=\"subfield-input\"\n             />\n           </div>\n           \n           <div className=\"form-group\">\n             <label htmlFor=\"distCompressionFormat\">\n               Compression Format <span className=\"field-indicator optional-indicator\">optional</span>\n             </label>\n             <input\n               type=\"text\"\n               id=\"distCompressionFormat\"\n               name=\"distCompressionFormat\"\n               value={currentDistribution.compressionFormat}\n               onChange={(e) => handleDistributionChange('compressionFormat', e.target.value)}\n               onBlur={validateRegularInput}\n               className={`subfield-input ${distCompressionFormatValid ? 'form-input-valid' : ''}`}\n             />\n           </div>\n           \n           <div className=\"form-group\">\n             <label htmlFor=\"distPackagingFormat\">\n               Packaging Format <span className=\"field-indicator optional-indicator\">optional</span>\n             </label>\n             <input\n               type=\"text\"\n               id=\"distPackagingFormat\"\n               name=\"distPackagingFormat\"\n               value={currentDistribution.packagingFormat}\n               onChange={(e) => handleDistributionChange('packagingFormat', e.target.value)}\n               onBlur={validateRegularInput}\n               className={`subfield-input ${distPackagingFormatValid ? 'form-input-valid' : ''}`}\n             />\n           </div>\n           <div className=\"form-group\">\n             <label htmlFor=\"distHasPolicy\">\n               Has Policy <span className=\"field-indicator optional-indicator\">optional</span>\n             </label>\n             <input\n               type=\"text\"\n               id=\"distHasPolicy\"\n               name=\"distHasPolicy\"\n               value={currentDistribution.hasPolicy}\n               onChange={(e) => handleDistributionChange('hasPolicy', e.target.value)}\n               onBlur={validateRegularInput}\n               className={`subfield-input ${distHasPolicyValid ? 'form-input-valid' : ''}`}\n             />\n           </div>\n           \n           <div className=\"form-group\">\n             <label htmlFor=\"distLicense\">\n               License <span className=\"field-indicator optional-indicator\">optional</span>\n             </label>\n             <input\n               type=\"text\"\n               id=\"distLicense\"\n               name=\"distLicense\"\n               value={currentDistribution.license}\n               onChange={(e) => handleDistributionChange('license', e.target.value)}\n               onBlur={validateRegularInput}\n               className={`subfield-input ${distLicenseValid ? 'form-input-valid' : ''}`}\n             />\n           </div>\n           \n           <div className=\"form-group\">\n             <label htmlFor=\"distRights\">\n               Rights <span className=\"field-indicator optional-indicator\">optional</span>\n             </label>\n             <input\n               type=\"text\"\n               id=\"distRights\"\n               name=\"distRights\"\n               value={currentDistribution.rights}\n               onChange={(e) => handleDistributionChange('rights', e.target.value)}\n               onBlur={validateRegularInput}\n               className={`subfield-input ${distRightsValid ? 'form-input-valid' : ''}`}\n             />\n           </div>\n           <div className=\"form-group\">\n             <label htmlFor=\"distSpatialResolution\">\n               Spatial Resolution <span className=\"field-indicator optional-indicator\">optional</span>\n             </label>\n             <input\n               type=\"text\"\n               id=\"distSpatialResolution\"\n               name=\"distSpatialResolution\"\n               value={currentDistribution.spatialResolution}\n               onChange={(e) => handleDistributionChange('spatialResolution', e.target.value)}\n               onBlur={validateRegularInput}\n               className={`subfield-input ${distSpatialResolutionValid ? 'form-input-valid' : ''}`}\n             />\n           </div>\n           <div className=\"form-group\">\n             <label htmlFor=\"distTemporalResolution\">\n               Temporal Resolution <span className=\"field-indicator optional-indicator\">optional</span>\n             </label>\n             <input\n               type=\"text\"\n               id=\"distTemporalResolution\"\n               name=\"distTemporalResolution\"\n               value={currentDistribution.temporalResolution}\n               onChange={(e) => handleDistributionChange('temporalResolution', e.target.value)}\n               onBlur={validateRegularInput}\n               className={`subfield-input ${distTemporalResolutionValid ? 'form-input-valid' : ''}`}\n             />\n           </div>\n           <div className=\"form-group\">\n             <label htmlFor=\"distReleaseDate\">\n              Release Date <span className=\"field-indicator optional-indicator\">optional</span>\n            </label>\n            <div className=\"date-input-container\">\n              <input\n                type=\"text\"\n                id=\"distReleaseDate\"\n                name=\"distReleaseDate\"\n                value={currentDistribution.releaseDate}\n                onChange={(e) => handleDistributionChange('releaseDate', e.target.value)}\n                onBlur={validateDateInput}\n                placeholder=\"YYYY/MM/DD\"\n                className={`date-input subfield-input ${distReleaseDateError ? 'date-input-error' : ''}`}\n              />\n              <input\n                type=\"date\"\n                className=\"date-picker-control\"\n                onChange={(e) => handleDatePickerChange(e, 'distReleaseDate')}\n                aria-label=\"Date picker for Release Date\"\n                defaultValue=\"\"\n                tabIndex=\"-1\"\n              />\n            </div>\n            {distReleaseDateError && <div className=\"date-error-message\">{distReleaseDateError}</div>}\n          </div>\n    \n          <div className=\"form-group\">\n            <label htmlFor=\"distModificationDate\">\n              Update/Modification Date <span className=\"field-indicator optional-indicator\">optional</span>\n            </label>\n            <div className=\"date-input-container\">\n              <input\n                type=\"text\"\n                id=\"distModificationDate\"\n                name=\"distModificationDate\"\n                value={currentDistribution.modificationDate}\n                onChange={(e) => handleDistributionChange('modificationDate', e.target.value)}\n                onBlur={validateDateInput}\n                placeholder=\"YYYY/MM/DD\"\n                className={`date-input subfield-input ${distModificationDateError ? 'date-input-error' : ''}`}\n              />\n              <input\n                type=\"date\"\n                className=\"date-picker-control\"\n                onChange={(e) => handleDatePickerChange(e, 'distModificationDate')}\n                aria-label=\"Date picker for Modification Date\"\n                defaultValue=\"\"\n                tabIndex=\"-1\"\n              />\n            </div>\n            {distModificationDateError && <div className=\"date-error-message\">{distModificationDateError}</div>}\n          </div>\n    \n           \n          \n           <div className=\"distribution-actions\">\n             <button \n               type=\"button\" \n               className={`add-button`}\n               onClick={handleAddDistribution}\n             >\n               Add Distribution\n             </button>\n           </div>\n         </div>\n         \n         <div className=\"form-group\">\n          <label htmlFor=\"restAPI\">\n              REST API <span className=\"field-indicator optional-indicator\">optional, multiple values allowed</span>\n          </label>\n          <div className=\"tag-input-container\">\n              <div className=\"tag-input-row\">\n              <input\n                  type=\"text\"\n                  id=\"restAPI\"\n                  value={restAPIInput}\n                  onChange={(e) => {\n                    setRestAPIInput(e.target.value);\n                    setRestAPIInputValid(false);\n                  }}\n                  onBlur={() => setRestAPIInputValid(!!restAPIInput.trim())}\n                  onKeyPress={(e) => handleKeyPress(e, 'restAPI', restAPIInput, setRestAPIInput)}\n                  className={`tag-input ${restAPIInputValid ? 'tag-input-valid' : ''}`}\n              />\n              <button \n                  type=\"button\" \n                  className=\"tag-add-button\"\n                  onClick={() => handleAddTag('restAPI', restAPIInput, setRestAPIInput)}\n              >\n                  +\n              </button>\n              </div>\n              <div className=\"tag-list\">\n              {formData.restAPI.map((item, index) => (\n                  <div key={`rest-api-${index}`} className=\"tag-item\">\n                  <span className=\"tag-text\">{item}</span>\n                  <button \n                      type=\"button\"\n                      className=\"tag-remove\"\n                      onClick={() => handleRemoveTag('restAPI', index)}\n                  >\n                      ×\n                  </button>\n                  </div>\n              ))}\n              </div>\n              <div className=\"field-hint\"> </div>\n          </div>\n          </div>\n    \n          {/* SPARQL Endpoints Section */}\n<div className=\"form-section\">\n  <h3 className=\"section-title\">SPARQL Endpoints</h3>\n  <div className=\"field-indicator optional-indicator\">optional, multiple submissions allowed</div>\n  {/* Display existing SPARQL endpoints */}\n  <div className=\"distributions-list\">\n    {sparqlEndpoints.map((endpoint, idx) => (\n      <div key={`sparql-endpoint-${idx}`} className=\"distribution-item\">\n        <div className=\"distribution-header\">\n          <div className=\"distribution-title\">{endpoint.title || '(no title)'}</div>\n          <div className=\"distribution-actions\">\n            <button\n              type=\"button\"\n              className=\"edit-button\"\n              onClick={() => handleEditSparqlEndpoint(idx)}\n              aria-label=\"Edit SPARQL endpoint\"\n            >\n              Edit\n            </button>\n            <button\n              type=\"button\"\n              className=\"tag-remove\"\n              onClick={() => handleRemoveSparqlEndpoint(idx)}\n              aria-label=\"Remove SPARQL endpoint\"\n            >\n              ×\n            </button>\n          </div>\n        </div>\n        <div className=\"distribution-preview\">\n          <div className=\"distribution-field\">\n            <span className=\"field-label\">dcat:DataService:</span>\n            <span className=\"field-value\">{endpoint.dataService}</span>\n          </div>\n          <div className=\"distribution-field\">\n            <span className=\"field-label\">dcat:endpointURL:</span>\n            <span className=\"field-value\">{endpoint.endpointURL}</span>\n          </div>\n          <div className=\"distribution-field\">\n            <span className=\"field-label\">dct:identifier:</span>\n            <span className=\"field-value\">{endpoint.identifier}</span>\n          </div>\n          <div className=\"distribution-field\">\n            <span className=\"field-label\">dct:title:</span>\n            <span className=\"field-value\">{endpoint.title}</span>\n          </div>\n          <div className=\"distribution-field\">\n            <span className=\"field-label\">dcat:endpointDescription:</span>\n            <span className=\"field-value\">{endpoint.endpointDescription}</span>\n          </div>\n          <div className=\"distribution-field\">\n            <span className=\"field-label\">adms:status:</span>\n            <span className=\"field-value\">{endpoint.status}</span>\n          </div>\n        </div>\n      </div>\n    ))}\n  </div>\n  {/* SPARQL Endpoint Form */}\n  <div className=\"distribution-form sparql-endpoint-form\">\n    <div className=\"distribution-form-header\">\n      <h4>Add New SPARQL Endpoint</h4>\n    </div>\n    <div className=\"form-group\">\n      <label htmlFor=\"sparqlDataService\">\n        dcat:DataService <span className=\"field-indicator optional-indicator\">optional</span>\n      </label>\n      <input\n        type=\"text\"\n        id=\"sparqlDataService\"\n        name=\"sparqlDataService\"\n        value={currentSparqlEndpoint.dataService}\n        onChange={e => handleCurrentSparqlEndpointChange('dataService', e.target.value)}\n        onBlur={validateRegularInput}\n        className={`subfield-input ${sparqlDataServiceValid ? 'form-input-valid' : ''}`}\n      />\n    </div>\n    <div className=\"form-group\">\n      <label htmlFor=\"sparqlEndpointURL\">\n        dcat:endpointURL <span className=\"field-indicator optional-indicator\">optional</span>\n      </label>\n      <input\n        type=\"text\"\n        id=\"sparqlEndpointURL\"\n        name=\"sparqlEndpointURL\"\n        value={currentSparqlEndpoint.endpointURL}\n        onChange={e => handleCurrentSparqlEndpointChange('endpointURL', e.target.value)}\n        onBlur={validateIriInput}\n        className={`subfield-input ${sparqlEndpointURLError ? 'form-input-error' : ''} ${sparqlEndpointURLValid ? 'form-input-valid' : ''}`}\n      />\n      {sparqlEndpointURLError && <div className=\"iri-error-message\">{sparqlEndpointURLError}</div>}\n    </div>\n    <div className=\"form-group\">\n      <label htmlFor=\"sparqlIdentifier\">\n        dct:identifier <span className=\"field-indicator optional-indicator\">optional</span>\n      </label>\n      <input\n        type=\"text\"\n        id=\"sparqlIdentifier\"\n        name=\"sparqlIdentifier\"\n        value={currentSparqlEndpoint.identifier}\n        onChange={e => handleCurrentSparqlEndpointChange('identifier', e.target.value)}\n        onBlur={validateRegularInput}\n        className={`subfield-input ${sparqlIdentifierValid ? 'form-input-valid' : ''}`}\n      />\n    </div>\n    <div className=\"form-group\">\n      <label htmlFor=\"sparqlTitle\">\n        dct:title <span className=\"field-indicator optional-indicator\">optional</span>\n      </label>\n      <input\n        type=\"text\"\n        id=\"sparqlTitle\"\n        name=\"sparqlTitle\"\n        value={currentSparqlEndpoint.title}\n        onChange={e => handleCurrentSparqlEndpointChange('title', e.target.value)}\n        onBlur={validateRegularInput}\n        className={`subfield-input ${sparqlTitleValid ? 'form-input-valid' : ''}`}\n      />\n    </div>\n    <div className=\"form-group\">\n      <label htmlFor=\"sparqlEndpointDescription\">\n        dcat:endpointDescription <span className=\"field-indicator optional-indicator\">optional</span>\n      </label>\n      <input\n        type=\"text\"\n        id=\"sparqlEndpointDescription\"\n        name=\"sparqlEndpointDescription\"\n        value={currentSparqlEndpoint.endpointDescription}\n        onChange={e => handleCurrentSparqlEndpointChange('endpointDescription', e.target.value)}\n        onBlur={validateRegularInput}\n        className={`subfield-input ${sparqlEndpointDescriptionValid ? 'form-input-valid' : ''}`}\n      />\n    </div>\n    <div className=\"form-group\">\n      <label htmlFor=\"sparqlStatus\">\n        adms:status <span className=\"field-indicator optional-indicator\">optional</span>\n      </label>\n      <input\n        type=\"text\"\n        id=\"sparqlStatus\"\n        name=\"sparqlStatus\"\n        value={currentSparqlEndpoint.status}\n        onChange={e => handleCurrentSparqlEndpointChange('status', e.target.value)}\n        onBlur={validateRegularInput}\n        className={`subfield-input ${sparqlStatusValid ? 'form-input-valid' : ''}`}\n      />\n    </div>\n    <div className=\"distribution-actions\">\n      <button\n        type=\"button\"\n        className=\"add-button\"\n        onClick={handleAddSparqlEndpoint}\n      >\n        {editingSparqlEndpointIdx !== null ? 'Save SPARQL Endpoint' : 'Add SPARQL Endpoint'}\n      </button>\n      {editingSparqlEndpointIdx !== null && (\n        <button\n          type=\"button\"\n          className=\"cancel-button\"\n          onClick={handleCancelEditSparqlEndpoint}\n        >\n          Cancel\n        </button>\n      )}\n    </div>\n  </div>\n</div>\n\n          {/* Example Resource Section */}\n<div className=\"form-section\">\n  <h3 className=\"section-title\">Example Resources</h3>\n  <div className=\"field-indicator optional-indicator\">optional, multiple submissions allowed</div>\n  \n  {/* Display existing Example Resources */}\n  <div className=\"distributions-list\">\n    {exampleResources.map((resource, idx) => (\n      <div key={`example-resource-${idx}`} className=\"distribution-item\">\n        <div className=\"distribution-header\">\n          <div className=\"distribution-title\">{resource.title || '(no title)'}</div>\n          <div className=\"distribution-actions\">\n            <button\n              type=\"button\"\n              className=\"edit-button\"\n              onClick={() => handleEditExampleResource(idx)}\n              aria-label=\"Edit Example Resource\"\n            >\n              Edit\n            </button>\n            <button\n              type=\"button\"\n              className=\"tag-remove\"\n              onClick={() => handleRemoveExampleResource(idx)}\n              aria-label=\"Remove Example Resource\"\n            >\n              ×\n            </button>\n          </div>\n        </div>\n        <div className=\"distribution-preview\">\n          <div className=\"distribution-field\">\n            <span className=\"field-label\">dcat:accessURL:</span>\n            <span className=\"field-value\">{resource.accessURL}</span>\n          </div>\n          <div className=\"distribution-field\">\n            <span className=\"field-label\">dct:title:</span>\n            <span className=\"field-value\">{resource.title}</span>\n          </div>\n          <div className=\"distribution-field\">\n            <span className=\"field-label\">dcat:mediaType:</span>\n            <span className=\"field-value\">{resource.mediaType}</span>\n          </div>\n          <div className=\"distribution-field\">\n            <span className=\"field-label\">dct:description:</span>\n            <span className=\"field-value\">{resource.description}</span>\n          </div>\n          <div className=\"distribution-field\">\n            <span className=\"field-label\">adms:status:</span>\n            <span className=\"field-value\">{resource.status}</span>\n          </div>\n        </div>\n      </div>\n    ))}\n  </div>\n\n  {/* Example Resource Form */}\n  <div className=\"distribution-form\">\n    <div className=\"form-group\">\n      <label htmlFor=\"exampleResourceAccessURL\">\n        dcat:accessURL <span className=\"field-indicator optional-indicator\">optional (IRI)</span>\n      </label>\n      <input\n        type=\"text\"\n        id=\"exampleResourceAccessURL\"\n        name=\"exampleResourceAccessURL\"\n        value={currentExampleResource.accessURL}\n        onChange={e => handleCurrentExampleResourceChange('accessURL', e.target.value)}\n        onBlur={validateIriInput}\n        className={`subfield-input ${exampleResourceAccessURLError ? 'form-input-error' : ''} ${exampleResourceAccessURLValid ? 'form-input-valid' : ''}`}\n      />\n      {exampleResourceAccessURLError && <div className=\"iri-error-message\">{exampleResourceAccessURLError}</div>}\n    </div>\n    <div className=\"form-group\">\n      <label htmlFor=\"exampleResourceTitle\">\n        dct:title <span className=\"field-indicator optional-indicator\">optional</span>\n      </label>\n      <input\n        type=\"text\"\n        id=\"exampleResourceTitle\"\n        name=\"exampleResourceTitle\"\n        value={currentExampleResource.title}\n        onChange={e => handleCurrentExampleResourceChange('title', e.target.value)}\n        onBlur={validateRegularInput}\n        className={`subfield-input ${exampleResourceTitleValid ? 'form-input-valid' : ''}`}\n      />\n    </div>\n    <div className=\"form-group\">\n      <label htmlFor=\"exampleResourceMediaType\">\n        dcat:mediaType <span className=\"field-indicator optional-indicator\">optional</span>\n      </label>\n      <input\n        type=\"text\"\n        id=\"exampleResourceMediaType\"\n        name=\"exampleResourceMediaType\"\n        value={currentExampleResource.mediaType}\n        onChange={e => handleCurrentExampleResourceChange('mediaType', e.target.value)}\n        onBlur={validateRegularInput}\n        className={`subfield-input ${exampleResourceMediaTypeValid ? 'form-input-valid' : ''}`}\n      />\n    </div>\n    <div className=\"form-group\">\n      <label htmlFor=\"exampleResourceDescription\">\n        dct:description <span className=\"field-indicator optional-indicator\">optional</span>\n      </label>\n      <input\n        type=\"text\"\n        id=\"exampleResourceDescription\"\n        name=\"exampleResourceDescription\"\n        value={currentExampleResource.description}\n        onChange={e => handleCurrentExampleResourceChange('description', e.target.value)}\n        onBlur={validateRegularInput}\n        className={`subfield-input ${exampleResourceDescriptionValid ? 'form-input-valid' : ''}`}\n      />\n    </div>\n    <div className=\"form-group\">\n      <label htmlFor=\"exampleResourceStatus\">\n        adms:status <span className=\"field-indicator optional-indicator\">optional</span>\n      </label>\n      <input\n        type=\"text\"\n        id=\"exampleResourceStatus\"\n        name=\"exampleResourceStatus\"\n        value={currentExampleResource.status}\n        onChange={e => handleCurrentExampleResourceChange('status', e.target.value)}\n        onBlur={validateRegularInput}\n        className={`subfield-input ${exampleResourceStatusValid ? 'form-input-valid' : ''}`}\n      />\n    </div>\n    <div className=\"button-row\">\n      <button\n        type=\"button\"\n        className=\"add-button\"\n        onClick={handleAddExampleResource}\n      >\n        {editingExampleResourceIdx !== null ? 'Save Changes' : 'Add Example Resource'}\n      </button>\n      {editingExampleResourceIdx !== null && (\n        <button\n          type=\"button\"\n          className=\"cancel-button\"\n          onClick={handleCancelEditExampleResource}\n        >\n          Cancel\n        </button>\n      )}\n    </div>\n  </div>\n</div>\n\n          {/* Example Queries [0,∞] - Optional, multiple values */}\n          <div className=\"form-group\">\n          <label htmlFor=\"exampleQueries\">\n              Example Queries <span className=\"field-indicator optional-indicator\">optional, multiple values allowed</span>\n          </label>\n          <div className=\"tag-input-container\">\n              <div className=\"tag-input-row\">\n              <input\n                  type=\"text\"\n                  id=\"exampleQueries\"\n                  name=\"exampleQueries\"\n                  value={exampleQueriesInput}\n                  onChange={(e) => setExampleQueriesInput(e.target.value)}\n                  onBlur={validateRegularInput}\n                  onKeyPress={(e) => handleKeyPress(e, 'exampleQueries', exampleQueriesInput, setExampleQueriesInput)}\n                  className={`tag-input ${exampleQueriesInputValid ? 'form-input-valid' : ''}`}\n              />\n              <button \n                  type=\"button\" \n                  className=\"tag-add-button\"\n                  onClick={() => handleAddTag('exampleQueries', exampleQueriesInput, setExampleQueriesInput)}\n              >\n                  +\n              </button>\n              </div>\n              <div className=\"tag-list\">\n              {formData.exampleQueries.map((item, index) => (\n                  <div key={`example-query-${index}`} className=\"tag-item\">\n                  <span className=\"tag-text\">{item}</span>\n                  <button \n                      type=\"button\"\n                      className=\"tag-remove\"\n                      onClick={() => handleRemoveTag('exampleQueries', index)}\n                  >\n                      ×\n                  </button>\n                  </div>\n              ))}\n              </div>\n              <div className=\"field-hint\"> </div>\n          </div>\n      </div>\n    \n         {/* Keywords [1,∞] - Required, multiple values */}\n         <div className=\"form-group\">\n           <label htmlFor=\"keywords\">\n             Keywords <span className=\"field-indicator required-indicator\">required, multiple values allowed</span>\n           </label>\n           <div className=\"tag-input-container\">\n             <div className=\"tag-input-row\">\n               <input\n                 type=\"text\"\n                 id=\"keywords\"\n                 name=\"keywords\"\n                 value={keywordsInput}\n                 onChange={(e) => setKeywordsInput(e.target.value)}\n                 onBlur={validateRegularInput}\n                 onKeyPress={(e) => handleKeyPress(e, 'keywords', keywordsInput, setKeywordsInput)}\n                 className={`tag-input ${keywordsInputValid ? 'form-input-valid' : ''}`}\n               />\n               <button \n                 type=\"button\" \n                 className=\"tag-add-button\"\n                 onClick={() => handleAddTag('keywords', keywordsInput, setKeywordsInput)}\n               >\n                 +\n               </button>\n             </div>\n             <div className=\"tag-list\">\n               {formData.keywords.map((keyword, index) => (\n                 <div key={`keyword-${index}`} className=\"tag-item\">\n                   <span className=\"tag-text\">{keyword}</span>\n                   <button \n                     type=\"button\"\n                     className=\"tag-remove\"\n                     onClick={() => handleRemoveTag('keywords', index)}\n                   >\n                     ×\n                   </button>\n                 </div>\n               ))}\n             </div>\n             <div className=\"field-hint\"> </div>\n           </div>\n         </div>\n    \n         {/* Category [0,∞] - Optional, multiple values */}\n         <div className=\"form-group\">\n           <label htmlFor=\"category\">\n             Category <span className=\"field-indicator optional-indicator\">optional (IRI), multiple values allowed</span>\n           </label>\n           <div className=\"tag-input-container\">\n             <div className=\"tag-input-row\">\n             <input\n                    type=\"text\"\n                    id=\"category\"\n                    name=\"categoryInput\"\n                    value={categoryInput}\n                    onChange={(e) => {\n                      setCategoryInput(e.target.value);\n                      setCategoryInputError('');\n                      setCategoryInputValid(false);\n                    }}\n                    onBlur={validateIriInput}\n                    onKeyUp={(e) => handleKeyPress(e, 'category', categoryInput, setCategoryInput, setCategoryInputError)}\n                    className={`${categoryInputError ? 'tag-input-error' : ''} ${categoryInputValid ? 'tag-input-valid' : ''}`}\n                  />\n                  {categoryInputError && <div className=\"iri-error-message\">{categoryInputError}</div>}\n\n               <button \n                 type=\"button\" \n                 className=\"tag-add-button\"\n                 onClick={() => handleAddTag('category', categoryInput, setCategoryInput)}\n               >\n                 +\n               </button>\n             </div>\n             <div className=\"tag-list\">\n               {formData.category.map((cat, index) => (\n                 <div key={`category-${index}`} className=\"tag-item\">\n                   <span className=\"tag-text\">{cat}</span>\n                   <button \n                     type=\"button\"\n                     className=\"tag-remove\"\n                     onClick={() => handleRemoveTag('category', index)}\n                   >\n                     ×\n                   </button>\n                 </div>\n               ))}\n             </div>\n             <div className=\"field-hint\"> </div>\n           </div>\n         </div>\n    \n         {/* Publication/References [0,∞] - Optional, multiple values */}\n         <div className=\"form-group\">\n           <label htmlFor=\"publicationReferences\">\n             Publication/References <span className=\"field-indicator optional-indicator\">optional (IRI), multiple values allowed</span>\n           </label>\n           <div className=\"tag-input-container\">\n             <div className=\"tag-input-row\">\n             <input\n                type=\"text\"\n                id=\"publicationReferences\"\n                name=\"publicationReferencesInput\"\n                value={publicationReferencesInput}\n                onChange={(e) => {\n                  setPublicationReferencesInput(e.target.value);\n                  setPublicationReferencesInputError('');\n                  setPublicationReferencesInputValid(false);\n                }}\n                onBlur={validateIriInput}\n                onKeyPress={(e) => handleKeyPress(e, 'publicationReferences', publicationReferencesInput, setPublicationReferencesInput, setPublicationReferencesInputError)}\n                className={`${publicationReferencesInputError ? 'tag-input-error' : ''} ${publicationReferencesInputValid ? 'tag-input-valid' : ''}`}\n              />\n              {publicationReferencesInputError && <div className=\"iri-error-message\">{publicationReferencesInputError}</div>}\n\n               <button \n                 type=\"button\" \n                 className=\"tag-add-button\"\n                 onClick={() => handleAddTag('publicationReferences', publicationReferencesInput, setPublicationReferencesInput)}\n               >\n                 +\n               </button>\n             </div>\n             <div className=\"tag-list\">\n               {formData.publicationReferences.map((ref, index) => (\n                 <div key={`pub-ref-${index}`} className=\"tag-item\">\n                   <span className=\"tag-text\">{ref}</span>\n                   <button \n                     type=\"button\"\n                     className=\"tag-remove\"\n                     onClick={() => handleRemoveTag('publicationReferences', index)}\n                   >\n                     ×\n                   </button>\n                 </div>\n               ))}\n             </div>\n             <div className=\"field-hint\"> </div>\n           </div>\n         </div>\n    \n         {/* Language [1,∞] - Required, multiple values */}\n         <div className=\"form-group\">\n           <label htmlFor=\"language\">\n             Language <span className=\"field-indicator required-indicator\">required, multiple values allowed</span>\n           </label>\n           <div className=\"tag-input-container\">\n             <div className=\"tag-input-row\">\n               <input\n                 type=\"text\"\n                 id=\"language\"\n                 name=\"language\"\n                 value={languageInput}\n                 onChange={(e) => setLanguageInput(e.target.value)}\n                 onBlur={validateRegularInput}\n                 onKeyPress={(e) => handleKeyPress(e, 'language', languageInput, setLanguageInput)}\n                 className={`tag-input ${languageInputValid ? 'form-input-valid' : ''}`}\n               />\n               <button \n                 type=\"button\" \n                 className=\"tag-add-button\"\n                 onClick={() => handleAddTag('language', languageInput, setLanguageInput)}\n               >\n                 +\n               </button>\n             </div>\n             <div className=\"tag-list\">\n               {formData.language.map((lang, index) => (\n                 <div key={`language-${index}`} className=\"tag-item\">\n                   <span className=\"tag-text\">{lang}</span>\n                   <button \n                     type=\"button\"\n                     className=\"tag-remove\"\n                     onClick={() => handleRemoveTag('language', index)}\n                   >\n                     ×\n                   </button>\n                 </div>\n               ))}\n             </div>\n             <div className=\"field-hint\"> </div>\n           </div>\n         </div>\n    \n         {/* IRI Template [0,∞] - Optional, multiple values */}\n         <div className=\"form-group\">\n           <label htmlFor=\"iriTemplate\">\n             IRI Template <span className=\"field-indicator optional-indicator\">optional, multiple values allowed</span>\n           </label>\n           <div className=\"tag-input-container\">\n             <div className=\"tag-input-row\">\n                <input\n                  type=\"text\"\n                  id=\"iriTemplate\"\n                  name=\"iriTemplate\"\n                  value={iriTemplateInput}\n                  onChange={(e) => setIriTemplateInput(e.target.value)}\n                  onBlur={validateRegularInput}\n                  onKeyPress={(e) => handleKeyPress(e, 'iriTemplate', iriTemplateInput, setIriTemplateInput)}\n                  className={`tag-input ${iriTemplateInputValid ? 'form-input-valid' : ''}`}\n                />\n               <button \n                 type=\"button\" \n                 className=\"tag-add-button\"\n                 onClick={() => handleAddTag('iriTemplate', iriTemplateInput, setIriTemplateInput)}\n               >\n                 +\n               </button>\n             </div>\n             <div className=\"tag-list\">\n               {formData.iriTemplate.map((iri, index) => (\n                 <div key={`iri-${index}`} className=\"tag-item\">\n                   <span className=\"tag-text\">{iri}</span>\n                   <button \n                     type=\"button\"\n                     className=\"tag-remove\"\n                     onClick={() => handleRemoveTag('iriTemplate', index)}\n                   >\n                     ×\n                   </button>\n                 </div>\n               ))}\n             </div>\n             <div className=\"field-hint\"> </div>\n           </div>\n         </div>\n    \n         {/* Linked Resources [0,∞] - Optional, multiple values */}\n         <div className=\"form-group\">\n           <label htmlFor=\"linkedResources\">\n             Linked Resources <span className=\"field-indicator optional-indicator\">optional, multiple values allowed</span>\n           </label>\n           <div className=\"tag-input-container\">\n             <div className=\"tag-input-row\">\n                <input\n                  type=\"text\"\n                  id=\"linkedResources\"\n                  name=\"linkedResources\"\n                  value={linkedResourcesInput}\n                  onChange={(e) => setLinkedResourcesInput(e.target.value)}\n                  onBlur={validateRegularInput}\n                  onKeyPress={(e) => handleKeyPress(e, 'linkedResources', linkedResourcesInput, setLinkedResourcesInput)}\n                  className={`tag-input ${linkedResourcesInputValid ? 'form-input-valid' : ''}`}\n                />\n               <button \n                 type=\"button\" \n                 className=\"tag-add-button\"\n                 onClick={() => handleAddTag('linkedResources', linkedResourcesInput, setLinkedResourcesInput)}\n               >\n                 +\n               </button>\n             </div>\n             <div className=\"tag-list\">\n               {formData.linkedResources.map((resource, index) => (\n                 <div key={`linked-resource-${index}`} className=\"tag-item\">\n                   <span className=\"tag-text\">{resource}</span>\n                   <button \n                     type=\"button\"\n                     className=\"tag-remove\"\n                     onClick={() => handleRemoveTag('linkedResources', index)}\n                   >\n                     ×\n                   </button>\n                 </div>\n               ))}\n             </div>\n             <div className=\"field-hint\"> </div>\n           </div>\n         </div>\n    \n         {/* Access Statement [1] - Required, single value */}\n         <div className=\"form-group\">\n           <label htmlFor=\"accessStatement\">\n             Access Statement <span className=\"field-indicator required-indicator\">required (IRI), 1 value only</span>\n           </label>\n           <input\n                id=\"accessStatement\"\n                name=\"accessStatement\"\n                value={formData.accessStatement}\n                onChange={(e) => {\n                  handleChange(e);\n                  setAccessStatementError('');\n                  setAccessStatementValid(false);\n                }}\n                onBlur={validateIriInput}\n                required\n                rows=\"3\"\n                className={`form-control ${accessStatementValid ? 'form-input-valid' : ''} ${accessStatementError ? 'form-input-error' : ''}`}\n              ></input>\n            {accessStatementError && <div className=\"iri-error-message\">{accessStatementError}</div>}\n\n         </div>\n    \n         {/* Source [0,∞] - Optional, multiple values */}\n         <div className=\"form-group\">\n           <label htmlFor=\"source\">\n             Source <span className=\"field-indicator optional-indicator\">optional (IRI), multiple values allowed</span>\n           </label>\n           <div className=\"tag-input-container\">\n             <div className=\"tag-input-row\">\n             <input\n                  type=\"text\"\n                  id=\"source\"\n                  name=\"sourceInput\"\n                  value={sourceInput}\n                  onChange={(e) => {\n                    setSourceInput(e.target.value);\n                    setSourceInputError('');\n                    setSourceInputValid(false);\n                  }}\n                  onBlur={validateIriInput}\n                  onKeyPress={(e) => handleKeyPress(e, 'source', sourceInput, setSourceInput, setSourceInputError)}\n                  className={`${sourceInputError ? 'tag-input-error' : ''} ${sourceInputValid ? 'tag-input-valid' : ''}`}\n            />\n            {sourceInputError && <div className=\"iri-error-message\">{sourceInputError}</div>}\n\n                              <button \n                 type=\"button\" \n                 className=\"tag-add-button\"\n                 onClick={() => handleAddTag('source', sourceInput, setSourceInput)}\n               >\n                 +\n               </button>\n             </div>\n             <div className=\"tag-list\">\n               {formData.source.map((src, index) => (\n                 <div key={`source-${index}`} className=\"tag-item\">\n                   <span className=\"tag-text\">{src}</span>\n                   <button \n                     type=\"button\"\n                     className=\"tag-remove\"\n                     onClick={() => handleRemoveTag('source', index)}\n                   >\n                     ×\n                   </button>\n                 </div>\n               ))}\n             </div>\n             <div className=\"field-hint\"> </div>\n           </div>\n         </div>\n    \n         {/* Name Space [0,∞] - Optional, multiple values */}\n         <div className=\"form-group\">\n           <label htmlFor=\"nameSpace\">\n             Name Space <span className=\"field-indicator optional-indicator\">optional, multiple values allowed</span>\n           </label>\n           <div className=\"tag-input-container\">\n             <div className=\"tag-input-row\">\n                <input\n                  type=\"text\"\n                  id=\"nameSpace\"\n                  name=\"nameSpace\"\n                  value={nameSpaceInput}\n                  onChange={(e) => setNameSpaceInput(e.target.value)}\n                  onBlur={validateRegularInput}\n                  onKeyPress={(e) => handleKeyPress(e, 'nameSpace', nameSpaceInput, setNameSpaceInput)}\n                  className={`tag-input ${nameSpaceInputValid ? 'form-input-valid' : ''}`}\n                />\n               <button \n                 type=\"button\" \n                 className=\"tag-add-button\"\n                 onClick={() => handleAddTag('nameSpace', nameSpaceInput, setNameSpaceInput)}\n               >\n                 +\n               </button>\n             </div>\n             <div className=\"tag-list\">\n               {formData.nameSpace.map((ns, index) => (\n                 <div key={`namespace-${index}`} className=\"tag-item\">\n                   <span className=\"tag-text\">{ns}</span>\n                   <button \n                     type=\"button\"\n                     className=\"tag-remove\"\n                     onClick={() => handleRemoveTag('nameSpace', index)}\n                   >\n                     ×\n                   </button>\n                 </div>\n               ))}\n             </div>\n             <div className=\"field-hint\"> </div>\n           </div>\n         </div>\n       </form>\n       </div>\n     \n     <div className=\"modal-footer\">\n       <button \n         className=\"cancel-button\"\n         onClick={onClose}\n       >\n         Cancel\n       </button>\n    \n       <button \n        className=\"save-draft-button\"\n      onClick={handleSaveDraft}\n      >\n        Save Draft\n      </button>\n    \n       <button \n         className=\"submit-button\"\n         onClick={handleSubmit}\n         disabled={isSubmitting}\n       >\n         {isSubmitting ? 'Submitting...' : 'Submit'}\n       </button>\n     </div>\n    </div>\n    </div>\n    );\n    }\n    \n\nexport default ModalForm;\n","// src/components/DataTable.js\nimport React from 'react';\n\nfunction DataTable({ submissions }) {\n  const downloadJSON = () => {\n    if (submissions.length === 0) {\n      alert('No data to export');\n      return;\n    }\n    \n    // Add browser type and ensure timestamp for all submissions\n    const enrichedData = submissions.map(submission => ({\n      ...submission,\n      browserType: navigator.userAgent,\n      timestamp: submission.timestamp || submission.date || new Date().toISOString(),\n      exportDate: new Date().toISOString()\n    }));\n    \n    // Convert to JSON string with proper formatting\n    const jsonData = JSON.stringify(enrichedData, null, 2);\n    \n    // Create download\n    const blob = new Blob([jsonData], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    \n    link.setAttribute('href', url);\n    link.setAttribute('download', `kg-metadata-${new Date().toISOString().slice(0,10)}.json`);\n    link.style.visibility = 'hidden';\n    \n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  const clearSubmissions = () => {\n    if (window.confirm('Are you sure you want to clear all metadata? This cannot be undone.')) {\n      localStorage.removeItem('kg-metadata-submissions');\n      window.location.reload(); // Reload to update the UI\n    }\n  };\n\n  return (\n    <div className=\"data-table-container\">\n      <div className=\"table-header\">\n        <h2>Metadata Submissions ({submissions.length})</h2>\n        <div className=\"table-actions\">\n          <button \n            onClick={downloadJSON}\n            disabled={submissions.length === 0}\n            className=\"download-button\"\n          >\n            Export JSON\n          </button>\n          <button \n            onClick={clearSubmissions}\n            disabled={submissions.length === 0}\n            className=\"clear-button\"\n          >\n            Clear All\n          </button>\n        </div>\n      </div>\n      \n      {submissions.length > 0 ? (\n        <div className=\"table-scroll\">\n          <table className=\"data-table\">\n            <thead>\n              <tr>\n                <th>Title</th>\n                <th>Description</th>\n                <th>Type</th>\n                <th>Date Submitted</th>\n              </tr>\n            </thead>\n            <tbody>\n              {submissions.map((item, index) => (\n                <tr key={index}>\n                  <td>{item.name}</td>\n                  <td>{item.description}</td>\n                  <td>{item.type}</td>\n                  <td>{new Date(item.date).toLocaleString()}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      ) : (\n        <p className=\"no-data\">No metadata submissions yet</p>\n      )}\n    </div>\n  );\n}\n\nexport default DataTable;","import React, { useState, useEffect, useImperativeHandle, forwardRef } from 'react';\n\n\nconst SavedDrafts = forwardRef(({ onLoadDraft }, ref) => {\n  const [drafts, setDrafts] = useState([]);\n  \n  const loadDrafts = () => {\n    try {\n      const draftsString = localStorage.getItem('kg-metadata-drafts');\n      if (draftsString) {\n        \n        const parsedDrafts = JSON.parse(draftsString);\n        \n        \n        parsedDrafts.sort((a, b) => {\n          const dateA = new Date(a.date);\n          const dateB = new Date(b.date);\n          return dateB - dateA; // Descending order (newest first)\n        });\n        \n        setDrafts(parsedDrafts);\n      } else {\n        setDrafts([]);\n      }\n    } catch (error) {\n      console.error('Error loading saved drafts:', error);\n      setDrafts([]);\n    }\n  };\n  \n  useEffect(() => {\n    loadDrafts();\n  }, []);\n  \n  useImperativeHandle(ref, () => ({\n    refreshDrafts: loadDrafts\n  }));\n  \n  const handleDeleteDraft = (id, e) => {\n    e.stopPropagation(); // Prevent triggering row click\n    \n    if (window.confirm('Are you sure you want to delete this draft?')) {\n      // Filter out the draft to delete\n      const updatedDrafts = drafts.filter(draft => draft.id !== id);\n      \n      // Save back to localStorage\n      localStorage.setItem('kg-metadata-drafts', JSON.stringify(updatedDrafts));\n      \n      // Update state\n      setDrafts(updatedDrafts);\n    }\n  };\n  \n  const handleLoadDraft = (draft) => {\n    // Call the onLoadDraft callback directly without confirmation\n    onLoadDraft(draft.formData);\n  };\n  \n  const clearAllDrafts = () => {\n    if (window.confirm('Are you sure you want to delete all drafts? This cannot be undone.')) {\n      localStorage.removeItem('kg-metadata-drafts');\n      setDrafts([]);\n    }\n  };\n\n  const formatDate = (dateString) => {\n    if (!dateString) return '';\n    try {\n      const date = new Date(dateString);\n      const dateFormatted = date.toISOString().split('T')[0];\n      \n      const hours = date.getHours().toString().padStart(2, '0');\n      const minutes = date.getMinutes().toString().padStart(2, '0');\n      \n      return `${dateFormatted} ${hours}:${minutes}`;\n    } catch (e) {\n      return dateString;\n    }\n  };\n\n  return (\n    <div className=\"data-table-container\">\n      <div className=\"table-header\">\n        <h2>Saved Drafts ({drafts.length})</h2>\n        <div className=\"table-actions\">\n          <button \n            onClick={clearAllDrafts}\n            disabled={drafts.length === 0}\n            className=\"clear-button\"\n          >\n            Clear All\n          </button>\n        </div>\n      </div>\n      \n      {drafts.length > 0 ? (\n        <div className=\"table-scroll\">\n          <table className=\"data-table\">\n            <thead>\n              <tr>\n                <th>Title</th>\n                <th>Date Last Saved</th>\n                <th>Actions</th>\n              </tr>\n            </thead>\n            <tbody>\n              {drafts.map((draft) => (\n                <tr \n                  key={draft.id} \n                  onClick={() => handleLoadDraft(draft)}\n                  style={{ cursor: 'pointer' }}\n                >\n                  <td>{draft.name}</td>\n                  <td>{formatDate(draft.date)}</td>\n                  <td>\n                    <div className=\"draft-actions\">\n                      <button \n                        className=\"load-button\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          handleLoadDraft(draft);\n                        }}\n                      >\n                        Load\n                      </button>\n                      <button \n                        className=\"delete-button\"\n                        onClick={(e) => handleDeleteDraft(draft.id, e)}\n                      >\n                        Delete\n                      </button>\n                    </div>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      ) : (\n        <p className=\"no-data\">No saved drafts</p>\n      )}\n    </div>\n  );\n});\n\nexport default SavedDrafts;","// src/App.js\nimport React, { useState, useEffect, useRef } from 'react';\nimport ModalForm from './components/ModalForm';\nimport DataTable from './components/DataTable';\nimport SavedDrafts from './components/SavedDrafts';\nimport './App.css';\n\nfunction App() {\n  const [submissions, setSubmissions] = useState([]);\n  const [showModal, setShowModal] = useState(false);\n  const [draftToLoad, setDraftToLoad] = useState(null);\n  \n  // Create a ref for the SavedDrafts component\n  const savedDraftsRef = useRef(null);\n  \n  // Load any saved submissions from localStorage on component mount\n  useEffect(() => {\n    const savedSubmissions = localStorage.getItem('kg-metadata-submissions');\n    if (savedSubmissions) {\n      try {\n        setSubmissions(JSON.parse(savedSubmissions));\n      } catch (error) {\n        console.error('Error loading saved submissions:', error);\n      }\n    }\n  }, []);\n  \n  // Save submissions to localStorage whenever they change\n  useEffect(() => {\n    if (submissions.length > 0) {\n      localStorage.setItem('kg-metadata-submissions', JSON.stringify(submissions));\n    }\n  }, [submissions]);\n  \n  // Handle loading a draft\n  const handleLoadDraft = (formData) => {\n    setDraftToLoad(formData);\n    setShowModal(true);\n  };\n  \n  // Handle drafts being saved\n  const handleDraftSaved = () => {\n    // Refresh the saved drafts display\n    if (savedDraftsRef.current) {\n      savedDraftsRef.current.refreshDrafts();\n    }\n  };\n  \n  // Handle opening the modal with a new form\n  const handleOpenModal = () => {\n    setDraftToLoad(null); // Reset any loaded draft\n    setShowModal(true);\n  };\n  \n  // Handle closing the modal\n  const handleCloseModal = () => {\n    setShowModal(false);\n    setDraftToLoad(null); // Reset the loaded draft when closing\n  };\n  \n  // Handle form submission\n  const handleSubmission = async (formData) => {\n    try {\n      // Create submission with complete data and metadata\n      const timestamp = new Date().toISOString();\n      \n      const submission = {\n        // Display data for the table\n        name: formData.title,\n        description: formData.description,\n        type: \"KG-Metadata\",\n        date: timestamp,\n        \n        // Complete form data\n        formData: {\n          ...formData,\n          timestamp: timestamp,\n          browserType: navigator.userAgent,\n          submissionId: `kg-meta-${Date.now()}`\n        }\n      };\n      \n      // Add to submissions\n      const newSubmissions = [...submissions, submission];\n      setSubmissions(newSubmissions);\n      \n      return { success: true, message: 'Metadata submitted successfully!' };\n    } catch (error) {\n      console.error('Error submitting form:', error);\n      return { \n        success: false, \n        message: 'Error submitting metadata. Please try again.' \n      };\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Knowledge Graph Metadata</h1>\n      </header>\n      <main>\n        <div className=\"form-container\">\n          <button \n            className=\"submit-button\" \n            onClick={handleOpenModal}\n            style={{ width: 'auto' }}\n          >\n            Submit Metadata Form\n          </button>\n        </div>\n        <DataTable submissions={submissions} />\n        \n        {/* Add SavedDrafts component below DataTable */}\n        <div className=\"saved-drafts-section\">\n          <SavedDrafts \n            ref={savedDraftsRef}\n            onLoadDraft={handleLoadDraft} \n          />\n        </div>\n        \n        {showModal && (\n          <ModalForm \n            onSubmit={handleSubmission} \n            onClose={handleCloseModal}\n            initialFormData={draftToLoad}\n            onDraftSaved={handleDraftSaved}\n          />\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}