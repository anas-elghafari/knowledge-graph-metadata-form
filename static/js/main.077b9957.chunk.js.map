{"version":3,"sources":["fieldInstructions.js","components/ModalForm.js","components/DataTable.js","components/SavedDrafts.js","App.js","reportWebVitals.js","index.js"],"names":["fieldInstructions","identifier","type","title","alternativeTitle","acronym","description","homepageURL","otherPages","roleCreator","rolePublisher","roleFunder","prov:qualifiedAttribution","createdDate","modifiedDate","publishedDate","vocabulariesUsed","metadataSchema","primaryReferenceDocument","metaGraph","statistics","distTitle","distReleaseDate","distModificationDate","restAPI","sparqlEndpoint","exampleQueries","version","license","keywords","category","publicationReferences","language","iriTemplate","linkedResources","exampleResource","accessStatement","source","nameSpace","ModalForm","_ref","onSubmit","onClose","initialFormData","onDraftSaved","formData","setFormData","useState","agent","givenName","mbox","distributions","isSubmitting","setIsSubmitting","message","setMessage","identifierInput","setIdentifierInput","alternativeTitleInput","setAlternativeTitleInput","acronymInput","setAcronymInput","homepageURLInput","setHomepageURLInput","otherPagesInput","setOtherPagesInput","modifiedDateInput","setModifiedDateInput","primaryReferenceDocInput","setPrimaryReferenceDocInput","statisticsInput","setStatisticsInput","keywordsInput","setKeywordsInput","categoryInput","setCategoryInput","publicationReferencesInput","setPublicationReferencesInput","languageInput","setLanguageInput","iriTemplateInput","setIriTemplateInput","linkedResourcesInput","setLinkedResourcesInput","exampleResourceInput","setExampleResourceInput","sourceInput","setSourceInput","nameSpaceInput","setNameSpaceInput","imageFileName","setImageFileName","roleCreatorToggle","setRoleCreatorToggle","rolePublisherToggle","setRolePublisherToggle","roleFunderToggle","setRoleFunderToggle","fileInputRef","useRef","createdDateError","setCreatedDateError","publishedDateError","setPublishedDateError","modifiedDateError","setModifiedDateError","distReleaseDateError","setDistReleaseDateError","distModificationDateError","setDistModificationDateError","currentDistribution","setCurrentDistribution","mediaType","downloadURL","accessURL","accessService","byteSize","compressionFormat","packagingFormat","hasPolicy","rights","spatialResolution","temporalResolution","releaseDate","modificationDate","vocabulariesUsedInput","setVocabulariesUsedInput","metadataSchemaInput","setMetadataSchemaInput","restAPIInput","setRestAPIInput","exampleQueriesInput","setExampleQueriesInput","emptySparqlEndpoint","dataService","endpointURL","endpointDescription","status","currentSparqlEndpoint","setCurrentSparqlEndpoint","sparqlEndpoints","setSparqlEndpoints","editingSparqlEndpointIdx","setEditingSparqlEndpointIdx","sparqlDataServiceValid","setSparqlDataServiceValid","sparqlEndpointURLValid","setSparqlEndpointURLValid","sparqlEndpointURLError","setSparqlEndpointURLError","sparqlIdentifierValid","setSparqlIdentifierValid","sparqlTitleValid","setSparqlTitleValid","sparqlEndpointDescriptionValid","setSparqlEndpointDescriptionValid","sparqlStatusValid","setSparqlStatusValid","handleCurrentSparqlEndpointChange","field","value","prev","[object Object]","resetSparqlEndpointForm","acronymInputValid","setAcronymInputValid","metaGraphInput","setMetaGraphInput","homepageURLInputError","setHomepageURLInputError","otherPagesInputError","setOtherPagesInputError","primaryReferenceDocInputError","setPrimaryReferenceDocInputError","metaGraphInputError","setMetaGraphInputError","statisticsInputError","setStatisticsInputError","categoryInputError","setCategoryInputError","publicationReferencesInputError","setPublicationReferencesInputError","sourceInputError","setSourceInputError","createdDateValid","setCreatedDateValid","publishedDateValid","setPublishedDateValid","modifiedDateValid","setModifiedDateValid","homepageURLInputValid","setHomepageURLInputValid","otherPagesInputValid","setOtherPagesInputValid","primaryReferenceDocInputValid","setPrimaryReferenceDocInputValid","statisticsInputValid","setStatisticsInputValid","categoryInputValid","setCategoryInputValid","publicationReferencesInputValid","setPublicationReferencesInputValid","sourceInputValid","setSourceInputValid","titleValid","setTitleValid","descriptionValid","setDescriptionValid","typeValid","setTypeValid","licenseValid","setLicenseValid","versionValid","setVersionValid","accessStatementValid","setAccessStatementValid","keywordsInputValid","setKeywordsInputValid","nameSpaceInputValid","setNameSpaceInputValid","restAPIInputValid","setRestAPIInputValid","exampleQueriesInputValid","setExampleQueriesInputValid","distReleaseDateValid","setDistReleaseDateValid","distModificationDateValid","setDistModificationDateValid","identifierInputValid","setIdentifierInputValid","alternativeTitleInputValid","setAlternativeTitleInputValid","distLicenseValid","setDistLicenseValid","distRightsValid","setDistRightsValid","distSpatialResolutionValid","setDistSpatialResolutionValid","distTemporalResolutionValid","setDistTemporalResolutionValid","distCompressionFormatValid","setDistCompressionFormatValid","distPackagingFormatValid","setDistPackagingFormatValid","distHasPolicyValid","setDistHasPolicyValid","useEffect","document","body","style","overflow","querySelectorAll","forEach","label","fieldId","getAttribute","setAttribute","timeoutId","setTimeout","clearTimeout","isValidIriString","iriString","console","log","trim","trimmed","test","match","length","validateIriInput","e","name","target","setErrorFunc","setVocabulariesUsedInputError","setMetadataSchemaInputError","setLicenseError","setAccessStatementError","roleCreatorAgent","setRoleCreatorAgentError","rolePublisherAgent","setRolePublisherAgentError","roleFunderAgent","setRoleFunderAgentError","distDownloadURL","setDistDownloadURLError","distAccessURL","setDistAccessURLError","sparqlEndpointURL","setValidFunc","setVocabulariesUsedInputValid","setMetadataSchemaInputValid","setRoleCreatorAgentValid","setRolePublisherAgentValid","setRoleFunderAgentValid","setDistDownloadURLValid","setDistAccessURLValid","iriError","vocabulariesUsedInputError","metadataSchemaInputError","licenseError","accessStatementError","roleCreatorAgentError","rolePublisherAgentError","roleFunderAgentError","distDownloadURLError","distAccessURLError","vocabulariesUsedInputValid","metadataSchemaInputValid","roleCreatorAgentValid","rolePublisherAgentValid","roleFunderAgentValid","distDownloadURLValid","distAccessURLValid","handleAddTag","fieldName","inputValue","setInputFunc","includes","prevFormData","handleChange","validateRegularInput","handleTypeChange","prevData","currentTypes","newTypes","filter","handleRoleChange","role","validateDateInput","errorMessage","setCustomValidity","parts","split","year","parseInt","month","day","daysInMonth","isLeapYear","date","Date","isNaN","getTime","getFullYear","getMonth","getDate","distLicense","distRights","distSpatialResolution","distTemporalResolution","distCompressionFormat","distPackagingFormat","distHasPolicy","sparqlDataService","sparqlIdentifier","sparqlTitle","sparqlEndpointDescription","sparqlStatus","handleRemoveTag","index","newTags","splice","addPendingTagInputs","updatedFormData","currDist","handleDistributionChange","handleRemoveDistribution","newDistributions","handleDatePickerChange","targetFieldName","formattedDate","replace","handleSubmit","async","preventDefault","updatedForm","missingFields","invalidDates","push","join","result","success","error","handleKeyPress","key","formatDate","dateString","toISOString","React","createElement","className","onClick","stopPropagation","aria-label","htmlFor","id","onChange","onBlur","onKeyPress","map","checked","placeholder","required","disabled","onKeyUp","item","doc","current","click","ref","file","files","accept","display","graph","stat","acr","url","page","newToggle","Fragment","dist","querySelector","scrollIntoView","behavior","rows","defaultValue","tabIndex","handleAddDistribution","validateDistribution","endpoint","idx","handleEditSparqlEndpoint","_","i","handleRemoveSparqlEndpoint","handleAddSparqlEndpoint","updated","handleCancelEditSparqlEndpoint","keyword","cat","lang","iri","resource","example","src","ns","handleSaveDraft","existingDraftId","draftId","now","draft","savedDrafts","draftsString","localStorage","getItem","JSON","parse","d","setItem","stringify","DataTable","submissions","downloadJSON","alert","enrichedData","submission","browserType","navigator","userAgent","timestamp","exportDate","jsonData","blob","Blob","URL","createObjectURL","link","slice","visibility","appendChild","removeChild","clearSubmissions","window","confirm","removeItem","location","reload","toLocaleString","SavedDrafts","forwardRef","onLoadDraft","drafts","setDrafts","loadDrafts","parsedDrafts","sort","a","b","dateA","useImperativeHandle","refreshDrafts","handleLoadDraft","clearAllDrafts","cursor","getHours","toString","padStart","getMinutes","handleDeleteDraft","updatedDrafts","App","setSubmissions","showModal","setShowModal","draftToLoad","setDraftToLoad","savedDraftsRef","savedSubmissions","handleOpenModal","width","submissionId","newSubmissions","handleCloseModal","handleDraftSaved","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.077b9957.chunk.js","sourcesContent":["const fieldInstructions = {\n    \"identifier\": \"The identifier for KG metadata.\",\n    \"type\": \"The type of object in the description.\",\n    \"title\": \"The name or formal title for the KG.\",\n    \"alternativeTitle\": \"Another name for the KG.\",\n    \"acronym\": \"An acronym used to identify the KG.\",\n    \"description\": \"Provide a human readable description of the KG. Minimally, the description should be in English, and ideally, there would be descriptions available in other languages.\",\n    \n    // URL fields\n    \"homepageURL\": \"Provides minimal information, link to access to data.\",\n    \"otherPages\": \"Provide additional relevant pages for the KG.\",\n    \n    // Roles\n    \"roleCreator\": \"The author of the KG.\",\n    \"rolePublisher\": \"The publisher of the KG (this ID typically has an ROR ID corresponding to the institution to which the authors belong).\",\n    \"roleFunder\": \"The organization(s) that funded the KG building and/or publication.\",\n    \"prov:qualifiedAttribution\": \"The contact point for inquiries about the KG, name and Email of the contact person.\",\n    \n    // Date fields\n    \"createdDate\": \"Provide the date when the KG is created.\",\n    \"modifiedDate\": \"The date when the KG is lastly modified.\",\n    \"publishedDate\": \"The date when the KG is published.\",\n    \n    // Vocabularies and schemas\n    \"vocabulariesUsed\": \"Specify the vocabularies used in the knowledge.\",\n    \"metadataSchema\": \"Specify the file against which to validate the KG metadata. Recommend that IRI is a Profile (https://www.w3.org/TR/dx-prof/).\",\n    \n    // Documentation\n    \"primaryReferenceDocument\": \"Provide a reference to a document, preprint or data paper describing the KG.\",\n    \"metaGraph\": \"Provide an illustration of the graph connectivity through its types and relations between instances.\",\n    \"statistics\": \"Provide a computational representation of the summary statistics of the knowledge graph. See HCLS: https://www.w3.org/TR/hcls-dataset/#s6.\",\n    \n    // Distribution related - not in the reference spreadsheet\n    \"distTitle\": \"Required title for this distribution\",\n    \"distReleaseDate\": \"Provide the release date for this specific distribution.\",\n    \"distModificationDate\": \"The date when this distribution was modified.\",\n    \n\n    \"restAPI\": \"Provide a REST API for the KG.\",\n    \"sparqlEndpoint\": \"Provide a SPARQL endpoint for the KG.\",\n    \"exampleQueries\": \"Provide an exemplar query against the KG.\",\n    \n  \n    \"version\": \"Specify the version of the dataset, if defined.\",\n    \"license\": \"Provide the license that the KG is released with. The Software Ontology defines a set of standard licenses to could be chosen from (see http://www.ebi.ac.uk/swo/license/SWO_0000002).\",\n    \"keywords\": \"Provide a set of keywords for the KG.\",\n    \"category\": \"A main category of the resource. A resource can have multiple themes.\",\n    \"publicationReferences\": \"Provide references for the KG.\",\n    \"language\": \"Languages represented in the knowledge graph.\",\n    \"iriTemplate\": \"Provide a 'J' IRI Templates, following RFC 6570, that individuals are typically identified by.\",\n    \"linkedResources\": \"Specify linkable resources to the knowledge graph.Link to a description of a relationship with another resource.\",\n    \"exampleResource\": \"Provide an example instance in the KG.\",\n    \"accessStatement\": \"Specify any restrictions on the access to the resource, and how to gain legitimate access.\",\n    \"source\": \"Specify the origin or source of data for the KG.\",\n    \"nameSpace\": \"Often, the entities described in a dataset share URIs of a common form. For example, all DBpedia entity URIs start with http://dbpedia.org/resource/. The void:uriSpace property can be used to state that all entity URIs in a dataset start with a given string. In other words, they share a common “URI namespace\"\n \n  };\n  \n  export default fieldInstructions;","import React, { useState, useEffect, useRef } from 'react';\nimport fieldInstructions from '../fieldInstructions';\n\nfunction ModalForm({ onSubmit, onClose, initialFormData = null, onDraftSaved = null }) {\n  // Initial form state\n  const initialFormState = {\n    identifier: [],\n    type: [],\n    title: '',\n    description: '',\n    \n    // Date fields\n    createdDate: '',\n    modifiedDate: [],\n    publishedDate: '',\n    \n    alternativeTitle: [],\n    acronym: [],\n    homepageURL: [],\n    otherPages: [],\n    \n    // Role fields\n    roleCreator: {\n      agent: '',\n      givenName: '',\n      mbox: ''\n    },\n    rolePublisher: {\n      agent: '',\n      givenName: '',\n      mbox: ''\n    },\n    roleFunder: {\n      agent: '',\n      givenName: '',\n      mbox: ''\n    },\n    \n    // Other fields\n    license: '',\n    version: '',\n\n    // Distributions array\n    distributions: [],\n    \n    primaryReferenceDocument: [],\n    metaGraph: [],\n    statistics: [],\n    vocabulariesUsed: [],\n    metadataSchema: [],\n    restAPI: [],\n    sparqlEndpoint: [],\n    exampleQueries: [],\n    keywords: [],\n    category: [],\n    publicationReferences: [],\n    language: [],\n    iriTemplate: [],\n    linkedResources: [],\n    exampleResource: [],\n    accessStatement: '',\n    source: [],\n    nameSpace: []\n  };\n\n  const [formData, setFormData] = useState(initialFormData || initialFormState);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [message, setMessage] = useState('');\n  const [identifierInput, setIdentifierInput] = useState('');\n  const [alternativeTitleInput, setAlternativeTitleInput] = useState('');\n  const [acronymInput, setAcronymInput] = useState('');\n  const [homepageURLInput, setHomepageURLInput] = useState('');\n  const [otherPagesInput, setOtherPagesInput] = useState('');\n  const [modifiedDateInput, setModifiedDateInput] = useState('');\n  const [primaryReferenceDocInput, setPrimaryReferenceDocInput] = useState('');\n  const [statisticsInput, setStatisticsInput] = useState('');\n  const [keywordsInput, setKeywordsInput] = useState('');\n  const [categoryInput, setCategoryInput] = useState('');\n  const [publicationReferencesInput, setPublicationReferencesInput] = useState('');\n  const [languageInput, setLanguageInput] = useState('');\n  const [iriTemplateInput, setIriTemplateInput] = useState('');\n  const [linkedResourcesInput, setLinkedResourcesInput] = useState('');\n  const [exampleResourceInput, setExampleResourceInput] = useState('');\n  const [sourceInput, setSourceInput] = useState('');\n  const [nameSpaceInput, setNameSpaceInput] = useState('');\n  const [imageFileName, setImageFileName] = useState('');\n  const [roleCreatorToggle, setRoleCreatorToggle] = useState('agentIRI'); // 'agentIRI' or 'nameEmail'\n  const [rolePublisherToggle, setRolePublisherToggle] = useState('agentIRI');\n  const [roleFunderToggle, setRoleFunderToggle] = useState('agentIRI');\n\n  const fileInputRef = useRef(null);\n\n  const [createdDateError, setCreatedDateError] = useState('');\n  const [publishedDateError, setPublishedDateError] = useState('');\n  const [modifiedDateError, setModifiedDateError] = useState('');\n  const [distReleaseDateError, setDistReleaseDateError] = useState('');\n  const [distModificationDateError, setDistModificationDateError] = useState('');\n\n  // New state for distribution editing\n  const [currentDistribution, setCurrentDistribution] = useState({\n    title: '',\n    description: '',\n    mediaType: '',\n    downloadURL: '',\n    accessURL: '',\n    accessService: '',\n    byteSize: '',\n    compressionFormat: '',\n    packagingFormat: '',\n    hasPolicy: '',\n    license: '',\n    rights:'',\n    spatialResolution: '',\n    temporalResolution: '',\n    releaseDate: '',\n    modificationDate: ''\n  });\n\n  const [vocabulariesUsedInput, setVocabulariesUsedInput] = useState('');\n  const [metadataSchemaInput, setMetadataSchemaInput] = useState('');\n  const [restAPIInput, setRestAPIInput] = useState('');\n  const [exampleQueriesInput, setExampleQueriesInput] = useState('');\n\n// SPARQL Endpoints Section State\nconst emptySparqlEndpoint = {\n  dataService: '',\n  endpointURL: '',\n  identifier: '',\n  title: '',\n  endpointDescription: '',\n  status: ''\n};\nconst [currentSparqlEndpoint, setCurrentSparqlEndpoint] = useState(emptySparqlEndpoint);\nconst [sparqlEndpoints, setSparqlEndpoints] = useState([]);\nconst [editingSparqlEndpointIdx, setEditingSparqlEndpointIdx] = useState(null);\nconst [sparqlDataServiceValid, setSparqlDataServiceValid] = useState(false);\nconst [sparqlEndpointURLValid, setSparqlEndpointURLValid] = useState(false);\nconst [sparqlEndpointURLError, setSparqlEndpointURLError] = useState('');\nconst [sparqlIdentifierValid, setSparqlIdentifierValid] = useState(false);\nconst [sparqlTitleValid, setSparqlTitleValid] = useState(false);\nconst [sparqlEndpointDescriptionValid, setSparqlEndpointDescriptionValid] = useState(false);\nconst [sparqlStatusValid, setSparqlStatusValid] = useState(false);\n\nconst handleCurrentSparqlEndpointChange = (field, value) => {\n  setCurrentSparqlEndpoint(prev => ({ ...prev, [field]: value }));\n};\n\nconst resetSparqlEndpointForm = () => {\n  setCurrentSparqlEndpoint(emptySparqlEndpoint);\n  setEditingSparqlEndpointIdx(null);\n  setSparqlDataServiceValid(false);\n  setSparqlEndpointURLValid(false);\n  setSparqlEndpointURLError('');\n  setSparqlIdentifierValid(false);\n  setSparqlTitleValid(false);\n  setSparqlEndpointDescriptionValid(false);\n  setSparqlStatusValid(false);\n};\n\nconst handleAddSparqlEndpoint = () => {\n  if (editingSparqlEndpointIdx !== null) {\n    // Save edits\n    const updated = [...sparqlEndpoints];\n    updated[editingSparqlEndpointIdx] = currentSparqlEndpoint;\n    setSparqlEndpoints(updated);\n  } else {\n    setSparqlEndpoints(prev => [...prev, currentSparqlEndpoint]);\n  }\n  resetSparqlEndpointForm();\n};\n\nconst handleEditSparqlEndpoint = (idx) => {\n  setCurrentSparqlEndpoint(sparqlEndpoints[idx]);\n  setEditingSparqlEndpointIdx(idx);\n  // Optionally set valid states for fields if desired\n};\n\nconst handleRemoveSparqlEndpoint = (idx) => {\n  setSparqlEndpoints(prev => prev.filter((_, i) => i !== idx));\n  if (editingSparqlEndpointIdx === idx) {\n    resetSparqlEndpointForm();\n  }\n};\n\nconst handleCancelEditSparqlEndpoint = () => {\n  resetSparqlEndpointForm();\n};\n\n  const [acronymInputValid, setAcronymInputValid] = useState(false);\n  const [metaGraphInput, setMetaGraphInput] = useState('');\n\n  const [homepageURLInputError, setHomepageURLInputError] = useState('');\n  const [otherPagesInputError, setOtherPagesInputError] = useState('');\n  const [primaryReferenceDocInputError, setPrimaryReferenceDocInputError] = useState('');\n  const [metaGraphInputError, setMetaGraphInputError] = useState('');\n  const [statisticsInputError, setStatisticsInputError] = useState('');\n  const [categoryInputError, setCategoryInputError] = useState('');\n  const [publicationReferencesInputError, setPublicationReferencesInputError] = useState('');\n  const [sourceInputError, setSourceInputError] = useState('');\n\n  // Valid states for date fields\n  const [createdDateValid, setCreatedDateValid] = useState(false);\n  const [publishedDateValid, setPublishedDateValid] = useState(false);\n  const [modifiedDateValid, setModifiedDateValid] = useState(false);\n\n  // Valid states for IRI fields (removed metaGraph)\n  const [homepageURLInputValid, setHomepageURLInputValid] = useState(false);\n  const [otherPagesInputValid, setOtherPagesInputValid] = useState(false);\n  const [primaryReferenceDocInputValid, setPrimaryReferenceDocInputValid] = useState(false);\n  const [statisticsInputValid, setStatisticsInputValid] = useState(false);\n  const [categoryInputValid, setCategoryInputValid] = useState(false);\n  const [publicationReferencesInputValid, setPublicationReferencesInputValid] = useState(false);\n  const [sourceInputValid, setSourceInputValid] = useState(false);\n\n  // Valid states for other fields\n  const [titleValid, setTitleValid] = useState(false);\n  const [descriptionValid, setDescriptionValid] = useState(false);\n  const [typeValid, setTypeValid] = useState(false);\n  const [licenseValid, setLicenseValid] = useState(false);\n  const [versionValid, setVersionValid] = useState(false);\n  const [accessStatementValid, setAccessStatementValid] = useState(false);\n  const [keywordsInputValid, setKeywordsInputValid] = useState(false);\n  const [nameSpaceInputValid, setNameSpaceInputValid] = useState(false);\n  const [restAPIInputValid, setRestAPIInputValid] = useState(false);\n  const [exampleQueriesInputValid, setExampleQueriesInputValid] = useState(false);\n\n  const [distReleaseDateValid, setDistReleaseDateValid] = useState(false);\n  const [distModificationDateValid, setDistModificationDateValid] = useState(false);\n  const [identifierInputValid, setIdentifierInputValid] = useState(false);\n  const [alternativeTitleInputValid, setAlternativeTitleInputValid] = useState(false);\n  const [distLicenseValid, setDistLicenseValid] = useState(false);\n  const [distRightsValid, setDistRightsValid] = useState(false);\n  const [distSpatialResolutionValid, setDistSpatialResolutionValid] = useState(false);\n  const [distTemporalResolutionValid, setDistTemporalResolutionValid] = useState(false);\n  const [distCompressionFormatValid, setDistCompressionFormatValid] = useState(false);\n  const [distPackagingFormatValid, setDistPackagingFormatValid] = useState(false);\n  const [distHasPolicyValid, setDistHasPolicyValid] = useState(false);\n\n  useEffect(() => {\n      if (initialFormData) {\n        setFormData(initialFormData);\n      }\n    }, [initialFormData]);\n\n    \n  useEffect(() => {\n    document.body.style.overflow = 'hidden';\n    \n    // Re-enable scrolling when component unmounts\n    return () => {\n      document.body.style.overflow = 'auto';\n    };\n  }, []);\n  \n  useEffect(() => {\n    const labels = document.querySelectorAll('.form-group label');\n    \n    // Loop through each label\n    labels.forEach(label => {\n      // Get the 'for' attribute which connects to the input ID\n      const fieldId = label.getAttribute('for');\n      \n      // If we have instructions for this field, add the tooltip\n      if (fieldId && fieldInstructions[fieldId]) {\n        label.setAttribute('data-tooltip', fieldInstructions[fieldId]);\n        label.setAttribute('tabindex', '0'); // Make focusable for accessibility\n      }\n    });\n  }, []);\n\n\n  useEffect(() => {\n    let timeoutId;\n    if (message) {\n      timeoutId = setTimeout(() => {\n        setMessage(null);\n      }, 20000);\n    }\n    return () => timeoutId && clearTimeout(timeoutId);\n  }, [message]);\n\n\n\n\n    const isValidIriString = (iriString) => {\n      console.log('Validating IRI:', iriString);\n      \n      // Allow empty values for optional fields\n      if (!iriString || !iriString.trim()) {\n        console.log('IRI is empty - allowed for optional fields');\n        return null;\n      }\n      \n      const trimmed = iriString.trim();\n      \n      // Check for obviously invalid characters at the start\n      if (/^[@#{}|\\\\^`<>\"']/.test(trimmed)) {\n        return 'IRI cannot start with invalid characters.';\n      }\n      \n      // Basic scheme check - IRI must have a scheme\n      if (!/^[a-zA-Z][a-zA-Z0-9+.-]*:/.test(trimmed)) {\n        return 'IRI must have a valid scheme (e.g., http:, https:, ftp:).';\n      }\n      \n      // Check for invalid characters that should not appear in IRIs\n      if (/[\\s<>\"{}|\\\\^`]/.test(trimmed)) {\n        return 'IRI contains invalid characters.';\n      }\n      \n      // Check for unmatched brackets\n      const openBrackets = (trimmed.match(/\\[/g) || []).length;\n      const closeBrackets = (trimmed.match(/\\]/g) || []).length;\n      if (openBrackets !== closeBrackets) {\n        return 'IRI has unmatched brackets.';\n      }\n      \n      // Check for @ symbol in inappropriate places (not in userinfo or email schemes)\n      if (/@/.test(trimmed) && !/^(mailto:|http:\\/\\/[^@]*@|https:\\/\\/[^@]*@)/.test(trimmed)) {\n        return 'IRI contains @ symbol in invalid position.';\n      }\n      \n      console.log('IRI is valid');\n      return null;\n    };\n\n\n    const validateIriInput = (e) => {\n      const { name, value } = e.target;\n      \n      // Map field names to their error setter functions - EXPANDED LIST\n      const errorSetters = {\n        'homepageURLInput': setHomepageURLInputError,\n        'otherPagesInput': setOtherPagesInputError,\n        'vocabulariesUsedInput': setVocabulariesUsedInputError,\n        'metadataSchemaInput': setMetadataSchemaInputError,\n        'primaryReferenceDocInput': setPrimaryReferenceDocInputError,\n        'license': setLicenseError,\n        'categoryInput': setCategoryInputError,\n        'publicationReferencesInput': setPublicationReferencesInputError,\n        'accessStatement': setAccessStatementError,\n        'sourceInput': setSourceInputError,\n        'roleCreatorAgent': setRoleCreatorAgentError,\n        'rolePublisherAgent': setRolePublisherAgentError,\n        'roleFunderAgent': setRoleFunderAgentError,\n        'distDownloadURL': setDistDownloadURLError,\n        'distAccessURL': setDistAccessURLError,\n        'sparqlEndpointURL': setSparqlEndpointURLError\n      };\n      \n      // Map field names to their valid setter functions - EXPANDED LIST\n      const validSetters = {\n        'homepageURLInput': setHomepageURLInputValid,\n        'otherPagesInput': setOtherPagesInputValid,\n        'vocabulariesUsedInput': setVocabulariesUsedInputValid,\n        'metadataSchemaInput': setMetadataSchemaInputValid,\n        'primaryReferenceDocInput': setPrimaryReferenceDocInputValid,\n        'license': setLicenseValid,\n        \n        'categoryInput': setCategoryInputValid,\n        'publicationReferencesInput': setPublicationReferencesInputValid,\n        'accessStatement': setAccessStatementValid,\n        'sourceInput': setSourceInputValid,\n        'roleCreatorAgent': setRoleCreatorAgentValid,\n        'rolePublisherAgent': setRolePublisherAgentValid,\n        'roleFunderAgent': setRoleFunderAgentValid,\n        'distDownloadURL': setDistDownloadURLValid,\n        'distAccessURL': setDistAccessURLValid,\n        'sparqlEndpointURL': setSparqlEndpointURLValid\n      };\n      \n      const setErrorFunc = errorSetters[name];\n      const setValidFunc = validSetters[name];\n      \n      if (!setErrorFunc || !setValidFunc) return; // Field doesn't need IRI validation\n      // DEBUG: Log which field is being validated\n      // console.log('Validating IRI for field:', name, value);\n      \n      // Skip validation for empty optional fields\n      if (!value || !value.trim()) {\n        setErrorFunc('');\n        setValidFunc(false);\n        return;\n      }\n      \n      const iriError = isValidIriString(value);\n      if (iriError) {\n        setErrorFunc(iriError);\n        setValidFunc(false);\n      } else {\n        setErrorFunc('');\n        setValidFunc(true);\n      }\n    };\n    \n    // 2. Add new state declarations for error and valid states (add these to your existing state declarations):\n    \n    // Error states for new IRI fields\n    const [vocabulariesUsedInputError, setVocabulariesUsedInputError] = useState('');\n    const [metadataSchemaInputError, setMetadataSchemaInputError] = useState('');\n    const [licenseError, setLicenseError] = useState('');\n    const [accessStatementError, setAccessStatementError] = useState('');\n    const [roleCreatorAgentError, setRoleCreatorAgentError] = useState('');\n    const [rolePublisherAgentError, setRolePublisherAgentError] = useState('');\n    const [roleFunderAgentError, setRoleFunderAgentError] = useState('');\n    const [distDownloadURLError, setDistDownloadURLError] = useState('');\n    const [distAccessURLError, setDistAccessURLError] = useState('');\n    \n    // Valid states for new IRI fields\n    const [vocabulariesUsedInputValid, setVocabulariesUsedInputValid] = useState(false);\n    const [metadataSchemaInputValid, setMetadataSchemaInputValid] = useState(false);\n    const [roleCreatorAgentValid, setRoleCreatorAgentValid] = useState(false);\n    const [rolePublisherAgentValid, setRolePublisherAgentValid] = useState(false);\n    const [roleFunderAgentValid, setRoleFunderAgentValid] = useState(false);\n    const [distDownloadURLValid, setDistDownloadURLValid] = useState(false);\n    const [distAccessURLValid, setDistAccessURLValid] = useState(false);\n    \n    // 3. Update handleAddTag to include IRI validation for new fields:\n    \n    const handleAddTag = (fieldName, inputValue, setInputFunc, setErrorFunc) => {\n      if (setErrorFunc) setErrorFunc(''); // Clear previous error\n      if (fieldName === 'identifier') setIdentifierInputValid(false);\n      if (fieldName === 'alternativeTitle') setAlternativeTitleInputValid(false);\n    \n      // Fields that require IRI validation - EXPANDED LIST\n      const iriFields = [\n        'homepageURL', 'otherPages', 'vocabulariesUsed', 'metadataSchema',\n        'primaryReferenceDocument', 'category', \n        'publicationReferences', 'source'\n      ];\n    \n      if (iriFields.includes(fieldName)) {\n        const iriError = isValidIriString(inputValue);\n        if (iriError) {\n          if (setErrorFunc) setErrorFunc(iriError);\n          return;\n        }\n      }\n    \n      if (inputValue.trim()) {\n        setFormData(prevFormData => ({\n          ...prevFormData,\n          [fieldName]: [...(prevFormData[fieldName] || []), inputValue.trim()]\n        }));\n        setInputFunc('');\n      }\n    };\n    \n\n    const handleChange = (e) => {\n      const { name, value } = e.target;\n      \n      // Clear valid states when user starts typing in date fields\n      if (name === 'createdDate') setCreatedDateValid(false);\n      if (name === 'publishedDate') setPublishedDateValid(false);\n      \n      // Clear valid states for regular fields when typing\n      if (name === 'title') setTitleValid(false);\n      if (name === 'description') setDescriptionValid(false);\n      if (name === 'license') setLicenseValid(false);\n      if (name === 'version') setVersionValid(false);\n      if (name === 'accessStatement') setAccessStatementValid(false);\n      if (name === 'keywords') setKeywordsInputValid(false);\n      if (name === 'nameSpace') setNameSpaceInputValid(false);\n      if (name === 'restAPI') setRestAPIInputValid(false);\n      \n      if (name === 'exampleQueries') setExampleQueriesInputValid(false);\n      \n      setFormData({\n        ...formData,\n        [name]: value\n      });\n\n      // Validate non-IRI and non-date fields\n      validateRegularInput(e);\n    };\n  \n    const handleTypeChange = (value) => {\n      setFormData(prevData => {\n        const currentTypes = prevData.type || [];\n        let newTypes;\n        \n        if (currentTypes.includes(value)) {\n          // Remove the value if it's already selected\n          newTypes = currentTypes.filter(type => type !== value);\n        } else {\n          // Add the value if it's not selected\n          newTypes = [...currentTypes, value];\n        }\n        \n        // Update validation state\n        setTypeValid(newTypes.length > 0);\n        \n        return {\n          ...prevData,\n          type: newTypes\n        };\n      });\n    };\n\n\n  // Handle role field changes\n  const handleRoleChange = (role, field, value) => {\n    setFormData({\n      ...formData,\n      [role]: {\n        ...formData[role],\n        [field]: value\n      }\n    });\n  };\n  \n  // Handle adding a date tag\n  const handleAddDate = (e) => {\n    if (modifiedDateInput) {\n      setFormData({\n        ...formData,\n        modifiedDate: [...formData.modifiedDate, modifiedDateInput]\n      });\n      setModifiedDateInput('');\n    }\n  };\n\n  const validateDateInput = (e) => {\n    const { name, value } = e.target;\n    let errorMessage = '';\n    \n    const validSetters = {\n      'createdDate': setCreatedDateValid,\n      'publishedDate': setPublishedDateValid,\n      'modifiedDate': setModifiedDateValid,\n      'distReleaseDate': setDistReleaseDateValid,\n      'distModificationDate': setDistModificationDateValid\n    };\n    \n    const setValidFunc = validSetters[name];\n    \n    if (!value && name !== 'publishedDate') {\n      e.target.setCustomValidity('');\n      \n      if (name === 'createdDate') setCreatedDateError('');\n      else if (name === 'modifiedDate') setModifiedDateError('');\n      else if (name === 'distReleaseDate') setDistReleaseDateError('');\n      else if (name === 'distModificationDate') setDistModificationDateError('');\n      \n      if (setValidFunc) setValidFunc(false);\n      return;\n    }\n    \n    const datePattern = /^\\d{4}\\/\\d{2}\\/\\d{2}$/;\n    if (!datePattern.test(value)) {\n      errorMessage = 'Please use YYYY/MM/DD format';\n      e.target.setCustomValidity(errorMessage);\n      \n      if (name === 'createdDate') setCreatedDateError(errorMessage);\n      else if (name === 'publishedDate') setPublishedDateError(errorMessage);\n      else if (name === 'modifiedDate') setModifiedDateError(errorMessage);\n      else if (name === 'distReleaseDate') setDistReleaseDateError(errorMessage);\n      else if (name === 'distModificationDate') setDistModificationDateError(errorMessage);\n      \n      if (setValidFunc) setValidFunc(false);\n      return;\n    }\n    \n    const parts = value.split('/');\n    const year = parseInt(parts[0], 10);\n    const month = parseInt(parts[1], 10);\n    const day = parseInt(parts[2], 10);\n    \n    if (year < 1900 || year > 2100) {\n      errorMessage = 'Year should be between 1900 and 2100';\n      e.target.setCustomValidity(errorMessage);\n      \n      if (name === 'createdDate') setCreatedDateError(errorMessage);\n      else if (name === 'publishedDate') setPublishedDateError(errorMessage);\n      else if (name === 'modifiedDate') setModifiedDateError(errorMessage);\n      else if (name === 'distReleaseDate') setDistReleaseDateError(errorMessage);\n      else if (name === 'distModificationDate') setDistModificationDateError(errorMessage);\n      \n      if (setValidFunc) setValidFunc(false);\n      return;\n    }\n    \n    if (month < 1 || month > 12) {\n      errorMessage = 'Month should be between 1 and 12';\n      e.target.setCustomValidity(errorMessage);\n      \n      if (name === 'createdDate') setCreatedDateError(errorMessage);\n      else if (name === 'publishedDate') setPublishedDateError(errorMessage);\n      else if (name === 'modifiedDate') setModifiedDateError(errorMessage);\n      else if (name === 'distReleaseDate') setDistReleaseDateError(errorMessage);\n      else if (name === 'distModificationDate') setDistModificationDateError(errorMessage);\n      \n      if (setValidFunc) setValidFunc(false);\n      return;\n    }\n    \n    const daysInMonth = [\n      31, isLeapYear(year) ? 29 : 28, 31, 30, 31, 30,\n      31, 31, 30, 31, 30, 31\n    ];\n    \n    if (day < 1 || day > daysInMonth[month - 1]) {\n      errorMessage = `Day should be between 1 and ${daysInMonth[month - 1]} for this month`;\n      e.target.setCustomValidity(errorMessage);\n      \n      if (name === 'createdDate') setCreatedDateError(errorMessage);\n      else if (name === 'publishedDate') setPublishedDateError(errorMessage);\n      else if (name === 'modifiedDate') setModifiedDateError(errorMessage);\n      else if (name === 'distReleaseDate') setDistReleaseDateError(errorMessage);\n      else if (name === 'distModificationDate') setDistModificationDateError(errorMessage);\n      \n      if (setValidFunc) setValidFunc(false);\n      return;\n    }\n    \n    const date = new Date(year, month - 1, day);\n    if (\n      isNaN(date.getTime()) || \n      date.getFullYear() !== year || \n      date.getMonth() !== month - 1 || \n      date.getDate() !== day\n    ) {\n      errorMessage = 'Invalid date';\n      e.target.setCustomValidity(errorMessage);\n      \n      if (name === 'createdDate') setCreatedDateError(errorMessage);\n      else if (name === 'publishedDate') setPublishedDateError(errorMessage);\n      else if (name === 'modifiedDate') setModifiedDateError(errorMessage);\n      else if (name === 'distReleaseDate') setDistReleaseDateError(errorMessage);\n      else if (name === 'distModificationDate') setDistModificationDateError(errorMessage);\n      \n      if (setValidFunc) setValidFunc(false);\n      return;\n    }\n    \n    e.target.setCustomValidity('');\n    \n    if (name === 'createdDate') setCreatedDateError('');\n    else if (name === 'publishedDate') setPublishedDateError('');\n    else if (name === 'modifiedDate') setModifiedDateError('');\n    else if (name === 'distReleaseDate') setDistReleaseDateError('');\n    else if (name === 'distModificationDate') setDistModificationDateError('');\n    \n    if (setValidFunc) setValidFunc(true);\n\n    if (setValidFunc) {\n      setValidFunc(true);\n      console.log(`Setting ${name} to valid`); // Add this line\n    }\n\n    };\n  \n\n  const isLeapYear = (year) => {\n    return (year % 4 === 0 && year % 100 !== 0) || (year % 400 === 0);\n  };\n  \n  \n  const convertToISODate = (dateString) => {\n    if (!dateString) return '';\n    \n    if (/^\\d{4}\\/\\d{2}\\/\\d{2}$/.test(dateString)) {\n      return dateString.replace(/\\//g, '-');\n    }\n    \n    return dateString;\n  };\n\n\n  const validateRegularInput = (e) => {\n    const { name, value } = e.target;\n    \n    // Map field names to their valid setter functions\n    const validSetters = {\n      'title': setTitleValid,\n      'description': setDescriptionValid,\n      'type': setTypeValid,\n      \n      'version': setVersionValid,\n      'accessStatement': setAccessStatementValid,\n      'keywords': setKeywordsInputValid,\n      'nameSpace': setNameSpaceInputValid,\n      'vocabulariesUsed': setVocabulariesUsedInputValid,\n      'metadataSchema': setMetadataSchemaInputValid,\n      'restAPI': setRestAPIInputValid,\n      \n      'exampleQueries': setExampleQueriesInputValid,\n      'distLicense': setDistLicenseValid,\n      'distRights': setDistRightsValid,\n      'distSpatialResolution': setDistSpatialResolutionValid,\n      'distTemporalResolution': setDistTemporalResolutionValid,\n      'distCompressionFormat': setDistCompressionFormatValid,\n      'distPackagingFormat': setDistPackagingFormatValid,\n      'distHasPolicy': setDistHasPolicyValid,\n    'sparqlDataService': setSparqlDataServiceValid,\n    'sparqlIdentifier': setSparqlIdentifierValid,\n    'sparqlTitle': setSparqlTitleValid,\n    'sparqlEndpointDescription': setSparqlEndpointDescriptionValid,\n    'sparqlStatus': setSparqlStatusValid\n    };\n    \n    const setValidFunc = validSetters[name];\n    if (!setValidFunc) return;\n    \n    // Set valid if field has content\n    setValidFunc(value && value.trim().length > 0);\n};\n  \n  const handleRemoveTag = (fieldName, index) => {\n    const newTags = [...formData[fieldName]];\n    newTags.splice(index, 1);\n    setFormData({\n      ...formData,\n      [fieldName]: newTags\n    });\n  };\n  \n  const handleFileUpload = (e) => {\n    const file = e.target.files[0];\n    if (file) {\n      setImageFileName(file.name);\n      setFormData({\n        ...formData,\n        metaGraph: [...formData.metaGraph, file.name]\n      });\n    }\n  };\n  \n  const addPendingTagInputs = () => {\n    // Create a copy of the current form data that we'll update\n    let updatedFormData = {...formData};\n    \n    // Handle all tag input fields\n    if (identifierInput.trim()) {\n      updatedFormData = {\n        ...updatedFormData,\n        identifier: [...updatedFormData.identifier, identifierInput.trim()]\n      };\n    }\n    \n    \n    if (alternativeTitleInput.trim()) {\n      updatedFormData = {\n        ...updatedFormData,\n        alternativeTitle: [...updatedFormData.alternativeTitle, alternativeTitleInput.trim()]\n      };\n    }\n    \n    if (acronymInput.trim()) {\n      updatedFormData = {\n        ...updatedFormData,\n        acronym: [...updatedFormData.acronym, acronymInput.trim()]\n      };\n    }\n    \n    if (homepageURLInput.trim()) {\n      const iriError = isValidIriString(homepageURLInput);\n      if (!iriError) {\n        updatedFormData = {\n          ...updatedFormData,\n          homepageURL: [...updatedFormData.homepageURL, homepageURLInput.trim()]\n        };\n      } else {\n        setHomepageURLInputError(iriError);\n      }\n    }\n    \n    if (otherPagesInput.trim()) {\n      const iriError = isValidIriString(otherPagesInput);\n      if (!iriError) {\n        updatedFormData = {\n          ...updatedFormData,\n          otherPages: [...updatedFormData.otherPages, otherPagesInput.trim()]\n        };\n      } else {\n        setOtherPagesInputError(iriError);\n      }\n    }\n    \n    if (modifiedDateInput) {\n      updatedFormData = {\n        ...updatedFormData,\n        modifiedDate: [...updatedFormData.modifiedDate, modifiedDateInput]\n      };\n    }\n    \n    if (primaryReferenceDocInput.trim()) {\n      updatedFormData = {\n        ...updatedFormData,\n        primaryReferenceDocument: [...updatedFormData.primaryReferenceDocument, primaryReferenceDocInput.trim()]\n      };\n    }\n    \n    if (statisticsInput.trim()) {\n      updatedFormData = {\n        ...updatedFormData,\n        statistics: [...updatedFormData.statistics, statisticsInput.trim()]\n      };\n    }\n    \n    if (keywordsInput.trim()) {\n      updatedFormData = {\n        ...updatedFormData,\n        keywords: [...updatedFormData.keywords, keywordsInput.trim()]\n      };\n    }\n    \n    if (categoryInput.trim()) {\n      updatedFormData = {\n        ...updatedFormData,\n        category: [...updatedFormData.category, categoryInput.trim()]\n      };\n    }\n    \n    if (publicationReferencesInput.trim()) {\n      updatedFormData = {\n        ...updatedFormData,\n        publicationReferences: [...updatedFormData.publicationReferences, publicationReferencesInput.trim()]\n      };\n    }\n    \n    if (languageInput.trim()) {\n      updatedFormData = {\n        ...updatedFormData,\n        language: [...updatedFormData.language, languageInput.trim()]\n      };\n    }\n    \n    if (iriTemplateInput.trim()) {\n      updatedFormData = {\n        ...updatedFormData,\n        iriTemplate: [...updatedFormData.iriTemplate, iriTemplateInput.trim()]\n      };\n    }\n    \n    if (linkedResourcesInput.trim()) {\n      updatedFormData = {\n        ...updatedFormData,\n        linkedResources: [...updatedFormData.linkedResources, linkedResourcesInput.trim()]\n      };\n    }\n    \n    if (exampleResourceInput.trim()) {\n      updatedFormData = {\n        ...updatedFormData,\n        exampleResource: [...updatedFormData.exampleResource, exampleResourceInput.trim()]\n      };\n    }\n    \n    if (sourceInput.trim()) {\n      updatedFormData = {\n        ...updatedFormData,\n        source: [...updatedFormData.source, sourceInput.trim()]\n      };\n    }\n    \n    if (nameSpaceInput.trim()) {\n      updatedFormData = {\n        ...updatedFormData,\n        nameSpace: [...updatedFormData.nameSpace, nameSpaceInput.trim()]\n      };\n    }\n  \n    if (vocabulariesUsedInput.trim()) {\n      updatedFormData = {\n        ...updatedFormData,\n        vocabulariesUsed: [...updatedFormData.vocabulariesUsed, vocabulariesUsedInput.trim()]\n      };\n    }\n    \n    if (metadataSchemaInput.trim()) {\n      updatedFormData = {\n        ...updatedFormData,\n        metadataSchema: [...updatedFormData.metadataSchema, metadataSchemaInput.trim()]\n      };\n    }\n    \n    \n    if (restAPIInput.trim()) {\n      updatedFormData = {\n        ...updatedFormData,\n        restAPI: [...updatedFormData.restAPI, restAPIInput.trim()]\n      };\n    }\n    \n    if (exampleQueriesInput.trim()) {\n      updatedFormData = {\n        ...updatedFormData,\n        exampleQueries: [...updatedFormData.exampleQueries, exampleQueriesInput.trim()]\n      };\n    }\n    \n    // Check if current distribution is partially filled and valid\n    const currDist = currentDistribution;\n    if (currDist.title || currDist.description || currDist.mediaType || \n        currDist.downloadURL || currDist.accessURL) {\n      // Only add the distribution if it has the required fields\n      if (currDist.title && currDist.description && currDist.mediaType && \n          currDist.downloadURL && currDist.accessURL) {\n        updatedFormData = {\n          ...updatedFormData,\n          distributions: [...updatedFormData.distributions, {...currDist}]\n        };\n      }\n    }\n    \n    // Update the state with all changes\n    setFormData(updatedFormData);\n    \n    // Return the updated form data for immediate use\n    return updatedFormData;\n  };\n\n  const handleDistributionChange = (field, value) => {\n    setCurrentDistribution({\n      ...currentDistribution,\n      [field]: value\n    });\n  };\n\n  // Validate a distribution before adding it\n  const validateDistribution = (dist) => {\n    return dist.title && dist.description && dist.mediaType && \n           dist.downloadURL && dist.accessURL;\n  };\n\n  // Add a distribution\n  const handleAddDistribution = () => {\n    if (!validateDistribution(currentDistribution)) {\n      setMessage('Please fill in all required fields for the distribution');\n      return;\n    }\n    \n    setFormData({\n      ...formData,\n      distributions: [...formData.distributions, {...currentDistribution}]\n    });\n    \n    // Reset the current distribution form\n    setCurrentDistribution({\n      title: '',\n      description: '',\n      mediaType: '',\n      downloadURL: '',\n      accessURL: '',\n      accessService: '',\n      byteSize: '',\n      compressionFormat: '',\n      packagingFormat: '',\n      hasPolicy: '',\n      license: '',\n       rights:'',\n      spatialResolution: '',\n      temporalResolution: '',\n      releaseDate: '',\n      modificationDate: ''\n    });\n\n    setMessage('Distribution added successfully');\n    setTimeout(() => setMessage(''), 2000);\n  };\n\n  // Remove a distribution\n  const handleRemoveDistribution = (index) => {\n    const newDistributions = [...formData.distributions];\n    newDistributions.splice(index, 1);\n    setFormData({\n      ...formData,\n      distributions: newDistributions\n    });\n  };\n\n\n\n\n\n  const validateDateField = (fieldName, dateValue) => {\n    if (!dateValue) {\n      // For required fields, this would be caught later\n      return true;\n    }\n    \n    if (!isValidDate(dateValue)) {\n      // Create a synthetic event to pass to validateDateInput\n      const syntheticEvent = {\n        target: {\n          name: fieldName,\n          value: dateValue,\n          setCustomValidity: () => {} // Mock function\n        }\n      };\n      \n      validateDateInput(syntheticEvent);\n      return false;\n    }\n    \n    return true;\n  };\n  \n  // Helper function to check if a date string is valid\n  const isValidDate = (dateString) => {\n    // Skip empty values\n    if (!dateString) return true;\n    \n    // Check format\n    const datePattern = /^\\d{4}\\/\\d{2}\\/\\d{2}$/;\n    if (!datePattern.test(dateString)) {\n      return false;\n    }\n    \n    // Parse date parts\n    const parts = dateString.split('/');\n    const year = parseInt(parts[0], 10);\n    const month = parseInt(parts[1], 10);\n    const day = parseInt(parts[2], 10);\n    \n    // Check ranges\n    if (year < 1990 || year > 2030) return false;\n    if (month < 1 || month > 12) return false;\n    \n    // Check days in month\n    const daysInMonth = [\n      31, isLeapYear(year) ? 29 : 28, 31, 30, 31, 30,\n      31, 31, 30, 31, 30, 31\n    ];\n    \n    if (day < 1 || day > daysInMonth[month - 1]) return false;\n    \n    return true;\n  };\n\n\n\n  const handleDatePickerChange = (e, targetFieldName) => {\n    const selectedDate = e.target.value; // This will be in YYYY-MM-DD format\n    \n    // Convert from YYYY-MM-DD to YYYY/MM/DD\n    const formattedDate = selectedDate.replace(/-/g, '/');\n    \n    // Set the value in the appropriate field based on targetFieldName\n    if (targetFieldName === 'createdDate') {\n      // For direct form fields\n      setFormData({\n        ...formData,\n        createdDate: formattedDate\n      });\n    } else if (targetFieldName === 'publishedDate') {\n      setFormData({\n        ...formData,\n        publishedDate: formattedDate\n      });\n    } else if (targetFieldName === 'modifiedDate') {\n      // For the modified date input\n      setModifiedDateInput(formattedDate);\n    } else if (targetFieldName === 'distReleaseDate') {\n      // For distribution date fields\n      setCurrentDistribution({\n        ...currentDistribution,\n        releaseDate: formattedDate\n      });\n    } else if (targetFieldName === 'distModificationDate') {\n      setCurrentDistribution({\n        ...currentDistribution,\n        modificationDate: formattedDate\n      });\n    }\n    \n    // Validate the date after setting it\n    setTimeout(() => {\n      const syntheticEvent = {\n        target: {\n          name: targetFieldName,\n          value: formattedDate,\n          setCustomValidity: () => {}\n        }\n      };\n      validateDateInput(syntheticEvent);\n    }, 0);\n  };\n\n\n  const formatDatesForSubmission = (formData) => {\n    const updatedForm = { ...formData };\n    \n    // Format single date fields\n    if (updatedForm.createdDate) {\n      updatedForm.createdDate = convertToISODate(updatedForm.createdDate);\n    }\n    \n    if (updatedForm.publishedDate) {\n      updatedForm.publishedDate = convertToISODate(updatedForm.publishedDate);\n    }\n    \n    // Format date arrays\n    if (updatedForm.modifiedDate && updatedForm.modifiedDate.length > 0) {\n      updatedForm.modifiedDate = updatedForm.modifiedDate.map(date => \n        convertToISODate(date)\n      );\n    }\n    \n    // Format dates in distributions\n    if (updatedForm.distributions && updatedForm.distributions.length > 0) {\n      updatedForm.distributions = updatedForm.distributions.map(dist => {\n        const newDist = { ...dist };\n        if (newDist.releaseDate) {\n          newDist.releaseDate = convertToISODate(newDist.releaseDate);\n        }\n        if (newDist.modificationDate) {\n          newDist.modificationDate = convertToISODate(newDist.modificationDate);\n        }\n        return newDist;\n      });\n    }\n    \n    return updatedForm;\n  };\n  \n  \n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    const updatedForm = addPendingTagInputs();\n    \n    // Separate arrays for different types of errors\n    const missingFields = [];\n    const invalidDates = [];\n    \n    // Check for missing required fields (including dates)\n    if (!updatedForm.title) missingFields.push('Title');\n    if (!updatedForm.description) missingFields.push('Description'); \n    if (!updatedForm.type || updatedForm.type.length === 0) missingFields.push('Type');\n    if (!updatedForm.publishedDate) missingFields.push('Published Date');\n    if (updatedForm.distributions.length === 0) missingFields.push('Distribution');\n    if (updatedForm.primaryReferenceDocument.length === 0) missingFields.push('Primary Reference Document');\n    if (updatedForm.keywords.length === 0) missingFields.push('Keywords');\n    if (updatedForm.language.length === 0) missingFields.push('Language');\n    if (!updatedForm.accessStatement) missingFields.push('Access Statement');\n    if (updatedForm.vocabulariesUsed.length === 0) missingFields.push('Vocabularies Used');\n    if (updatedForm.metadataSchema.length === 0) missingFields.push('Metadata Schema');\n    \n    // Check for invalid dates (only for dates that are filled)\n    if (createdDateError && updatedForm.createdDate) invalidDates.push(`Created Date: ${createdDateError}`);\n    if (publishedDateError && updatedForm.publishedDate) invalidDates.push(`Published Date: ${publishedDateError}`);\n    if (modifiedDateError && updatedForm.modifiedDate.length > 0) invalidDates.push(`Modified Date: ${modifiedDateError}`);\n    if (distReleaseDateError) invalidDates.push(`Distribution Release Date: ${distReleaseDateError}`);\n    if (distModificationDateError) invalidDates.push(`Distribution Modification Date: ${distModificationDateError}`);\n    \n    // For optional date fields that have values, validate them\n    if (updatedForm.createdDate) {\n      const e = {\n        target: {\n          name: 'createdDate',\n          value: updatedForm.createdDate,\n          setCustomValidity: () => {}\n        }\n      };\n      validateDateInput(e);\n      if (createdDateError) {\n        invalidDates.push(`Created Date: ${createdDateError}`);\n      }\n    }\n\n    // Construct error message\n    let errorMessage = '';\n    \n    if (missingFields.length > 0) {\n      errorMessage += `The following fields are required but have not been filled: ${missingFields.join(', ')}`;\n    }\n    \n    if (invalidDates.length > 0) {\n      if (errorMessage) errorMessage += '\\n\\n';\n      errorMessage += `The following dates are invalid:\\n${invalidDates.join('\\n')}`;\n    }\n\n    if (errorMessage) {\n      setMessage(errorMessage);\n      setIsSubmitting(false);\n      return;\n    }\n    \n    // Sync SPARQL endpoints before submission\n    updatedForm.sparqlEndpoint = sparqlEndpoints;\n\n    // Proceed with submission\n    setIsSubmitting(true);\n    setMessage('');\n    \n    try {\n      // Submit form data to parent component\n      const result = await onSubmit(updatedForm);\n      \n      if (result.success) {\n        setMessage('Form submitted successfully!');\n        setTimeout(() => {\n          setMessage('');\n          onClose();\n        }, 3000);\n      } else {\n        setMessage(result.message);\n      }\n    } catch (error) {\n      console.error('Error in form submission:', error);\n      setMessage('An unexpected error occurred. Please try again.');\n    } finally {\n      setIsSubmitting(false);\n    }\n};\n\n\n  // handle key press in tag input fields\n  const handleKeyPress = (e, fieldName, inputValue, setInputFunc, setErrorFunc) => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      handleAddTag(fieldName, inputValue, setInputFunc, setErrorFunc); // Pass setErrorFunc\n    }\n  };\n  \n  const formatDate = (dateString) => {\n    if (!dateString) return '';\n    try {\n      const date = new Date(dateString);\n      return date.toISOString().split('T')[0]; //YYYY-MM-DD\n    } catch (e) {\n      return dateString;\n    }\n  };\n\n\n  const handleSaveDraft = () => {\n    // First add any pending tag inputs\n    const updatedForm = addPendingTagInputs();\n    \n    \n    const existingDraftId = updatedForm.draftId || null;\n    const draftId = existingDraftId || `draft-${Date.now()}`;\n    const draft = {\n      id: draftId,\n      name: updatedForm.title || 'Untitled Draft',\n      date: new Date().toISOString(),\n      formData: {\n        ...updatedForm,\n        draftId: draftId // Store the draft ID in the form data\n      }\n    };\n    \n    // Get existing drafts from localStorage\n    let savedDrafts = [];\n    try {\n      const draftsString = localStorage.getItem('kg-metadata-drafts');\n      if (draftsString) {\n        savedDrafts = JSON.parse(draftsString);\n      }\n    } catch (error) {\n      console.error('Error loading saved drafts:', error);\n    }\n    \n    \n    if (existingDraftId) {\n      savedDrafts = savedDrafts.filter(d => d.id !== existingDraftId);\n    }\n    \n    \n    savedDrafts.push(draft);\n    localStorage.setItem('kg-metadata-drafts', JSON.stringify(savedDrafts));\n    \n    \n    setMessage('Draft saved successfully!');\n    setTimeout(() => setMessage(''), 2000);\n\n    if (onDraftSaved) {\n      onDraftSaved();\n    }\n    setTimeout(() => {\n      onClose();\n    }, 2000); \n  };\n\n\n  return (\n    <div className={`modal-overlay`}>\n    <div className={`modal-content`} onClick={e => e.stopPropagation()}>\n    \n    {message && (\n      <div className={`floating-message`}>\n        <div className={message.includes('success') ? 'success-message' : 'error-message'}>\n          <div className={`message-content`}>{message}</div>\n          <button \n            type=\"button\" \n            className={`message-close-button`} \n            onClick={() => setMessage(null)} \n            aria-label=\"Dismiss message\"\n          >\n            Dismiss\n          </button>\n        </div>\n      </div>\n    )}\n      <div className={`modal-header`}>\n        <h2>Knowledge Graph Metadata</h2>\n        <button className={`modal-close-button`} onClick={onClose}>×</button>\n      </div>\n      \n      <div className={`modal-body`} onClick={(e) => e.stopPropagation()}>\n        \n        <form onSubmit={handleSubmit}>\n          \n          {/* Identifier (now optional, multiple values) */}\n          <div className=\"form-group\">\n            <label htmlFor=\"identifier\">\n              Identifier <span className=\"field-indicator optional-indicator\">optional, multiple values allowed</span>\n            </label>\n            <div className=\"tag-input-container\">\n              <div className=\"tag-input-row\">\n                <input\n                  type=\"text\"\n                  id=\"identifier\"\n                  value={identifierInput}\n                  onChange={(e) => {\n                    setIdentifierInput(e.target.value);\n                    setIdentifierInputValid(false);\n                  }}\n                  onBlur={() => {\n                    if (identifierInput.trim()) setIdentifierInputValid(true);\n                  }}\n                  onKeyPress={(e) => handleKeyPress(e, 'identifier', identifierInput, setIdentifierInput)}\n                  className={`tag-input ${identifierInputValid ? 'tag-input-valid' : ''}`}\n                />\n                <button \n                  type=\"button\" \n                  className=\"tag-add-button\"\n                  onClick={() => {\n                    handleAddTag('identifier', identifierInput, setIdentifierInput);\n                    setIdentifierInputValid(false);\n                  }}\n                >\n                  +\n                </button>\n              </div>\n              <div className=\"tag-list\">\n                {formData.identifier.map((id, index) => (\n                  <div key={`identifier-${index}`} className=\"tag-item tag-item-valid\">\n                    <span className=\"tag-text\">{id}</span>\n                    <button \n                      type=\"button\"\n                      className=\"tag-remove\"\n                      onClick={() => handleRemoveTag('identifier', index)}\n                    >\n                      ×\n                    </button>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"form-group\">\n            <label htmlFor=\"type\">\n              Type <span className=\"field-indicator required-indicator\">required</span>\n            </label>\n            <div className={`checkbox-group ${typeValid ? 'form-input-valid' : ''}`}>\n              <label className=\"checkbox-label\">\n                <input\n                  type=\"checkbox\"\n                  name=\"type\"\n                  value=\"dcat:Dataset\"\n                  checked={formData.type.includes('dcat:Dataset')}\n                  onChange={() => handleTypeChange('dcat:Dataset')}\n                  className=\"checkbox-input\"\n                />\n                dcat:Dataset\n              </label>\n              <label className=\"checkbox-label\">\n                <input\n                  type=\"checkbox\"\n                  name=\"type\"\n                  value=\"void:Dataset\"\n                  checked={formData.type.includes('void:Dataset')}\n                  onChange={() => handleTypeChange('void:Dataset')}\n                  className=\"checkbox-input\"\n                />\n                void:Dataset\n              </label>\n            </div>\n          </div>\n          \n          {/* Title */}\n          <div className=\"form-group\">\n            <label htmlFor=\"title\">\n              Title <span className=\"field-indicator required-indicator\">required, 1 value only</span>\n            </label>\n            <input\n              type=\"text\"\n              id=\"title\"\n              name=\"title\"\n              value={formData.title}\n              onChange={handleChange}\n              className={`form-control ${titleValid ? 'form-input-valid' : ''}`}\n              placeholder=\"Enter title\"\n              required\n            />\n          </div>\n          \n          <div className=\"form-group\">\n            <label htmlFor=\"alternativeTitle\">\n              Alternative Title <span className=\"field-indicator optional-indicator\">optional, multiple values allowed</span>\n            </label>\n            <div className=\"tag-input-container\">\n              <div className=\"tag-input-row\">\n                <input\n                  type=\"text\"\n                  id=\"alternativeTitle\"\n                  value={alternativeTitleInput}\n                  onChange={(e) => {\n                    setAlternativeTitleInput(e.target.value);\n                    setAlternativeTitleInputValid(false);\n                  }}\n                  onBlur={() => {\n                    if (alternativeTitleInput.trim()) setAlternativeTitleInputValid(true);\n                  }}\n                  onKeyPress={(e) => handleKeyPress(e, 'alternativeTitle', alternativeTitleInput, setAlternativeTitleInput)}\n                  className={`tag-input ${alternativeTitleInputValid ? 'tag-input-valid' : ''}`}\n                />\n                <button \n                  type=\"button\" \n                  className=\"tag-add-button\"\n                  onClick={() => {\n                    handleAddTag('alternativeTitle', alternativeTitleInput, setAlternativeTitleInput);\n                    setAlternativeTitleInputValid(false);\n                  }}\n                >\n                  +\n                </button>\n              </div>\n              <div className=\"tag-list\">\n                {formData.alternativeTitle.map((title, index) => (\n                  <div key={`alt-title-${index}`} className=\"tag-item tag-item-valid\">\n                    <span className=\"tag-text\">{title}</span>\n                    <button \n                      type=\"button\"\n                      className=\"tag-remove\"\n                      onClick={() => handleRemoveTag('alternativeTitle', index)}\n                    >\n                      ×\n                    </button>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n          \n          {/* Description */}\n          <div className=\"form-group\">\n            <label htmlFor=\"description\">\n              Description <span className=\"field-indicator required-indicator\">required, 1 value only</span>\n            </label>\n            <input\n              type=\"text\"\n              id=\"description\"\n              name=\"description\"\n              value={formData.description}\n              onChange={handleChange}\n              className={`form-control ${descriptionValid ? 'form-input-valid' : ''}`}\n              required\n            />\n          </div>\n          \n          {/* Date fields */}\n          <div className=\"form-group\">\n            <label htmlFor=\"createdDate\">\n              Created Date <span className=\"field-indicator optional-indicator\">optional, 1 value only</span>\n            </label>\n            <div className=\"date-input-container\">\n              <input\n                type=\"text\"\n                id=\"createdDate\"\n                name=\"createdDate\"\n                value={formData.createdDate}\n                onChange={handleChange}\n                onBlur={validateDateInput}\n                placeholder=\"YYYY/MM/DD\"\n                className={`date-input ${createdDateError ? 'date-input-error' : ''} ${createdDateValid ? 'date-input-valid' : ''}`}\n              />\n              <input\n                type=\"date\"\n                className=\"date-picker-control\"\n                onChange={(e) => handleDatePickerChange(e, 'createdDate')}\n                aria-label=\"Date picker for Created Date\"\n              />\n            </div>\n            {createdDateError && <div className=\"date-error-message\">{createdDateError}</div>}\n          </div>\n          \n    \n          <div className=\"form-group\">\n            <label htmlFor=\"modifiedDate\">\n              Modified Date <span className=\"field-indicator optional-indicator\">optional, multiple values allowed</span>\n            </label>\n            <div className=\"tag-input-container\">\n              <div className=\"tag-input-row\">\n                <input\n                  type=\"text\"\n                  id=\"modifiedDate\"\n                  name=\"modifiedDate\"\n                  value={modifiedDateInput}\n                  onChange={(e) => setModifiedDateInput(e.target.value)}\n                  onBlur={validateDateInput}\n                  placeholder=\"YYYY/MM/DD\"\n                  className={`date-input ${modifiedDateError ? 'date-input-error' : ''} ${modifiedDateValid ? 'date-input-valid' : ''}`}\n                />\n                <input\n                  type=\"date\"\n                  className=\"date-picker-control\"\n                  onChange={(e) => handleDatePickerChange(e, 'modifiedDate')}\n                  aria-label=\"Date picker for Modified Date\"\n                />\n                <button \n                  type=\"button\" \n                  className=\"tag-add-button\"\n                  onClick={handleAddDate}\n                  disabled={!modifiedDateInput || modifiedDateError}\n                >\n                  +\n                </button>\n              </div>\n              {modifiedDateError && <div className=\"date-error-message\">{modifiedDateError}</div>}\n              <div className=\"tag-list\">\n                {formData.modifiedDate.map((date, index) => (\n                  <div key={`modified-date-${index}`} className=\"tag-item\">\n                    <span className=\"tag-text date-tag\">{date}</span>\n                    <button \n                      type=\"button\"\n                      className=\"tag-remove\"\n                      onClick={() => handleRemoveTag('modifiedDate', index)}\n                    >\n                      ×\n                    </button>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n    \n                      \n          <div className=\"form-group\">\n            <label htmlFor=\"publishedDate\">\n              Published Date <span className=\"field-indicator required-indicator\">required, 1 value only</span>\n            </label>\n            <div className=\"date-input-container\">\n              <input\n                type=\"text\"\n                id=\"publishedDate\"\n                name=\"publishedDate\"\n                value={formData.publishedDate}\n                onChange={handleChange}\n                onBlur={validateDateInput}\n                placeholder=\"YYYY/MM/DD\"\n                required\n                className={`date-input ${publishedDateError ? 'date-input-error' : ''} ${publishedDateValid ? 'date-input-valid' : ''}`}\n              />\n              <input\n                type=\"date\"\n                className=\"date-picker-control\"\n                onChange={(e) => handleDatePickerChange(e, 'publishedDate')}\n                aria-label=\"Date picker for Published Date\"\n              />\n            </div>\n            {publishedDateError && <div className=\"date-error-message\">{publishedDateError}</div>}\n          </div>\n    \n    \n          <div className=\"form-group\">\n          <label htmlFor=\"vocabulariesUsed\">\n              Vocabularies Used <span className=\"field-indicator required-indicator\">required (IRI), multiple values allowed</span>\n          </label>\n          <div className=\"tag-input-container\">\n              <div className=\"tag-input-row\">\n              <input\n                  type=\"text\"\n                  id=\"vocabulariesUsed\"\n                  name=\"vocabulariesUsedInput\"\n                  value={vocabulariesUsedInput}\n                  onChange={(e) => {\n                    setVocabulariesUsedInput(e.target.value);\n                    setVocabulariesUsedInputError('');\n                    setVocabulariesUsedInputValid(false);\n                  }}\n                  onBlur={validateIriInput}\n                  onKeyUp= {(e) => handleKeyPress(e, 'vocabulariesUsed', vocabulariesUsedInput, setVocabulariesUsedInput, setVocabulariesUsedInputError)}\n                  className={`tag-input ${vocabulariesUsedInputError ? 'tag-input-error' : ''} ${vocabulariesUsedInputValid ? 'tag-input-valid' : ''}`}\n              />\n              {vocabulariesUsedInputError && <div className=\"iri-error-message\">{vocabulariesUsedInputError}</div>}\n\n              <button \n                  type=\"button\" \n                  className=\"tag-add-button\"\n                  onClick={() => handleAddTag('vocabulariesUsed', vocabulariesUsedInput, setVocabulariesUsedInput)}\n              >\n                  +\n              </button>\n              </div>\n              <div className=\"tag-list\">\n              {formData.vocabulariesUsed.map((item, index) => (\n                  <div key={`vocabulary-${index}`} className=\"tag-item\">\n                  <span className=\"tag-text\">{item}</span>\n                  <button \n                      type=\"button\"\n                      className=\"tag-remove\"\n                      onClick={() => handleRemoveTag('vocabulariesUsed', index)}\n                  >\n                      ×\n                  </button>\n                  </div>\n              ))}\n              </div>\n              <div className=\"field-hint\"> </div>\n          </div>\n          </div>\n    \n          {/* Metadata Schema [1,∞] - Required, multiple values */}\n          <div className=\"form-group\">\n          <label htmlFor=\"metadataSchema\">\n              Metadata Schema <span className=\"field-indicator required-indicator\">required (IRI), multiple values allowed</span>\n          </label>\n          <div className=\"tag-input-container\">\n              <div className=\"tag-input-row\">\n              <input\n                type=\"text\"\n                id=\"metadataSchema\"\n                name=\"metadataSchemaInput\"\n                value={metadataSchemaInput}\n                onChange={(e) => {\n                  setMetadataSchemaInput(e.target.value);\n                  setMetadataSchemaInputError('');\n                  setMetadataSchemaInputValid(false);\n                }}\n                onBlur={validateIriInput}\n                onKeyPress={(e) => handleKeyPress(e, 'metadataSchema', metadataSchemaInput, setMetadataSchemaInput, setMetadataSchemaInputError)}\n                className={`tag-input ${metadataSchemaInputError ? 'tag-input-error' : ''} ${metadataSchemaInputValid ? 'tag-input-valid' : ''}`}\n              />\n              {metadataSchemaInputError && <div className=\"iri-error-message\">{metadataSchemaInputError}</div>}\n\n              <button \n                  type=\"button\" \n                  className=\"tag-add-button\"\n                  onClick={() => handleAddTag('metadataSchema', metadataSchemaInput, setMetadataSchemaInput)}\n              >\n                  +\n              </button>\n              </div>\n              <div className=\"tag-list\">\n              {formData.metadataSchema.map((item, index) => (\n                  <div key={`metadata-schema-${index}`} className=\"tag-item\">\n                  <span className=\"tag-text\">{item}</span>\n                  <button \n                      type=\"button\"\n                      className=\"tag-remove\"\n                      onClick={() => handleRemoveTag('metadataSchema', index)}\n                  >\n                      ×\n                  </button>\n                  </div>\n              ))}\n              </div>\n              <div className=\"field-hint\"> </div>\n          </div>\n          </div>\n    \n          {/* Primary Reference Document */}\n          <div className=\"form-group\">\n            <label htmlFor=\"primaryReferenceDocument\">\n              Primary Reference Document <span className=\"field-indicator required-indicator\">required (IRI), multiple values allowed</span>\n            </label>\n            <div className=\"tag-input-container\">\n              <div className=\"tag-input-row\">\n              <input\n                type=\"text\"\n                id=\"primaryReferenceDocument\"\n                name=\"primaryReferenceDocInput\"\n                value={primaryReferenceDocInput}\n                onChange={(e) => {\n                  setPrimaryReferenceDocInput(e.target.value);\n                  setPrimaryReferenceDocInputError('');\n                  setPrimaryReferenceDocInputValid(false);\n                }}\n                onBlur={validateIriInput}\n                onKeyUp={(e) => handleKeyPress(e, 'primaryReferenceDocument', primaryReferenceDocInput, setPrimaryReferenceDocInput, setPrimaryReferenceDocInputError)}\n                className={`${primaryReferenceDocInputError ? 'tag-input-error' : ''} ${primaryReferenceDocInputValid ? 'tag-input-valid' : ''}`}\n              />\n              {primaryReferenceDocInputError && <div className=\"iri-error-message\">{primaryReferenceDocInputError}</div>}\n\n                <button \n                  type=\"button\" \n                  className=\"tag-add-button\"\n                  onClick={() => handleAddTag('primaryReferenceDocument', primaryReferenceDocInput, setPrimaryReferenceDocInput)}\n                >\n                  +\n                </button>\n              </div>\n              <div className=\"tag-list\">\n                {formData.primaryReferenceDocument.map((doc, index) => (\n                  <div key={`ref-doc-${index}`} className=\"tag-item\">\n                    <span className=\"tag-text\">{doc}</span>\n                    <button \n                      type=\"button\"\n                      className=\"tag-remove\"\n                      onClick={() => handleRemoveTag('primaryReferenceDocument', index)}\n                    >\n                      ×\n                    </button>\n                  </div>\n                ))}\n              </div>\n              <div className=\"field-hint\"> </div>\n            </div>\n          </div>\n          \n          {/* Meta Graph */}\n          <div className=\"form-group\">\n            <label htmlFor=\"metaGraph\">\n              Meta Graph <span className=\"field-indicator optional-indicator\">optional, multiple values allowed</span>\n            </label>\n            <div className=\"file-upload-section\">\n              <div className=\"file-upload-label\">\n                <span className=\"file-name\">{imageFileName || \"No file selected\"}</span>\n                <button \n                  type=\"button\" \n                  className=\"browse-button\"\n                  onClick={() => fileInputRef.current.click()}\n                >\n                  Browse\n                </button>\n                <input\n          onBlur={validateRegularInput}              type=\"file\"\n                  id=\"metaGraph\"\n                  ref={fileInputRef}\n                  onChange={handleFileUpload}\n                  accept=\"image/*\"\n                  className=\"file-upload-input\"\n                  style={{ display: \"none\" }}\n                />\n              </div>\n              <div className=\"tag-list\">\n                {formData.metaGraph.map((graph, index) => (\n                  <div key={`meta-graph-${index}`} className=\"tag-item\">\n                    <span className=\"tag-text\">{graph}</span>\n                    <button \n                      type=\"button\"\n                      className=\"tag-remove\"\n                      onClick={() => handleRemoveTag('metaGraph', index)}\n                    >\n                      ×\n                    </button>\n                  </div>\n                ))}\n              </div>\n              <div className=\"field-hint\">Upload image files to add to meta graph</div>\n            </div>\n          </div>\n          \n          {/* Statistics */}\n          <div className=\"form-group\">\n            <label htmlFor=\"statistics\">\n              Statistics <span className=\"field-indicator optional-indicator\">optional, multiple values allowed</span>\n            </label>\n            <div className=\"tag-input-container\">\n              <div className=\"tag-input-row\">\n              <input\n          onBlur={validateRegularInput}              type=\"text\"\n                  id=\"statistics\"\n                  value={statisticsInput}\n                  onChange={(e) => {\n                    setStatisticsInput(e.target.value);\n                    setStatisticsInputValid(false);\n                  }}\n                  onBlur={() => setStatisticsInputValid(!!statisticsInput.trim())}\n                  onKeyUp={(e) => handleKeyPress(e, 'statistics', statisticsInput, setStatisticsInput)}\n                  className={`tag-input ${statisticsInputValid ? 'tag-input-valid' : ''}`}\n              />\n              <button \n                  type=\"button\" \n                  className=\"tag-add-button\"\n                  onClick={() => handleAddTag('statistics', statisticsInput, setStatisticsInput)}\n              >\n                  +\n              </button>\n              </div>\n              <div className=\"tag-list\">\n                {formData.statistics.map((stat, index) => (\n                  <div key={`stat-${index}`} className=\"tag-item\">\n                    <span className=\"tag-text\">{stat}</span>\n                    <button \n                      type=\"button\"\n                      className=\"tag-remove\"\n                      onClick={() => handleRemoveTag('statistics', index)}\n                    >\n                      ×\n                    </button>\n                  </div>\n                ))}\n              </div>\n              <div className=\"field-hint\"> </div>\n            </div>\n          </div>\n    \n          {/* Acronym */}\n          <div className=\"form-group\">\n            <label htmlFor=\"acronym\">\n              Acronym <span className=\"field-indicator optional-indicator\">optional, multiple values allowed</span>\n            </label>\n            <div className=\"tag-input-container\">\n              <div className=\"tag-input-row\">\n              <input\n          onBlur={validateRegularInput}              type=\"text\"\n                  id=\"acronym\"\n                  value={acronymInput}\n                  onChange={(e) => {\n                    setAcronymInput(e.target.value);\n                    setAcronymInputValid(false);\n                  }}\n                  onBlur={() => setAcronymInputValid(!!acronymInput.trim())}\n                  onKeyPress={(e) => handleKeyPress(e, 'acronym', acronymInput, setAcronymInput)}\n                  className={`tag-input ${acronymInputValid ? 'tag-input-valid' : ''}`}\n              />\n              <button \n                  type=\"button\" \n                  className=\"tag-add-button\"\n                  onClick={() => handleAddTag('acronym', acronymInput, setAcronymInput)}\n              >\n                  +\n              </button>\n              </div>\n              <div className=\"tag-list\">\n                {formData.acronym.map((acr, index) => (\n                  <div key={`acronym-${index}`} className=\"tag-item\">\n                    <span className=\"tag-text\">{acr}</span>\n                    <button \n                      type=\"button\"\n                      className=\"tag-remove\"\n                      onClick={() => handleRemoveTag('acronym', index)}\n                    >\n                      ×\n                    </button>\n                  </div>\n                ))}\n              </div>\n              <div className=\"field-hint\"> </div>\n            </div>\n          </div>\n          \n          {/* Homepage URL (optional, multiple values allowed, IRIs) */}\n          <div className=\"form-group\">\n            <label htmlFor=\"homepageURL\">\n              Homepage URL <span className=\"field-indicator optional-indicator\">optional (IRI), multiple values allowed, IRIs</span>\n            </label>\n            <div className=\"tag-input-container\">\n              <div className=\"tag-input-row\">\n              <input\n                type=\"text\"\n                id=\"homepageURL\"\n                name=\"homepageURLInput\"\n                value={homepageURLInput}\n                onChange={(e) => {\n                  setHomepageURLInput(e.target.value);\n                  setHomepageURLInputError('');\n                  setHomepageURLInputValid(false);\n                }}\n                onBlur={validateIriInput}\n                onKeyPress={(e) => handleKeyPress(e, 'homepageURL', homepageURLInput, setHomepageURLInput, setHomepageURLInputError)}\n                placeholder=\"Enter IRI and press Enter or +\"\n                className={`${homepageURLInputError ? 'tag-input-error' : ''} ${homepageURLInputValid ? 'tag-input-valid' : ''}`}\n              />\n                <button\n                  type=\"button\"\n                  className=\"tag-add-button\"\n                  onClick={() => handleAddTag('homepageURL', homepageURLInput, setHomepageURLInput)}\n                >\n                  +\n                </button>\n              </div>\n              <div className=\"tag-list\">\n                {formData.homepageURL.map((url, index) => (\n                  <div key={`homepage-url-${index}`} className=\"tag-item\">\n                    <span className=\"tag-text\">{url}</span>\n                    <button\n                      type=\"button\"\n                      className=\"tag-remove\"\n                      onClick={() => handleRemoveTag('homepageURL', index)}\n                    >\n                      ×\n                    </button>\n                  </div>\n                ))}\n              </div>\n              {homepageURLInputError && <div className=\"iri-error-message\">{homepageURLInputError}</div>}\n              <div className=\"field-hint\">Press Enter or click + to add IRI</div>\n            </div>\n          </div>\n          \n         {/* Other Pages (optional, multiple values allowed, IRIs) */}\n          <div className=\"form-group\">\n            <label htmlFor=\"otherPages\">\n              Other Pages <span className=\"field-indicator optional-indicator\">optional (IRI), multiple values allowed, IRIs</span>\n            </label>\n            <div className=\"tag-input-container\">\n              <div className=\"tag-input-row\">\n              <input\n                type=\"text\"\n                id=\"otherPages\"\n                name=\"otherPagesInput\"\n                value={otherPagesInput}\n                onChange={(e) => {\n                  setOtherPagesInput(e.target.value);\n                  setOtherPagesInputError('');\n                  setOtherPagesInputValid(false);\n                }}\n                onBlur={validateIriInput}\n                onKeyPress={(e) => handleKeyPress(e, 'otherPages', otherPagesInput, setOtherPagesInput, setOtherPagesInputError)}\n                placeholder=\"Enter IRI and press Enter or +\"\n                className={`tag-input ${otherPagesInputError ? 'tag-input-error' : ''} ${otherPagesInputValid ? 'tag-input-valid' : ''}`}\n              />\n              {otherPagesInputError && <div className=\"iri-error-message\">{otherPagesInputError}</div>}\n\n                <button\n                  type=\"button\"\n                  className=\"tag-add-button\"\n                  onClick={() => handleAddTag('otherPages', otherPagesInput, setOtherPagesInput)}\n                >\n                  +\n                </button>\n              </div>\n              {otherPagesInputError && <div className={`field-error-message`}>{otherPagesInputError}</div>}\n              <div className=\"tag-list\">\n                {formData.otherPages.map((page, index) => (\n                  <div key={`other-page-${index}`} className=\"tag-item\">\n                    <span className=\"tag-text\">{page}</span>\n                    <button\n                      type=\"button\"\n                      className=\"tag-remove\"\n                      onClick={() => handleRemoveTag('otherPages', index)}\n                    >\n                      ×\n                    </button>\n                  </div>\n                ))}\n              </div>\n              <div className=\"field-hint\">Press Enter or click + to add IRI</div>\n            </div>\n          </div>\n\n          {/* Role fields */}\n          <div className={`role-section`}>\n          <div className=\"form-group\">\n          <label className=\"role-label\">\n            Role: Creator <span className=\"field-indicator optional-indicator\">optional, 1 set of values</span>\n          </label>\n          {/* Role Creator */}\n          <div className=\"toggle-container\">\n            <div className=\"toggle-switch-container\">\n              <label className={`toggle-option ${roleCreatorToggle === 'agentIRI' ? 'active' : 'inactive'}`}>\n                Agent IRI available\n              </label>\n              <label className=\"toggle-switch\">\n                <input\n                  type=\"checkbox\"\n                  checked={roleCreatorToggle === 'nameEmail'}\n                  onChange={(e) => {\n                    const newToggle = e.target.checked ? 'nameEmail' : 'agentIRI';\n                    setRoleCreatorToggle(newToggle);\n                    \n                    // Clear fields when switching\n                    if (newToggle === 'agentIRI') {\n                      handleRoleChange('roleCreator', 'givenName', '');\n                      handleRoleChange('roleCreator', 'mbox', '');\n                    } else {\n                      handleRoleChange('roleCreator', 'agent', '');\n                      setRoleCreatorAgentError('');\n                      setRoleCreatorAgentValid(false);\n                    }\n                  }}\n                />\n                <span className={`slider ${roleCreatorToggle === 'nameEmail' ? 'active' : ''}`}></span>\n              </label>\n              <label className={`toggle-option ${roleCreatorToggle === 'nameEmail' ? 'active' : 'inactive'}`}>\n                Name + mBox\n              </label>\n            </div>\n          </div>\n          \n          <div className=\"role-fields\">\n            {roleCreatorToggle === 'agentIRI' ? (\n              <div className=\"role-field\">\n                <label htmlFor=\"roleCreatorAgent\" className=\"subfield-label\">Agent</label>\n                <input\n                  onBlur={validateIriInput}\n                  type=\"text\"\n                  id=\"roleCreatorAgent\"\n                  name=\"roleCreatorAgent\"\n                  value={formData.roleCreator.agent}\n                  onChange={(e) => {\n                    handleRoleChange('roleCreator', 'agent', e.target.value);\n                    setRoleCreatorAgentError('');\n                    setRoleCreatorAgentValid(false);\n                  }}\n                  className={`subfield-input ${roleCreatorAgentError ? 'input-error' : ''} ${roleCreatorAgentValid ? 'input-valid' : ''}`}\n                />\n                {roleCreatorAgentError && <div className=\"iri-error-message\">{roleCreatorAgentError}</div>}\n              </div> \n            ) : (\n              <>\n                <div className=\"role-field\">\n                  <label htmlFor=\"roleCreatorGivenName\" className=\"subfield-label\">Given Name</label>\n                  <input\n                    onBlur={validateRegularInput}\n                    type=\"text\"\n                    id=\"roleCreatorGivenName\"\n                    value={formData.roleCreator.givenName}\n                    onChange={(e) => handleRoleChange('roleCreator', 'givenName', e.target.value)}\n                    className=\"subfield-input\"\n                  />\n                </div>\n                <div className=\"role-field\">\n                  <label htmlFor=\"roleCreatorMbox\" className=\"subfield-label\">Mbox</label>\n                  <input\n                    onBlur={validateRegularInput}\n                    type=\"email\"\n                    id=\"roleCreatorMbox\"\n                    value={formData.roleCreator.mbox}\n                    onChange={(e) => handleRoleChange('roleCreator', 'mbox', e.target.value)}\n                    className=\"subfield-input\"\n                  />\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n\n        {/* Role: Publisher */}\n        <div className=\"form-group\">\n          <label className=\"role-label\">\n            Role: Publisher <span className=\"field-indicator optional-indicator\">optional, 1 set of values</span>\n          </label>\n          \n          <div className=\"toggle-container\">\n            <div className=\"toggle-switch-container\">\n              <label className={`toggle-option ${rolePublisherToggle === 'agentIRI' ? 'active' : 'inactive'}`}>\n                Agent IRI available\n              </label>\n              <label className=\"toggle-switch\">\n                <input\n                  type=\"checkbox\"\n                  checked={rolePublisherToggle === 'nameEmail'}\n                  onChange={(e) => {\n                    const newToggle = e.target.checked ? 'nameEmail' : 'agentIRI';\n                    setRolePublisherToggle(newToggle);\n                    \n                    if (newToggle === 'agentIRI') {\n                      handleRoleChange('rolePublisher', 'givenName', '');\n                      handleRoleChange('rolePublisher', 'mbox', '');\n                    } else {\n                      handleRoleChange('rolePublisher', 'agent', '');\n                      setRolePublisherAgentError('');\n                      setRolePublisherAgentValid(false);\n                    }\n                  }}\n                />\n                <span className={`slider ${rolePublisherToggle === 'nameEmail' ? 'active' : ''}`}></span>\n              </label>\n              <label className={`toggle-option ${rolePublisherToggle === 'nameEmail' ? 'active' : 'inactive'}`}>\n                Name + mBox\n              </label>\n            </div>\n          </div>\n          \n          <div className=\"role-fields\">\n            {rolePublisherToggle === 'agentIRI' ? (\n              <div className=\"role-field\">\n                <label htmlFor=\"rolePublisherAgent\" className=\"subfield-label\">Agent</label>\n                <input\n                  onBlur={validateIriInput}\n                  type=\"text\"\n                  id=\"rolePublisherAgent\"\n                  name=\"rolePublisherAgent\"\n                  value={formData.rolePublisher.agent}\n                  onChange={(e) => {\n                    handleRoleChange('rolePublisher', 'agent', e.target.value);\n                    setRolePublisherAgentError('');\n                    setRolePublisherAgentValid(false);\n                  }}\n                  className={`subfield-input ${rolePublisherAgentError ? 'input-error' : ''} ${rolePublisherAgentValid ? 'input-valid' : ''}`}\n                />\n                {rolePublisherAgentError && <div className=\"iri-error-message\">{rolePublisherAgentError}</div>}\n              </div>\n            ) : (\n              <>\n                <div className=\"role-field\">\n                  <label htmlFor=\"rolePublisherGivenName\" className=\"subfield-label\">Given Name</label>\n                  <input\n                    onBlur={validateRegularInput}\n                    type=\"text\"\n                    id=\"rolePublisherGivenName\"\n                    value={formData.rolePublisher.givenName}\n                    onChange={(e) => handleRoleChange('rolePublisher', 'givenName', e.target.value)}\n                    className=\"subfield-input\"\n                  />\n                </div>\n                <div className=\"role-field\">\n                  <label htmlFor=\"rolePublisherMbox\" className=\"subfield-label\">Mbox</label>\n                  <input\n                    onBlur={validateRegularInput}\n                    type=\"email\"\n                    id=\"rolePublisherMbox\"\n                    value={formData.rolePublisher.mbox}\n                    onChange={(e) => handleRoleChange('rolePublisher', 'mbox', e.target.value)}\n                    className=\"subfield-input\"\n                  />\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n\n        {/* Role Funder */}\n        <div className=\"form-group\">\n          <label className=\"role-label\">\n            Role: Funder <span className=\"field-indicator optional-indicator\">optional, 1 set of values</span>\n          </label>\n          \n          <div className=\"toggle-container\">\n            <div className=\"toggle-switch-container\">\n              <label className={`toggle-option ${roleFunderToggle === 'agentIRI' ? 'active' : 'inactive'}`}>\n                Agent IRI available\n              </label>\n              <label className=\"toggle-switch\">\n                <input\n                  type=\"checkbox\"\n                  checked={roleFunderToggle === 'nameEmail'}\n                  onChange={(e) => {\n                    const newToggle = e.target.checked ? 'nameEmail' : 'agentIRI';\n                    setRoleFunderToggle(newToggle);\n                    \n                    if (newToggle === 'agentIRI') {\n                      handleRoleChange('roleFunder', 'givenName', '');\n                      handleRoleChange('roleFunder', 'mbox', '');\n                    } else {\n                      handleRoleChange('roleFunder', 'agent', '');\n                      setRoleFunderAgentError('');\n                      setRoleFunderAgentValid(false);\n                    }\n                  }}\n                />\n                <span className={`slider ${roleFunderToggle === 'nameEmail' ? 'active' : ''}`}></span>\n              </label>\n              <label className={`toggle-option ${roleFunderToggle === 'nameEmail' ? 'active' : 'inactive'}`}>\n                Name + mBox\n              </label>\n            </div>\n          </div>\n          \n          <div className=\"role-fields\">\n            {roleFunderToggle === 'agentIRI' ? (\n              <div className=\"role-field\">\n                <label htmlFor=\"roleFunderAgent\" className=\"subfield-label\">Agent</label>\n                <input\n                  onBlur={validateIriInput}\n                  type=\"text\"\n                  id=\"roleFunderAgent\"\n                  name=\"roleFunderAgent\"\n                  value={formData.roleFunder.agent}\n                  onChange={(e) => {\n                    handleRoleChange('roleFunder', 'agent', e.target.value);\n                    setRoleFunderAgentError('');\n                    setRoleFunderAgentValid(false);\n                  }}\n                  className={`subfield-input ${roleFunderAgentError ? 'input-error' : ''} ${roleFunderAgentValid ? 'input-valid' : ''}`}\n                />\n                {roleFunderAgentError && <div className=\"iri-error-message\">{roleFunderAgentError}</div>}\n              </div>  \n            ) : (\n              <>\n                <div className=\"role-field\">\n                  <label htmlFor=\"roleFunderGivenName\" className=\"subfield-label\">Given Name</label>\n                  <input\n                    onBlur={validateRegularInput}\n                    type=\"text\"\n                    id=\"roleFunderGivenName\"\n                    value={formData.roleFunder.givenName}\n                    onChange={(e) => handleRoleChange('roleFunder', 'givenName', e.target.value)}\n                    className=\"subfield-input\"\n                  />\n                </div>\n                <div className=\"role-field\">\n                  <label htmlFor=\"roleFunderMbox\" className=\"subfield-label\">Mbox</label>\n                  <input\n                    onBlur={validateRegularInput}\n                    type=\"email\"\n                    id=\"roleFunderMbox\"\n                    value={formData.roleFunder.mbox}\n                    onChange={(e) => handleRoleChange('roleFunder', 'mbox', e.target.value)}\n                    className=\"subfield-input\"\n                  />\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n        </div>\n\n         {/* License */}\n         <div className=\"form-group\">\n           <label htmlFor=\"license\">\n             License <span className=\"field-indicator required-indicator\">required (IRI), 1 value only</span>\n           </label>\n           <input\n              type=\"text\"\n              id=\"license\"\n              name=\"license\"\n              value={formData.license}\n              onChange={(e) => {\n                handleChange(e);\n                setLicenseError('');\n                setLicenseValid(false);\n              }}\n              onBlur={validateIriInput}\n              required\n              className={`form-control ${licenseValid ? 'form-input-valid' : ''} ${licenseError ? 'form-input-error' : ''}`}\n            />\n            {licenseError && <div className=\"iri-error-message\">{licenseError}</div>}\n         </div>\n         \n         {/* Version */}\n         <div className=\"form-group\">\n           <label htmlFor=\"version\">\n             Version <span className=\"field-indicator required-indicator\">required, 1 value only</span>\n           </label>\n           <input\n          onBlur={validateRegularInput}         type=\"text\"\n             id=\"version\"\n             name=\"version\"\n             value={formData.version}\n             onChange={handleChange}\n             onBlur={() => setVersionValid(!!formData.version.trim())}\n             required\n             className={`form-control ${versionValid ? 'form-input-valid' : ''}`}\n           />\n         </div>\n    \n         {/* Distributions Section */}\n         <div className=\"form-section\">\n           <h3 className=\"section-title\">Distributions</h3>\n           <div className=\"field-indicator required-indicator\">required, multiple submissions allowed</div>\n         </div>\n    \n         {/* Display existing distributions */}\n         <div className=\"distributions-list\">\n           {formData.distributions.map((dist, index) => (\n             <div key={`distribution-${index}`} className=\"distribution-item\">\n               <div className=\"distribution-header\">\n                 <div className=\"distribution-title\">{dist.title}</div>\n                 <div className=\"distribution-actions\">\n                      <button \n                        type=\"button\"\n                        className=\"edit-button\"\n                        onClick={() => {\n                          setCurrentDistribution({...dist});\n                          handleRemoveDistribution(index);\n                          document.querySelector('.distribution-form').scrollIntoView({ behavior: 'smooth' });\n                        }}\n                      >\n                        Edit\n                      </button>\n                      <button \n                        type=\"button\"\n                        className=\"tag-remove\"\n                        onClick={() => handleRemoveDistribution(index)}\n                      >\n                        ×\n                      </button>\n                    </div>\n                  </div>\n               <div className=\"distribution-preview\">\n                 <div className=\"distribution-field\">\n                   <span className=\"field-label\">Description:</span>\n                   <span className=\"field-value\">{dist.description}</span>\n                 </div>\n                 <div className=\"distribution-field\">\n                   <span className=\"field-label\">Media Type:</span>\n                   <span className=\"field-value\">{dist.mediaType}</span>\n                 </div>\n                 <div className=\"distribution-field\">\n                   <span className=\"field-label\">Download URL:</span>\n                   <span className=\"field-value\">{dist.downloadURL}</span>\n                 </div>\n                 <div className=\"distribution-field\">\n                   <span className=\"field-label\">Access URL:</span>\n                   <span className=\"field-value\">{dist.accessURL}</span>\n                 </div>\n                 {dist.accessService && (\n                   <div className=\"distribution-field\">\n                     <span className=\"field-label\">Access Service:</span>\n                     <span className=\"field-value\">{dist.accessService}</span>\n                   </div>\n                 )}\n                 {dist.byteSize && (\n                   <div className=\"distribution-field\">\n                     <span className=\"field-label\">Byte Size:</span>\n                     <span className=\"field-value\">{dist.byteSize}</span>\n                   </div>\n                 )}\n                 {dist.compressionFormat && (\n                   <div className=\"distribution-field\">\n                     <span className=\"field-label\">Compression Format:</span>\n                     <span className=\"field-value\">{dist.compressionFormat}</span>\n                   </div>\n                 )}\n                 {dist.packagingFormat && (\n                   <div className=\"distribution-field\">\n                     <span className=\"field-label\">Packaging Format:</span>\n                     <span className=\"field-value\">{dist.packagingFormat}</span>\n                   </div>\n                 )}\n    \n    \n                 {dist.hasPolicy && (\n                   <div className=\"distribution-field\">\n                     <span className=\"field-label\">Has Policy:</span>\n                     <span className=\"field-value\">{dist.hasPolicy}</span>\n                   </div>\n                 )}\n                 {dist.license && (\n                   <div className=\"distribution-field\">\n                     <span className=\"field-label\">license:</span>\n                     <span className=\"field-value\">{dist.license}</span>\n                   </div>\n                 )}\n                 {dist.rights && (\n                   <div className=\"distribution-field\">\n                     <span className=\"field-label\">Rights:</span>\n                     <span className=\"field-value\">{dist.rights}</span>\n                   </div>\n                 )}\n                 {dist.spatialResolution && (\n                   <div className=\"distribution-field\">\n                     <span className=\"field-label\">Spatial Resolution:</span>\n                     <span className=\"field-value\">{dist.spatialResolution}</span>\n                   </div>\n                 )}\n                 {dist.temporalResolution && (\n                   <div className=\"distribution-field\">\n                     <span className=\"field-label\">Temporal Resolution:</span>\n                     <span className=\"field-value\">{dist.temporalResolution}</span>\n                   </div>\n                 )}\n    \n    \n    \n    \n                 {dist.releaseDate && (\n                   <div className=\"distribution-field\">\n                     <span className=\"field-label\">Release Date:</span>\n                     <span className=\"field-value\">{formatDate(dist.releaseDate)}</span>\n                   </div>\n                 )}\n                 {dist.modificationDate && (\n                   <div className=\"distribution-field\">\n                     <span className=\"field-label\">Modification Date:</span>\n                     <span className=\"field-value\">{formatDate(dist.modificationDate)}</span>\n                   </div>\n                 )}\n               </div>\n             </div>\n           ))}\n         </div>\n    \n         {/* Distribution Form */}\n         <div className=\"distribution-form\">\n           <div className=\"distribution-form-header\">\n             <h4>Add New Distribution</h4>\n           </div>\n           \n           {/* Required distribution fields */}\n           <div className=\"form-group\">\n             <label htmlFor=\"distTitle\">\n               Title <span className=\"field-indicator required-indicator\">required</span>\n             </label>\n             <input\n              onBlur={validateRegularInput}           type=\"text\"\n               id=\"distTitle\"\n               value={currentDistribution.title}\n               onChange={(e) => handleDistributionChange('title', e.target.value)}\n               className=\"subfield-input\"\n             />\n           </div>\n           \n           <div className=\"form-group\">\n             <label htmlFor=\"distDescription\">\n               Description <span className=\"field-indicator required-indicator\">required</span>\n             </label>\n             <textarea\n          onBlur={validateRegularInput}           id=\"distDescription\"\n               value={currentDistribution.description}\n               onChange={(e) => handleDistributionChange('description', e.target.value)}\n               rows=\"2\"\n               className=\"subfield-input\"\n             ></textarea>\n           </div>\n           \n           <div className=\"form-group\">\n             <label htmlFor=\"distMediaType\">\n               Media Type <span className=\"field-indicator required-indicator\">required</span>\n             </label>\n             <input\n          onBlur={validateRegularInput}           type=\"text\"\n               id=\"distMediaType\"\n               value={currentDistribution.mediaType}\n               onChange={(e) => handleDistributionChange('mediaType', e.target.value)}\n               className=\"subfield-input\"\n             />\n           </div>\n           \n           <div className=\"form-group\">\n             <label htmlFor=\"distDownloadURL\">\n               Download URL (dcat:downloadURL) <span className=\"field-indicator required-indicator\">required (IRI)</span>\n             </label>\n             <input\n                type=\"url\"\n                id=\"distDownloadURL\"\n                name=\"distDownloadURL\"\n                value={currentDistribution.downloadURL}\n                onChange={(e) => {\n                  handleDistributionChange('downloadURL', e.target.value);\n                  setDistDownloadURLError('');\n                  setDistDownloadURLValid(false);\n                }}\n                onBlur={validateIriInput}\n                className={`subfield-input ${distDownloadURLError ? 'input-error' : ''} ${distDownloadURLValid ? 'input-valid' : ''}`}\n              />\n              {distDownloadURLError && <div className=\"iri-error-message\">{distDownloadURLError}</div>}\n\n           </div>\n           \n           <div className=\"form-group\">\n             <label htmlFor=\"distAccessURL\">\n               Access URL <span className=\"field-indicator required-indicator\">required (IRI)</span>\n             </label>\n             <input\n                type=\"url\"\n                id=\"distAccessURL\"\n                name=\"distAccessURL\"\n                value={currentDistribution.accessURL}\n                onChange={(e) => {\n                  handleDistributionChange('accessURL', e.target.value);\n                  setDistAccessURLError('');\n                  setDistAccessURLValid(false);\n                }}\n                onBlur={validateIriInput}\n                className={`subfield-input ${distAccessURLError ? 'input-error' : ''} ${distAccessURLValid ? 'input-valid' : ''}`}\n              />\n              {distAccessURLError && <div className=\"iri-error-message\">{distAccessURLError}</div>}\n          </div>    \n           {/* Optional distribution fields */}\n           <div className=\"form-group\">\n             <label htmlFor=\"distAccessService\">\n               Access Service <span className=\"field-indicator optional-indicator\">optional</span>\n             </label>\n             <input\n          onBlur={validateRegularInput}           type=\"text\"\n               id=\"distAccessService\"\n               value={currentDistribution.accessService}\n               onChange={(e) => handleDistributionChange('accessService', e.target.value)}\n               className=\"subfield-input\"\n             />\n           </div>\n           \n           <div className=\"form-group\">\n             <label htmlFor=\"distByteSize\">\n               Byte Size <span className=\"field-indicator optional-indicator\">optional</span>\n             </label>\n             <input\n          onBlur={validateRegularInput}           type=\"text\"\n               id=\"distByteSize\"\n               value={currentDistribution.byteSize}\n               onChange={(e) => handleDistributionChange('byteSize', e.target.value)}\n               className=\"subfield-input\"\n             />\n           </div>\n           \n           <div className=\"form-group\">\n             <label htmlFor=\"distCompressionFormat\">\n               Compression Format <span className=\"field-indicator optional-indicator\">optional</span>\n             </label>\n             <input\n               type=\"text\"\n               id=\"distCompressionFormat\"\n               name=\"distCompressionFormat\"\n               value={currentDistribution.compressionFormat}\n               onChange={(e) => handleDistributionChange('compressionFormat', e.target.value)}\n               onBlur={validateRegularInput}\n               className={`subfield-input ${distCompressionFormatValid ? 'form-input-valid' : ''}`}\n             />\n           </div>\n           \n           <div className=\"form-group\">\n             <label htmlFor=\"distPackagingFormat\">\n               Packaging Format <span className=\"field-indicator optional-indicator\">optional</span>\n             </label>\n             <input\n               type=\"text\"\n               id=\"distPackagingFormat\"\n               name=\"distPackagingFormat\"\n               value={currentDistribution.packagingFormat}\n               onChange={(e) => handleDistributionChange('packagingFormat', e.target.value)}\n               onBlur={validateRegularInput}\n               className={`subfield-input ${distPackagingFormatValid ? 'form-input-valid' : ''}`}\n             />\n           </div>\n           <div className=\"form-group\">\n             <label htmlFor=\"distHasPolicy\">\n               Has Policy <span className=\"field-indicator optional-indicator\">optional</span>\n             </label>\n             <input\n               type=\"text\"\n               id=\"distHasPolicy\"\n               name=\"distHasPolicy\"\n               value={currentDistribution.hasPolicy}\n               onChange={(e) => handleDistributionChange('hasPolicy', e.target.value)}\n               onBlur={validateRegularInput}\n               className={`subfield-input ${distHasPolicyValid ? 'form-input-valid' : ''}`}\n             />\n           </div>\n           \n           <div className=\"form-group\">\n             <label htmlFor=\"distLicense\">\n               License <span className=\"field-indicator optional-indicator\">optional</span>\n             </label>\n             <input\n               type=\"text\"\n               id=\"distLicense\"\n               name=\"distLicense\"\n               value={currentDistribution.license}\n               onChange={(e) => handleDistributionChange('license', e.target.value)}\n               onBlur={validateRegularInput}\n               className={`subfield-input ${distLicenseValid ? 'form-input-valid' : ''}`}\n             />\n           </div>\n           \n           <div className=\"form-group\">\n             <label htmlFor=\"distRights\">\n               Rights <span className=\"field-indicator optional-indicator\">optional</span>\n             </label>\n             <input\n               type=\"text\"\n               id=\"distRights\"\n               name=\"distRights\"\n               value={currentDistribution.rights}\n               onChange={(e) => handleDistributionChange('rights', e.target.value)}\n               onBlur={validateRegularInput}\n               className={`subfield-input ${distRightsValid ? 'form-input-valid' : ''}`}\n             />\n           </div>\n           <div className=\"form-group\">\n             <label htmlFor=\"distSpatialResolution\">\n               Spatial Resolution <span className=\"field-indicator optional-indicator\">optional</span>\n             </label>\n             <input\n               type=\"text\"\n               id=\"distSpatialResolution\"\n               name=\"distSpatialResolution\"\n               value={currentDistribution.spatialResolution}\n               onChange={(e) => handleDistributionChange('spatialResolution', e.target.value)}\n               onBlur={validateRegularInput}\n               className={`subfield-input ${distSpatialResolutionValid ? 'form-input-valid' : ''}`}\n             />\n           </div>\n           <div className=\"form-group\">\n             <label htmlFor=\"distTemporalResolution\">\n               Temporal Resolution <span className=\"field-indicator optional-indicator\">optional</span>\n             </label>\n             <input\n               type=\"text\"\n               id=\"distTemporalResolution\"\n               name=\"distTemporalResolution\"\n               value={currentDistribution.temporalResolution}\n               onChange={(e) => handleDistributionChange('temporalResolution', e.target.value)}\n               onBlur={validateRegularInput}\n               className={`subfield-input ${distTemporalResolutionValid ? 'form-input-valid' : ''}`}\n             />\n           </div>\n           <div className=\"form-group\">\n             <label htmlFor=\"distReleaseDate\">\n              Release Date <span className=\"field-indicator optional-indicator\">optional</span>\n            </label>\n            <div className=\"date-input-container\">\n              <input\n          onBlur={validateRegularInput}            type=\"text\"\n                id=\"distReleaseDate\"\n                name=\"distReleaseDate\"\n                value={currentDistribution.releaseDate}\n                onChange={(e) => handleDistributionChange('releaseDate', e.target.value)}\n                onBlur={validateDateInput}\n                placeholder=\"YYYY/MM/DD\"\n                className={`date-input subfield-input ${distReleaseDateError ? 'date-input-error' : ''}`}\n              />\n              <input\n          onBlur={validateRegularInput}            type=\"date\"\n                className=\"date-picker-control\"\n                onChange={(e) => handleDatePickerChange(e, 'distReleaseDate')}\n                aria-label=\"Date picker for Release Date\"\n                defaultValue=\"\"\n                tabIndex=\"-1\"\n              />\n            </div>\n            {distReleaseDateError && <div className=\"date-error-message\">{distReleaseDateError}</div>}\n          </div>\n    \n          <div className=\"form-group\">\n            <label htmlFor=\"distModificationDate\">\n              Update/Modification Date <span className=\"field-indicator optional-indicator\">optional</span>\n            </label>\n            <div className=\"date-input-container\">\n              <input\n          onBlur={validateRegularInput}            type=\"text\"\n                id=\"distModificationDate\"\n                name=\"distModificationDate\"\n                value={currentDistribution.modificationDate}\n                onChange={(e) => handleDistributionChange('modificationDate', e.target.value)}\n                onBlur={validateDateInput}\n                placeholder=\"YYYY/MM/DD\"\n                className={`date-input subfield-input ${distModificationDateError ? 'date-input-error' : ''}`}\n              />\n              <input\n          onBlur={validateRegularInput}            type=\"date\"\n                className=\"date-picker-control\"\n                onChange={(e) => handleDatePickerChange(e, 'distModificationDate')}\n                aria-label=\"Date picker for Modification Date\"\n                defaultValue=\"\"\n                tabIndex=\"-1\"\n              />\n            </div>\n            {distModificationDateError && <div className=\"date-error-message\">{distModificationDateError}</div>}\n          </div>\n    \n           \n          \n           <div className=\"distribution-actions\">\n             <button \n               type=\"button\" \n               className={`add-button`}\n               onClick={handleAddDistribution}\n             >\n               Add Distribution\n             </button>\n           </div>\n         </div>\n         \n         <div className=\"form-group\">\n          <label htmlFor=\"restAPI\">\n              REST API <span className=\"field-indicator optional-indicator\">optional, multiple values allowed</span>\n          </label>\n          <div className=\"tag-input-container\">\n              <div className=\"tag-input-row\">\n              <input\n          onBlur={validateRegularInput}              type=\"text\"\n                  id=\"restAPI\"\n                  value={restAPIInput}\n                  onChange={(e) => {\n                    setRestAPIInput(e.target.value);\n                    setRestAPIInputValid(false);\n                  }}\n                  onBlur={() => setRestAPIInputValid(!!restAPIInput.trim())}\n                  onKeyPress={(e) => handleKeyPress(e, 'restAPI', restAPIInput, setRestAPIInput)}\n                  className={`tag-input ${restAPIInputValid ? 'tag-input-valid' : ''}`}\n              />\n              <button \n                  type=\"button\" \n                  className=\"tag-add-button\"\n                  onClick={() => handleAddTag('restAPI', restAPIInput, setRestAPIInput)}\n              >\n                  +\n              </button>\n              </div>\n              <div className=\"tag-list\">\n              {formData.restAPI.map((item, index) => (\n                  <div key={`rest-api-${index}`} className=\"tag-item\">\n                  <span className=\"tag-text\">{item}</span>\n                  <button \n                      type=\"button\"\n                      className=\"tag-remove\"\n                      onClick={() => handleRemoveTag('restAPI', index)}\n                  >\n                      ×\n                  </button>\n                  </div>\n              ))}\n              </div>\n              <div className=\"field-hint\"> </div>\n          </div>\n          </div>\n    \n          {/* SPARQL Endpoints Section */}\n<div className=\"form-section\">\n  <h3 className=\"section-title\">SPARQL Endpoints</h3>\n  <div className=\"field-indicator optional-indicator\">optional, multiple submissions allowed</div>\n  {/* Display existing SPARQL endpoints */}\n  <div className=\"distributions-list\">\n    {sparqlEndpoints.map((endpoint, idx) => (\n      <div key={`sparql-endpoint-${idx}`} className=\"distribution-item\">\n        <div className=\"distribution-header\">\n          <div className=\"distribution-title\">{endpoint.title || '(no title)'}</div>\n          <div className=\"distribution-actions\">\n            <button\n              type=\"button\"\n              className=\"edit-button\"\n              onClick={() => handleEditSparqlEndpoint(idx)}\n              aria-label=\"Edit SPARQL endpoint\"\n            >\n              Edit\n            </button>\n            <button\n              type=\"button\"\n              className=\"tag-remove\"\n              onClick={() => handleRemoveSparqlEndpoint(idx)}\n              aria-label=\"Remove SPARQL endpoint\"\n            >\n              ×\n            </button>\n          </div>\n        </div>\n        <div className=\"distribution-preview\">\n          <div className=\"distribution-field\">\n            <span className=\"field-label\">dcat:DataService:</span>\n            <span className=\"field-value\">{endpoint.dataService}</span>\n          </div>\n          <div className=\"distribution-field\">\n            <span className=\"field-label\">dcat:endpointURL:</span>\n            <span className=\"field-value\">{endpoint.endpointURL}</span>\n          </div>\n          <div className=\"distribution-field\">\n            <span className=\"field-label\">dct:identifier:</span>\n            <span className=\"field-value\">{endpoint.identifier}</span>\n          </div>\n          <div className=\"distribution-field\">\n            <span className=\"field-label\">dct:title:</span>\n            <span className=\"field-value\">{endpoint.title}</span>\n          </div>\n          <div className=\"distribution-field\">\n            <span className=\"field-label\">dcat:endpointDescription:</span>\n            <span className=\"field-value\">{endpoint.endpointDescription}</span>\n          </div>\n          <div className=\"distribution-field\">\n            <span className=\"field-label\">adms:status:</span>\n            <span className=\"field-value\">{endpoint.status}</span>\n          </div>\n        </div>\n      </div>\n    ))}\n  </div>\n  {/* SPARQL Endpoint Form */}\n  <div className=\"distribution-form sparql-endpoint-form\">\n    <div className=\"distribution-form-header\">\n      <h4>Add New SPARQL Endpoint</h4>\n    </div>\n    <div className=\"form-group\">\n      <label htmlFor=\"sparqlDataService\">\n        dcat:DataService <span className=\"field-indicator optional-indicator\">optional</span>\n      </label>\n      <input\n        type=\"text\"\n        id=\"sparqlDataService\"\n        name=\"sparqlDataService\"\n        value={currentSparqlEndpoint.dataService}\n        onChange={e => handleCurrentSparqlEndpointChange('dataService', e.target.value)}\n        onBlur={validateRegularInput}\n        className={`subfield-input ${sparqlDataServiceValid ? 'form-input-valid' : ''}`}\n      />\n    </div>\n    <div className=\"form-group\">\n      <label htmlFor=\"sparqlEndpointURL\">\n        dcat:endpointURL <span className=\"field-indicator optional-indicator\">optional</span>\n      </label>\n      <input\n        type=\"text\"\n        id=\"sparqlEndpointURL\"\n        name=\"sparqlEndpointURL\"\n        value={currentSparqlEndpoint.endpointURL}\n        onChange={e => handleCurrentSparqlEndpointChange('endpointURL', e.target.value)}\n        onBlur={validateIriInput}\n        className={`subfield-input ${sparqlEndpointURLError ? 'form-input-error' : ''} ${sparqlEndpointURLValid ? 'form-input-valid' : ''}`}\n      />\n      {sparqlEndpointURLError && <div className=\"iri-error-message\">{sparqlEndpointURLError}</div>}\n    </div>\n    <div className=\"form-group\">\n      <label htmlFor=\"sparqlIdentifier\">\n        dct:identifier <span className=\"field-indicator optional-indicator\">optional</span>\n      </label>\n      <input\n        type=\"text\"\n        id=\"sparqlIdentifier\"\n        name=\"sparqlIdentifier\"\n        value={currentSparqlEndpoint.identifier}\n        onChange={e => handleCurrentSparqlEndpointChange('identifier', e.target.value)}\n        onBlur={validateRegularInput}\n        className={`subfield-input ${sparqlIdentifierValid ? 'form-input-valid' : ''}`}\n      />\n    </div>\n    <div className=\"form-group\">\n      <label htmlFor=\"sparqlTitle\">\n        dct:title <span className=\"field-indicator optional-indicator\">optional</span>\n      </label>\n      <input\n        type=\"text\"\n        id=\"sparqlTitle\"\n        name=\"sparqlTitle\"\n        value={currentSparqlEndpoint.title}\n        onChange={e => handleCurrentSparqlEndpointChange('title', e.target.value)}\n        onBlur={validateRegularInput}\n        className={`subfield-input ${sparqlTitleValid ? 'form-input-valid' : ''}`}\n      />\n    </div>\n    <div className=\"form-group\">\n      <label htmlFor=\"sparqlEndpointDescription\">\n        dcat:endpointDescription <span className=\"field-indicator optional-indicator\">optional</span>\n      </label>\n      <input\n        type=\"text\"\n        id=\"sparqlEndpointDescription\"\n        name=\"sparqlEndpointDescription\"\n        value={currentSparqlEndpoint.endpointDescription}\n        onChange={e => handleCurrentSparqlEndpointChange('endpointDescription', e.target.value)}\n        onBlur={validateRegularInput}\n        className={`subfield-input ${sparqlEndpointDescriptionValid ? 'form-input-valid' : ''}`}\n      />\n    </div>\n    <div className=\"form-group\">\n      <label htmlFor=\"sparqlStatus\">\n        adms:status <span className=\"field-indicator optional-indicator\">optional</span>\n      </label>\n      <input\n        type=\"text\"\n        id=\"sparqlStatus\"\n        name=\"sparqlStatus\"\n        value={currentSparqlEndpoint.status}\n        onChange={e => handleCurrentSparqlEndpointChange('status', e.target.value)}\n        onBlur={validateRegularInput}\n        className={`subfield-input ${sparqlStatusValid ? 'form-input-valid' : ''}`}\n      />\n    </div>\n    <div className=\"distribution-actions\">\n      <button\n        type=\"button\"\n        className=\"add-button\"\n        onClick={handleAddSparqlEndpoint}\n      >\n        {editingSparqlEndpointIdx !== null ? 'Save SPARQL Endpoint' : 'Add SPARQL Endpoint'}\n      </button>\n      {editingSparqlEndpointIdx !== null && (\n        <button\n          type=\"button\"\n          className=\"cancel-button\"\n          onClick={handleCancelEditSparqlEndpoint}\n        >\n          Cancel\n        </button>\n      )}\n    </div>\n  </div>\n</div>\n    \n          {/* Example Queries [0,∞] - Optional, multiple values */}\n          <div className=\"form-group\">\n          <label htmlFor=\"exampleQueries\">\n              Example Queries <span className=\"field-indicator optional-indicator\">optional, multiple values allowed</span>\n          </label>\n          <div className=\"tag-input-container\">\n              <div className=\"tag-input-row\">\n              <input\n          onBlur={validateRegularInput}              type=\"text\"\n                  id=\"exampleQueries\"\n                  value={exampleQueriesInput}\n                  onChange={(e) => setExampleQueriesInput(e.target.value)}\n                  onKeyPress={(e) => handleKeyPress(e, 'exampleQueries', exampleQueriesInput, setExampleQueriesInput)}\n                  \n              />\n              <button \n                  type=\"button\" \n                  className=\"tag-add-button\"\n                  onClick={() => handleAddTag('exampleQueries', exampleQueriesInput, setExampleQueriesInput)}\n              >\n                  +\n              </button>\n              </div>\n              <div className=\"tag-list\">\n              {formData.exampleQueries.map((item, index) => (\n                  <div key={`example-query-${index}`} className=\"tag-item\">\n                  <span className=\"tag-text\">{item}</span>\n                  <button \n                      type=\"button\"\n                      className=\"tag-remove\"\n                      onClick={() => handleRemoveTag('exampleQueries', index)}\n                  >\n                      ×\n                  </button>\n                  </div>\n              ))}\n              </div>\n              <div className=\"field-hint\"> </div>\n          </div>\n      </div>\n    \n         {/* Keywords [1,∞] - Required, multiple values */}\n         <div className=\"form-group\">\n           <label htmlFor=\"keywords\">\n             Keywords <span className=\"field-indicator required-indicator\">required, multiple values allowed</span>\n           </label>\n           <div className=\"tag-input-container\">\n             <div className=\"tag-input-row\">\n               <input\n          onBlur={validateRegularInput}             type=\"text\"\n                 id=\"keywords\"\n                 value={keywordsInput}\n                 onChange={(e) => setKeywordsInput(e.target.value)}\n                 onKeyPress={(e) => handleKeyPress(e, 'keywords', keywordsInput, setKeywordsInput)}\n                 \n               />\n               <button \n                 type=\"button\" \n                 className=\"tag-add-button\"\n                 onClick={() => handleAddTag('keywords', keywordsInput, setKeywordsInput)}\n               >\n                 +\n               </button>\n             </div>\n             <div className=\"tag-list\">\n               {formData.keywords.map((keyword, index) => (\n                 <div key={`keyword-${index}`} className=\"tag-item\">\n                   <span className=\"tag-text\">{keyword}</span>\n                   <button \n                     type=\"button\"\n                     className=\"tag-remove\"\n                     onClick={() => handleRemoveTag('keywords', index)}\n                   >\n                     ×\n                   </button>\n                 </div>\n               ))}\n             </div>\n             <div className=\"field-hint\"> </div>\n           </div>\n         </div>\n    \n         {/* Category [0,∞] - Optional, multiple values */}\n         <div className=\"form-group\">\n           <label htmlFor=\"category\">\n             Category <span className=\"field-indicator optional-indicator\">optional (IRI), multiple values allowed</span>\n           </label>\n           <div className=\"tag-input-container\">\n             <div className=\"tag-input-row\">\n             <input\n                    type=\"text\"\n                    id=\"category\"\n                    name=\"categoryInput\"\n                    value={categoryInput}\n                    onChange={(e) => {\n                      setCategoryInput(e.target.value);\n                      setCategoryInputError('');\n                      setCategoryInputValid(false);\n                    }}\n                    onBlur={validateIriInput}\n                    onKeyUp={(e) => handleKeyPress(e, 'category', categoryInput, setCategoryInput, setCategoryInputError)}\n                    className={`${categoryInputError ? 'tag-input-error' : ''} ${categoryInputValid ? 'tag-input-valid' : ''}`}\n                  />\n                  {categoryInputError && <div className=\"iri-error-message\">{categoryInputError}</div>}\n\n               <button \n                 type=\"button\" \n                 className=\"tag-add-button\"\n                 onClick={() => handleAddTag('category', categoryInput, setCategoryInput)}\n               >\n                 +\n               </button>\n             </div>\n             <div className=\"tag-list\">\n               {formData.category.map((cat, index) => (\n                 <div key={`category-${index}`} className=\"tag-item\">\n                   <span className=\"tag-text\">{cat}</span>\n                   <button \n                     type=\"button\"\n                     className=\"tag-remove\"\n                     onClick={() => handleRemoveTag('category', index)}\n                   >\n                     ×\n                   </button>\n                 </div>\n               ))}\n             </div>\n             <div className=\"field-hint\"> </div>\n           </div>\n         </div>\n    \n         {/* Publication/References [0,∞] - Optional, multiple values */}\n         <div className=\"form-group\">\n           <label htmlFor=\"publicationReferences\">\n             Publication/References <span className=\"field-indicator optional-indicator\">optional (IRI), multiple values allowed</span>\n           </label>\n           <div className=\"tag-input-container\">\n             <div className=\"tag-input-row\">\n             <input\n                type=\"text\"\n                id=\"publicationReferences\"\n                name=\"publicationReferencesInput\"\n                value={publicationReferencesInput}\n                onChange={(e) => {\n                  setPublicationReferencesInput(e.target.value);\n                  setPublicationReferencesInputError('');\n                  setPublicationReferencesInputValid(false);\n                }}\n                onBlur={validateIriInput}\n                onKeyPress={(e) => handleKeyPress(e, 'publicationReferences', publicationReferencesInput, setPublicationReferencesInput, setPublicationReferencesInputError)}\n                className={`${publicationReferencesInputError ? 'tag-input-error' : ''} ${publicationReferencesInputValid ? 'tag-input-valid' : ''}`}\n              />\n              {publicationReferencesInputError && <div className=\"iri-error-message\">{publicationReferencesInputError}</div>}\n\n               <button \n                 type=\"button\" \n                 className=\"tag-add-button\"\n                 onClick={() => handleAddTag('publicationReferences', publicationReferencesInput, setPublicationReferencesInput)}\n               >\n                 +\n               </button>\n             </div>\n             <div className=\"tag-list\">\n               {formData.publicationReferences.map((ref, index) => (\n                 <div key={`pub-ref-${index}`} className=\"tag-item\">\n                   <span className=\"tag-text\">{ref}</span>\n                   <button \n                     type=\"button\"\n                     className=\"tag-remove\"\n                     onClick={() => handleRemoveTag('publicationReferences', index)}\n                   >\n                     ×\n                   </button>\n                 </div>\n               ))}\n             </div>\n             <div className=\"field-hint\"> </div>\n           </div>\n         </div>\n    \n         {/* Language [1,∞] - Required, multiple values */}\n         <div className=\"form-group\">\n           <label htmlFor=\"language\">\n             Language <span className=\"field-indicator required-indicator\">required, multiple values allowed</span>\n           </label>\n           <div className=\"tag-input-container\">\n             <div className=\"tag-input-row\">\n               <input\n          onBlur={validateRegularInput}             type=\"text\"\n                 id=\"language\"\n                 value={languageInput}\n                 onChange={(e) => setLanguageInput(e.target.value)}\n                 onKeyPress={(e) => handleKeyPress(e, 'language', languageInput, setLanguageInput)}\n                 \n               />\n               <button \n                 type=\"button\" \n                 className=\"tag-add-button\"\n                 onClick={() => handleAddTag('language', languageInput, setLanguageInput)}\n               >\n                 +\n               </button>\n             </div>\n             <div className=\"tag-list\">\n               {formData.language.map((lang, index) => (\n                 <div key={`language-${index}`} className=\"tag-item\">\n                   <span className=\"tag-text\">{lang}</span>\n                   <button \n                     type=\"button\"\n                     className=\"tag-remove\"\n                     onClick={() => handleRemoveTag('language', index)}\n                   >\n                     ×\n                   </button>\n                 </div>\n               ))}\n             </div>\n             <div className=\"field-hint\"> </div>\n           </div>\n         </div>\n    \n         {/* IRI Template [0,∞] - Optional, multiple values */}\n         <div className=\"form-group\">\n           <label htmlFor=\"iriTemplate\">\n             IRI Template <span className=\"field-indicator optional-indicator\">optional, multiple values allowed</span>\n           </label>\n           <div className=\"tag-input-container\">\n             <div className=\"tag-input-row\">\n               <input\n          onBlur={validateRegularInput}             type=\"text\"\n                 id=\"iriTemplate\"\n                 value={iriTemplateInput}\n                 onChange={(e) => setIriTemplateInput(e.target.value)}\n                 onKeyPress={(e) => handleKeyPress(e, 'iriTemplate', iriTemplateInput, setIriTemplateInput)}\n                 \n               />\n               <button \n                 type=\"button\" \n                 className=\"tag-add-button\"\n                 onClick={() => handleAddTag('iriTemplate', iriTemplateInput, setIriTemplateInput)}\n               >\n                 +\n               </button>\n             </div>\n             <div className=\"tag-list\">\n               {formData.iriTemplate.map((iri, index) => (\n                 <div key={`iri-${index}`} className=\"tag-item\">\n                   <span className=\"tag-text\">{iri}</span>\n                   <button \n                     type=\"button\"\n                     className=\"tag-remove\"\n                     onClick={() => handleRemoveTag('iriTemplate', index)}\n                   >\n                     ×\n                   </button>\n                 </div>\n               ))}\n             </div>\n             <div className=\"field-hint\"> </div>\n           </div>\n         </div>\n    \n         {/* Linked Resources [0,∞] - Optional, multiple values */}\n         <div className=\"form-group\">\n           <label htmlFor=\"linkedResources\">\n             Linked Resources <span className=\"field-indicator optional-indicator\">optional, multiple values allowed</span>\n           </label>\n           <div className=\"tag-input-container\">\n             <div className=\"tag-input-row\">\n               <input\n          onBlur={validateRegularInput}             type=\"text\"\n                 id=\"linkedResources\"\n                 value={linkedResourcesInput}\n                 onChange={(e) => setLinkedResourcesInput(e.target.value)}\n                 onKeyPress={(e) => handleKeyPress(e, 'linkedResources', linkedResourcesInput, setLinkedResourcesInput)}\n                 \n               />\n               <button \n                 type=\"button\" \n                 className=\"tag-add-button\"\n                 onClick={() => handleAddTag('linkedResources', linkedResourcesInput, setLinkedResourcesInput)}\n               >\n                 +\n               </button>\n             </div>\n             <div className=\"tag-list\">\n               {formData.linkedResources.map((resource, index) => (\n                 <div key={`linked-resource-${index}`} className=\"tag-item\">\n                   <span className=\"tag-text\">{resource}</span>\n                   <button \n                     type=\"button\"\n                     className=\"tag-remove\"\n                     onClick={() => handleRemoveTag('linkedResources', index)}\n                   >\n                     ×\n                   </button>\n                 </div>\n               ))}\n             </div>\n             <div className=\"field-hint\"> </div>\n           </div>\n         </div>\n    \n         {/* Example Resource [0,∞] - Optional, multiple values */}\n         <div className=\"form-group\">\n           <label htmlFor=\"exampleResource\">\n             Example Resource <span className=\"field-indicator optional-indicator\">optional, multiple values allowed</span>\n           </label>\n           <div className=\"tag-input-container\">\n             <div className=\"tag-input-row\">\n               <input\n          onBlur={validateRegularInput}             type=\"text\"\n                 id=\"exampleResource\"\n                 value={exampleResourceInput}\n                 onChange={(e) => setExampleResourceInput(e.target.value)}\n                 onKeyPress={(e) => handleKeyPress(e, 'exampleResource', exampleResourceInput, setExampleResourceInput)}\n                 \n               />\n               <button \n                 type=\"button\" \n                 className=\"tag-add-button\"\n                 onClick={() => handleAddTag('exampleResource', exampleResourceInput, setExampleResourceInput)}\n               >\n                 +\n               </button>\n             </div>\n             <div className=\"tag-list\">\n               {formData.exampleResource.map((example, index) => (\n                 <div key={`example-resource-${index}`} className=\"tag-item\">\n                   <span className=\"tag-text\">{example}</span>\n                   <button \n                     type=\"button\"\n                     className=\"tag-remove\"\n                     onClick={() => handleRemoveTag('exampleResource', index)}\n                   >\n                     ×\n                   </button>\n                 </div>\n               ))}\n             </div>\n             <div className=\"field-hint\"> </div>\n           </div>\n         </div>\n    \n         {/* Access Statement [1] - Required, single value */}\n         <div className=\"form-group\">\n           <label htmlFor=\"accessStatement\">\n             Access Statement <span className=\"field-indicator required-indicator\">required (IRI), 1 value only</span>\n           </label>\n           <textarea\n                id=\"accessStatement\"\n                name=\"accessStatement\"\n                value={formData.accessStatement}\n                onChange={(e) => {\n                  handleChange(e);\n                  setAccessStatementError('');\n                  setAccessStatementValid(false);\n                }}\n                onBlur={validateIriInput}\n                required\n                rows=\"3\"\n                className={`form-control ${accessStatementValid ? 'form-input-valid' : ''} ${accessStatementError ? 'form-input-error' : ''}`}\n              ></textarea>\n            {accessStatementError && <div className=\"iri-error-message\">{accessStatementError}</div>}\n\n         </div>\n    \n         {/* Source [0,∞] - Optional, multiple values */}\n         <div className=\"form-group\">\n           <label htmlFor=\"source\">\n             Source <span className=\"field-indicator optional-indicator\">optional (IRI), multiple values allowed</span>\n           </label>\n           <div className=\"tag-input-container\">\n             <div className=\"tag-input-row\">\n             <input\n                  type=\"text\"\n                  id=\"source\"\n                  name=\"sourceInput\"\n                  value={sourceInput}\n                  onChange={(e) => {\n                    setSourceInput(e.target.value);\n                    setSourceInputError('');\n                    setSourceInputValid(false);\n                  }}\n                  onBlur={validateIriInput}\n                  onKeyPress={(e) => handleKeyPress(e, 'source', sourceInput, setSourceInput, setSourceInputError)}\n                  className={`${sourceInputError ? 'tag-input-error' : ''} ${sourceInputValid ? 'tag-input-valid' : ''}`}\n            />\n            {sourceInputError && <div className=\"iri-error-message\">{sourceInputError}</div>}\n\n                              <button \n                 type=\"button\" \n                 className=\"tag-add-button\"\n                 onClick={() => handleAddTag('source', sourceInput, setSourceInput)}\n               >\n                 +\n               </button>\n             </div>\n             <div className=\"tag-list\">\n               {formData.source.map((src, index) => (\n                 <div key={`source-${index}`} className=\"tag-item\">\n                   <span className=\"tag-text\">{src}</span>\n                   <button \n                     type=\"button\"\n                     className=\"tag-remove\"\n                     onClick={() => handleRemoveTag('source', index)}\n                   >\n                     ×\n                   </button>\n                 </div>\n               ))}\n             </div>\n             <div className=\"field-hint\"> </div>\n           </div>\n         </div>\n    \n         {/* Name Space [0,∞] - Optional, multiple values */}\n         <div className=\"form-group\">\n           <label htmlFor=\"nameSpace\">\n             Name Space <span className=\"field-indicator optional-indicator\">optional, multiple values allowed</span>\n           </label>\n           <div className=\"tag-input-container\">\n             <div className=\"tag-input-row\">\n               <input\n          onBlur={validateRegularInput}             type=\"text\"\n                 id=\"nameSpace\"\n                 value={nameSpaceInput}\n                 onChange={(e) => setNameSpaceInput(e.target.value)}\n                 onKeyPress={(e) => handleKeyPress(e, 'nameSpace', nameSpaceInput, setNameSpaceInput)}\n                 \n               />\n               <button \n                 type=\"button\" \n                 className=\"tag-add-button\"\n                 onClick={() => handleAddTag('nameSpace', nameSpaceInput, setNameSpaceInput)}\n               >\n                 +\n               </button>\n             </div>\n             <div className=\"tag-list\">\n               {formData.nameSpace.map((ns, index) => (\n                 <div key={`namespace-${index}`} className=\"tag-item\">\n                   <span className=\"tag-text\">{ns}</span>\n                   <button \n                     type=\"button\"\n                     className=\"tag-remove\"\n                     onClick={() => handleRemoveTag('nameSpace', index)}\n                   >\n                     ×\n                   </button>\n                 </div>\n               ))}\n             </div>\n             <div className=\"field-hint\"> </div>\n           </div>\n         </div>\n       </form>\n       </div>\n     \n     <div className=\"modal-footer\">\n       <button \n         className=\"cancel-button\"\n         onClick={onClose}\n       >\n         Cancel\n       </button>\n    \n       <button \n        className=\"save-draft-button\"\n      onClick={handleSaveDraft}\n      >\n        Save Draft\n      </button>\n    \n       <button \n         className=\"submit-button\"\n         onClick={handleSubmit}\n         disabled={isSubmitting}\n       >\n         {isSubmitting ? 'Submitting...' : 'Submit'}\n       </button>\n     </div>\n    </div>\n    </div>\n    );\n    }\n    \n\nexport default ModalForm;\n","// src/components/DataTable.js\nimport React from 'react';\n\nfunction DataTable({ submissions }) {\n  const downloadJSON = () => {\n    if (submissions.length === 0) {\n      alert('No data to export');\n      return;\n    }\n    \n    // Add browser type and ensure timestamp for all submissions\n    const enrichedData = submissions.map(submission => ({\n      ...submission,\n      browserType: navigator.userAgent,\n      timestamp: submission.timestamp || submission.date || new Date().toISOString(),\n      exportDate: new Date().toISOString()\n    }));\n    \n    // Convert to JSON string with proper formatting\n    const jsonData = JSON.stringify(enrichedData, null, 2);\n    \n    // Create download\n    const blob = new Blob([jsonData], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    \n    link.setAttribute('href', url);\n    link.setAttribute('download', `kg-metadata-${new Date().toISOString().slice(0,10)}.json`);\n    link.style.visibility = 'hidden';\n    \n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  const clearSubmissions = () => {\n    if (window.confirm('Are you sure you want to clear all metadata? This cannot be undone.')) {\n      localStorage.removeItem('kg-metadata-submissions');\n      window.location.reload(); // Reload to update the UI\n    }\n  };\n\n  return (\n    <div className=\"data-table-container\">\n      <div className=\"table-header\">\n        <h2>Metadata Submissions ({submissions.length})</h2>\n        <div className=\"table-actions\">\n          <button \n            onClick={downloadJSON}\n            disabled={submissions.length === 0}\n            className=\"download-button\"\n          >\n            Export JSON\n          </button>\n          <button \n            onClick={clearSubmissions}\n            disabled={submissions.length === 0}\n            className=\"clear-button\"\n          >\n            Clear All\n          </button>\n        </div>\n      </div>\n      \n      {submissions.length > 0 ? (\n        <div className=\"table-scroll\">\n          <table className=\"data-table\">\n            <thead>\n              <tr>\n                <th>Title</th>\n                <th>Description</th>\n                <th>Type</th>\n                <th>Date Submitted</th>\n              </tr>\n            </thead>\n            <tbody>\n              {submissions.map((item, index) => (\n                <tr key={index}>\n                  <td>{item.name}</td>\n                  <td>{item.description}</td>\n                  <td>{item.type}</td>\n                  <td>{new Date(item.date).toLocaleString()}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      ) : (\n        <p className=\"no-data\">No metadata submissions yet</p>\n      )}\n    </div>\n  );\n}\n\nexport default DataTable;","import React, { useState, useEffect, useImperativeHandle, forwardRef } from 'react';\n\n\nconst SavedDrafts = forwardRef(({ onLoadDraft }, ref) => {\n  const [drafts, setDrafts] = useState([]);\n  \n  const loadDrafts = () => {\n    try {\n      const draftsString = localStorage.getItem('kg-metadata-drafts');\n      if (draftsString) {\n        \n        const parsedDrafts = JSON.parse(draftsString);\n        \n        \n        parsedDrafts.sort((a, b) => {\n          const dateA = new Date(a.date);\n          const dateB = new Date(b.date);\n          return dateB - dateA; // Descending order (newest first)\n        });\n        \n        setDrafts(parsedDrafts);\n      } else {\n        setDrafts([]);\n      }\n    } catch (error) {\n      console.error('Error loading saved drafts:', error);\n      setDrafts([]);\n    }\n  };\n  \n  useEffect(() => {\n    loadDrafts();\n  }, []);\n  \n  useImperativeHandle(ref, () => ({\n    refreshDrafts: loadDrafts\n  }));\n  \n  const handleDeleteDraft = (id, e) => {\n    e.stopPropagation(); // Prevent triggering row click\n    \n    if (window.confirm('Are you sure you want to delete this draft?')) {\n      // Filter out the draft to delete\n      const updatedDrafts = drafts.filter(draft => draft.id !== id);\n      \n      // Save back to localStorage\n      localStorage.setItem('kg-metadata-drafts', JSON.stringify(updatedDrafts));\n      \n      // Update state\n      setDrafts(updatedDrafts);\n    }\n  };\n  \n  const handleLoadDraft = (draft) => {\n    // Call the onLoadDraft callback directly without confirmation\n    onLoadDraft(draft.formData);\n  };\n  \n  const clearAllDrafts = () => {\n    if (window.confirm('Are you sure you want to delete all drafts? This cannot be undone.')) {\n      localStorage.removeItem('kg-metadata-drafts');\n      setDrafts([]);\n    }\n  };\n\n  const formatDate = (dateString) => {\n    if (!dateString) return '';\n    try {\n      const date = new Date(dateString);\n      const dateFormatted = date.toISOString().split('T')[0];\n      \n      const hours = date.getHours().toString().padStart(2, '0');\n      const minutes = date.getMinutes().toString().padStart(2, '0');\n      \n      return `${dateFormatted} ${hours}:${minutes}`;\n    } catch (e) {\n      return dateString;\n    }\n  };\n\n  return (\n    <div className=\"data-table-container\">\n      <div className=\"table-header\">\n        <h2>Saved Drafts ({drafts.length})</h2>\n        <div className=\"table-actions\">\n          <button \n            onClick={clearAllDrafts}\n            disabled={drafts.length === 0}\n            className=\"clear-button\"\n          >\n            Clear All\n          </button>\n        </div>\n      </div>\n      \n      {drafts.length > 0 ? (\n        <div className=\"table-scroll\">\n          <table className=\"data-table\">\n            <thead>\n              <tr>\n                <th>Title</th>\n                <th>Date Last Saved</th>\n                <th>Actions</th>\n              </tr>\n            </thead>\n            <tbody>\n              {drafts.map((draft) => (\n                <tr \n                  key={draft.id} \n                  onClick={() => handleLoadDraft(draft)}\n                  style={{ cursor: 'pointer' }}\n                >\n                  <td>{draft.name}</td>\n                  <td>{formatDate(draft.date)}</td>\n                  <td>\n                    <div className=\"draft-actions\">\n                      <button \n                        className=\"load-button\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          handleLoadDraft(draft);\n                        }}\n                      >\n                        Load\n                      </button>\n                      <button \n                        className=\"delete-button\"\n                        onClick={(e) => handleDeleteDraft(draft.id, e)}\n                      >\n                        Delete\n                      </button>\n                    </div>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      ) : (\n        <p className=\"no-data\">No saved drafts</p>\n      )}\n    </div>\n  );\n});\n\nexport default SavedDrafts;","// src/App.js\nimport React, { useState, useEffect, useRef } from 'react';\nimport ModalForm from './components/ModalForm';\nimport DataTable from './components/DataTable';\nimport SavedDrafts from './components/SavedDrafts';\nimport './App.css';\n\nfunction App() {\n  const [submissions, setSubmissions] = useState([]);\n  const [showModal, setShowModal] = useState(false);\n  const [draftToLoad, setDraftToLoad] = useState(null);\n  \n  // Create a ref for the SavedDrafts component\n  const savedDraftsRef = useRef(null);\n  \n  // Load any saved submissions from localStorage on component mount\n  useEffect(() => {\n    const savedSubmissions = localStorage.getItem('kg-metadata-submissions');\n    if (savedSubmissions) {\n      try {\n        setSubmissions(JSON.parse(savedSubmissions));\n      } catch (error) {\n        console.error('Error loading saved submissions:', error);\n      }\n    }\n  }, []);\n  \n  // Save submissions to localStorage whenever they change\n  useEffect(() => {\n    if (submissions.length > 0) {\n      localStorage.setItem('kg-metadata-submissions', JSON.stringify(submissions));\n    }\n  }, [submissions]);\n  \n  // Handle loading a draft\n  const handleLoadDraft = (formData) => {\n    setDraftToLoad(formData);\n    setShowModal(true);\n  };\n  \n  // Handle drafts being saved\n  const handleDraftSaved = () => {\n    // Refresh the saved drafts display\n    if (savedDraftsRef.current) {\n      savedDraftsRef.current.refreshDrafts();\n    }\n  };\n  \n  // Handle opening the modal with a new form\n  const handleOpenModal = () => {\n    setDraftToLoad(null); // Reset any loaded draft\n    setShowModal(true);\n  };\n  \n  // Handle closing the modal\n  const handleCloseModal = () => {\n    setShowModal(false);\n    setDraftToLoad(null); // Reset the loaded draft when closing\n  };\n  \n  // Handle form submission\n  const handleSubmission = async (formData) => {\n    try {\n      // Create submission with complete data and metadata\n      const timestamp = new Date().toISOString();\n      \n      const submission = {\n        // Display data for the table\n        name: formData.title,\n        description: formData.description,\n        type: \"KG-Metadata\",\n        date: timestamp,\n        \n        // Complete form data\n        formData: {\n          ...formData,\n          timestamp: timestamp,\n          browserType: navigator.userAgent,\n          submissionId: `kg-meta-${Date.now()}`\n        }\n      };\n      \n      // Add to submissions\n      const newSubmissions = [...submissions, submission];\n      setSubmissions(newSubmissions);\n      \n      return { success: true, message: 'Metadata submitted successfully!' };\n    } catch (error) {\n      console.error('Error submitting form:', error);\n      return { \n        success: false, \n        message: 'Error submitting metadata. Please try again.' \n      };\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Knowledge Graph Metadata</h1>\n      </header>\n      <main>\n        <div className=\"form-container\">\n          <button \n            className=\"submit-button\" \n            onClick={handleOpenModal}\n            style={{ width: 'auto' }}\n          >\n            Submit Metadata Form\n          </button>\n        </div>\n        <DataTable submissions={submissions} />\n        \n        {/* Add SavedDrafts component below DataTable */}\n        <div className=\"saved-drafts-section\">\n          <SavedDrafts \n            ref={savedDraftsRef}\n            onLoadDraft={handleLoadDraft} \n          />\n        </div>\n        \n        {showModal && (\n          <ModalForm \n            onSubmit={handleSubmission} \n            onClose={handleCloseModal}\n            initialFormData={draftToLoad}\n            onDraftSaved={handleDraftSaved}\n          />\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}