{"version":3,"sources":["fieldInstructions.js","components/ModalForm.js","components/DataTable.js","components/SavedDrafts.js","App.js","reportWebVitals.js","index.js"],"names":["fieldInstructions","identifier","type","title","alternativeTitle","acronym","description","homepageURL","otherPages","roleCreator","rolePublisher","roleFunder","prov:qualifiedAttribution","createdDate","modifiedDate","publishedDate","vocabulariesUsed","metadataSchema","primaryReferenceDocument","metaGraph","statistics","distTitle","distReleaseDate","distModificationDate","restAPI","sparqlEndpoint","exampleQueries","version","license","keywords","category","publicationReferences","language","iriTemplate","linkedResources","exampleResource","accessStatement","source","nameSpace","categoryInput","distAccessService","distAccessURL","distByteSize","distCompressionFormat","distDescription","distDownloadURL","distHasPolicy","distLicense","distMediaType","distPackagingFormat","linkedResourceTarget","linkedResourceTriples","distRights","distSpatialResolution","distTemporalResolution","distIssued","exampleResourceAccessURL","exampleResourceDescription","exampleResourceMediaType","exampleResourceStatus","exampleResourceTitle","homepageURLInput","metadataSchemaInput","otherPagesInput","primaryReferenceDocInput","publicationReferencesInput","roleCreatorAgent","roleCreatorGivenName","roleCreatorMbox","roleFunderAgent","roleFunderGivenName","roleFunderMbox","rolePublisherAgent","rolePublisherGivenName","rolePublisherMbox","sourceInput","sparqlDataService","sparqlEndpointDescription","sparqlEndpointURL","sparqlIdentifier","sparqlStatus","sparqlTitle","vocabulariesUsedInput","roleType","roleAgent","roleGivenName","roleMbox","ModalForm","_ref","onSubmit","onClose","initialFormData","onDraftSaved","initialFormState","uuidv4","roles","distributions","formData","setFormData","useState","isSubmitting","setIsSubmitting","message","setMessage","alternativeTitleInput","setAlternativeTitleInput","acronymInput","setAcronymInput","setHomepageURLInput","setOtherPagesInput","modifiedDateInput","setModifiedDateInput","setPrimaryReferenceDocInput","statisticsInput","setStatisticsInput","keywordsInput","setKeywordsInput","setCategoryInput","setPublicationReferencesInput","languageInput","setLanguageInput","iriTemplateInput","setIriTemplateInput","emptyLinkedResource","target","triples","currentLinkedResource","setCurrentLinkedResource","setLinkedResources","editingLinkedResourceIdx","setEditingLinkedResourceIdx","linkedResourceTargetValid","setLinkedResourceTargetValid","linkedResourceTriplesValid","setLinkedResourceTriplesValid","exampleResourceInput","setExampleResourceInput","setSourceInput","nameSpaceInput","setNameSpaceInput","imageFileName","setImageFileName","currentRole","setCurrentRole","inputMode","agent","givenName","mbox","fileInputRef","useRef","createdDateError","setCreatedDateError","publishedDateError","setPublishedDateError","modifiedDateError","setModifiedDateError","distReleaseDateError","setDistReleaseDateError","distModificationDateError","setDistModificationDateError","currentDistribution","setCurrentDistribution","mediaType","downloadURL","accessURL","accessService","byteSize","compressionFormat","packagingFormat","hasPolicy","rights","spatialResolution","temporalResolution","releaseDate","modificationDate","issued","setVocabulariesUsedInput","setMetadataSchemaInput","restAPIInput","setRestAPIInput","exampleQueriesInput","setExampleQueriesInput","emptySparqlEndpoint","dataService","endpointURL","endpointDescription","status","currentSparqlEndpoint","setCurrentSparqlEndpoint","sparqlEndpoints","setSparqlEndpoints","editingSparqlEndpointIdx","setEditingSparqlEndpointIdx","sparqlDataServiceValid","setSparqlDataServiceValid","sparqlEndpointURLValid","setSparqlEndpointURLValid","sparqlEndpointURLError","setSparqlEndpointURLError","sparqlIdentifierValid","setSparqlIdentifierValid","sparqlTitleValid","setSparqlTitleValid","sparqlEndpointDescriptionValid","setSparqlEndpointDescriptionValid","sparqlStatusValid","setSparqlStatusValid","emptyExampleResource","currentExampleResource","setCurrentExampleResource","exampleResources","setExampleResources","editingExampleResourceIdx","setEditingExampleResourceIdx","exampleResourceAccessURLValid","setExampleResourceAccessURLValid","exampleResourceAccessURLError","setExampleResourceAccessURLError","exampleResourceTitleValid","setExampleResourceTitleValid","exampleResourceMediaTypeValid","setExampleResourceMediaTypeValid","exampleResourceDescriptionValid","setExampleResourceDescriptionValid","exampleResourceStatusValid","setExampleResourceStatusValid","handleCurrentSparqlEndpointChange","field","value","prev","[object Object]","handleCurrentExampleResourceChange","handleKeyPress","e","tagType","inputValue","setInputFunction","key","preventDefault","handleAddTag","resetSparqlEndpointForm","resetExampleResourceForm","handleCurrentLinkedResourceChange","acronymInputValid","setAcronymInputValid","metaGraphInput","setMetaGraphInput","homepageURLInputError","setHomepageURLInputError","otherPagesInputError","setOtherPagesInputError","primaryReferenceDocInputError","setPrimaryReferenceDocInputError","metaGraphInputError","setMetaGraphInputError","statisticsInputError","setStatisticsInputError","categoryInputError","setCategoryInputError","publicationReferencesInputError","setPublicationReferencesInputError","sourceInputError","setSourceInputError","createdDateValid","setCreatedDateValid","publishedDateValid","setPublishedDateValid","modifiedDateValid","setModifiedDateValid","homepageURLInputValid","setHomepageURLInputValid","otherPagesInputValid","setOtherPagesInputValid","primaryReferenceDocInputValid","setPrimaryReferenceDocInputValid","statisticsInputValid","setStatisticsInputValid","categoryInputValid","setCategoryInputValid","publicationReferencesInputValid","setPublicationReferencesInputValid","sourceInputValid","setSourceInputValid","titleValid","setTitleValid","descriptionValid","setDescriptionValid","typeValid","setTypeValid","licenseValid","setLicenseValid","versionValid","setVersionValid","accessStatementValid","setAccessStatementValid","keywordsInputValid","setKeywordsInputValid","nameSpaceInputValid","setNameSpaceInputValid","languageInputValid","setLanguageInputValid","iriTemplateInputValid","setIriTemplateInputValid","restAPIInputValid","setRestAPIInputValid","exampleQueriesInputValid","setExampleQueriesInputValid","distReleaseDateValid","setDistReleaseDateValid","distModificationDateValid","setDistModificationDateValid","alternativeTitleInputValid","setAlternativeTitleInputValid","distLicenseValid","setDistLicenseValid","distRightsValid","setDistRightsValid","distSpatialResolutionValid","setDistSpatialResolutionValid","distTemporalResolutionValid","setDistTemporalResolutionValid","distCompressionFormatValid","setDistCompressionFormatValid","distPackagingFormatValid","setDistPackagingFormatValid","distHasPolicyValid","setDistHasPolicyValid","useEffect","customLicenseInput","setCustomLicenseInput","startsWith","customPart","substring","document","body","style","overflow","querySelectorAll","forEach","label","fieldId","getAttribute","setAttribute","timeoutId","setTimeout","clearTimeout","isValidIriString","iriString","console","log","trim","trimmed","test","match","length","validateIriInput","name","setErrorFunc","setVocabulariesUsedInputError","setMetadataSchemaInputError","setLicenseError","setAccessStatementError","currentRoleAgent","setCurrentRoleAgentError","setDistDownloadURLError","setDistAccessURLError","setValidFunc","setVocabulariesUsedInputValid","setMetadataSchemaInputValid","setCurrentRoleAgentValid","setDistDownloadURLValid","setDistAccessURLValid","iriError","vocabulariesUsedInputError","metadataSchemaInputError","licenseError","accessStatementError","currentRoleAgentError","currentRoleMboxError","setCurrentRoleMboxError","distDownloadURLError","distAccessURLError","vocabulariesUsedInputValid","metadataSchemaInputValid","currentRoleAgentValid","currentRoleMboxValid","setCurrentRoleMboxValid","distDownloadURLValid","distAccessURLValid","fieldName","setInputFunc","includes","prevFormData","handleChange","validateRegularInput","handleTypeChange","prevData","currentTypes","newTypes","filter","handleCurrentRoleChange","prevRole","handleRemoveRole","index","newRoles","_","i","validateDateInput","errorMessage","setCustomValidity","parts","split","year","parseInt","month","day","daysInMonth","isLeapYear","date","Date","isNaN","getTime","getFullYear","getMonth","getDate","handleRemoveTag","newTags","splice","addPendingTagInputs","updatedFormData","currDist","validateDistribution","isValid","handleDistributionChange","dist","error","downloadURLError","accessURLError","accessServiceError","hasPolicyError","handleRemoveDistribution","newDistributions","handleDatePickerChange","targetFieldName","formattedDate","replace","handleSubmit","async","updatedForm","missingFields","invalidDates","push","join","finalFormData","result","success","formatDate","dateString","toISOString","React","createElement","className","onClick","stopPropagation","aria-label","htmlFor","map","id","onChange","placeholder","onBlur","onKeyPress","acr","rows","lang","keyword","checked","disabled","required","onKeyUp","item","doc","current","click","ref","file","files","accept","display","graph","stat","url","page","role","querySelector","scrollIntoView","behavior","Fragment","newMode","handleAddRole","validation","validateRole","newRole","now","defaultValue","tabIndex","handleAddDistribution","endpoint","idx","handleEditSparqlEndpoint","handleRemoveSparqlEndpoint","handleAddSparqlEndpoint","updated","handleCancelEditSparqlEndpoint","resource","handleEditExampleResource","handleRemoveExampleResource","handleAddExampleResource","handleCancelEditExampleResource","cat","iri","handleEditLinkedResource","handleRemoveLinkedResource","handleAddLinkedResource","src","ns","marginTop","fontSize","handleSaveDraft","existingDraftId","draftId","draft","savedDrafts","draftsString","localStorage","getItem","JSON","parse","d","setItem","stringify","DataTable","submissions","downloadJSON","alert","enrichedData","submission","browserType","navigator","userAgent","timestamp","exportDate","jsonData","blob","Blob","URL","createObjectURL","link","slice","visibility","appendChild","removeChild","clearSubmissions","window","confirm","removeItem","location","reload","toLocaleString","SavedDrafts","forwardRef","onLoadDraft","drafts","setDrafts","loadDrafts","parsedDrafts","sort","a","b","dateA","useImperativeHandle","refreshDrafts","handleLoadDraft","clearAllDrafts","cursor","getHours","toString","padStart","getMinutes","handleDeleteDraft","updatedDrafts","App","setSubmissions","showModal","setShowModal","draftToLoad","setDraftToLoad","savedDraftsRef","savedSubmissions","handleOpenModal","width","submissionId","newSubmissions","handleCloseModal","handleDraftSaved","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.fd32a3f2.chunk.js","sourcesContent":["const fieldInstructions = {\n    \"identifier\": \"The identifier for KG metadata.\",\n    \"type\": \"The type of object in the description.\",\n    \"title\": \"The name or formal title for the KG.\",\n    \"alternativeTitle\": \"Another name for the KG.\",\n    \"acronym\": \"An acronym used to identify the KG.\",\n    \"description\": \"Provide a human readable description of the KG. Minimally, the description should be in English, and ideally, there would be descriptions available in other languages.\",\n    \n    // URL fields\n    \"homepageURL\": \"Provides minimal information, link to access to data.\",\n    \"otherPages\": \"Provide additional relevant pages for the KG.\",\n    \n    // Roles\n    \"roleCreator\": \"The author of the KG.\",\n    \"rolePublisher\": \"The publisher of the KG (this ID typically has an ROR ID corresponding to the institution to which the authors belong).\",\n    \"roleFunder\": \"The organization(s) that funded the KG building and/or publication.\",\n    \"prov:qualifiedAttribution\": \"The contact point for inquiries about the KG, name and Email of the contact person.\",\n    \n    // Date fields\n    \"createdDate\": \"Provide the date when the KG is created.\",\n    \"modifiedDate\": \"The date when the KG is lastly modified.\",\n    \"publishedDate\": \"The date when the KG is published.\",\n    \n    // Vocabularies and schemas\n    \"vocabulariesUsed\": \"Specify the vocabularies used in the knowledge.\",\n    \"metadataSchema\": \"Specify the file against which to validate the KG metadata. Recommend that IRI is a Profile (https://www.w3.org/TR/dx-prof/).\",\n    \n    // Documentation\n    \"primaryReferenceDocument\": \"Provide a reference to a document, preprint or data paper describing the KG.\",\n    \"metaGraph\": \"Provide an illustration of the graph connectivity through its types and relations between instances.\",\n    \"statistics\": \"Provide a computational representation of the summary statistics of the knowledge graph. See HCLS: https://www.w3.org/TR/hcls-dataset/#s6.\",\n    \n    // Distribution related - not in the reference spreadsheet\n    \"distTitle\": \"Required title for this distribution\",\n    \"distReleaseDate\": \"Provide the release date for this specific distribution.\",\n    \"distModificationDate\": \"The date when this distribution was modified.\",\n    \n\n    \"restAPI\": \"Provide a REST API for the KG.\",\n    \"sparqlEndpoint\": \"Provide a SPARQL endpoint for the KG.\",\n    \"exampleQueries\": \"Provide an exemplar query against the KG.\",\n    \n  \n    \"version\": \"Specify the version of the dataset, if defined.\",\n    \"license\": \"Provide the license that the KG is released with. The Software Ontology defines a set of standard licenses to could be chosen from (see http://www.ebi.ac.uk/swo/license/SWO_0000002).\",\n    \"keywords\": \"Provide a set of keywords for the KG.\",\n    \"category\": \"A main category of the resource. A resource can have multiple themes.\",\n    \"publicationReferences\": \"Provide references for the KG.\",\n    \"language\": \"Languages represented in the knowledge graph.\",\n    \"iriTemplate\": \"Provide a 'J' IRI Templates, following RFC 6570, that individuals are typically identified by.\",\n    \"linkedResources\": \"Specify linkable resources to the knowledge graph.Link to a description of a relationship with another resource.\",\n    \"exampleResource\": \"Provide an example instance in the KG.\",\n    \"accessStatement\": \"Specify any restrictions on the access to the resource, and how to gain legitimate access.\",\n    \"source\": \"Specify the origin or source of data for the KG.\",\n    \"nameSpace\": \"Often, the entities described in a dataset share URIs of a common form. For example, all DBpedia entity URIs start with http://dbpedia.org/resource/. The void:uriSpace property can be used to state that all entity URIs in a dataset start with a given string. In other words, they share a common “URI namespace\",\n\n    // --- ModalForm.js fields missing instructions (auto-added 2025-07-01) ---\n    \"categoryInput\": \" ... \",\n    \"distAccessService\": \" ... \",\n    \"distAccessURL\": \" ... \",\n    \"distByteSize\": \" ... \",\n    \"distCompressionFormat\": \" ... \",\n    \"distDescription\": \" ... \",\n    \"distDownloadURL\": \" ... \",\n    \"distHasPolicy\": \" ... \",\n    \"distLicense\": \" ... \",\n    \"distMediaType\": \" ... \",\n    \"distPackagingFormat\": \" ... \",\n    \"linkedResourceTarget\": \"...\",\n    \"linkedResourceTriples\": \"...\",\n    \"distRights\": \" ... \",\n    \"distSpatialResolution\": \"Specify the spatial resolution of this distribution in meters.\",\n    \"distTemporalResolution\": \" ... \",\n    \"distIssued\": \"The date when this distribution was issued or published.\",\n    \"exampleResourceAccessURL\": \" ... \",\n    \"exampleResourceDescription\": \" ... \",\n    \"exampleResourceMediaType\": \" ... \",\n    \"exampleResourceStatus\": \" ... \",\n    \"exampleResourceTitle\": \" ... \",\n    \"homepageURLInput\": \" ... \",\n    \"metadataSchemaInput\": \" ... \",\n    \"otherPagesInput\": \" ... \",\n    \"primaryReferenceDocInput\": \" ... \",\n    \"publicationReferencesInput\": \" ... \",\n    \"roleCreatorAgent\": \" ... \",\n    \"roleCreatorGivenName\": \" ... \",\n    \"roleCreatorMbox\": \" ... \",\n    \"roleFunderAgent\": \" ... \",\n    \"roleFunderGivenName\": \" ... \",\n    \"roleFunderMbox\": \" ... \",\n    \"rolePublisherAgent\": \" ... \",\n    \"rolePublisherGivenName\": \" ... \",\n    \"rolePublisherMbox\": \" ... \",\n    \"sourceInput\": \" ... \",\n    \"sparqlDataService\": \" ... \",\n    \"sparqlEndpointDescription\": \" ... \",\n    \"sparqlEndpointURL\": \" ... \",\n    \"sparqlIdentifier\": \" ... \",\n    \"sparqlStatus\": \" ... \",\n    \"sparqlTitle\": \" ... \",\n    \"vocabulariesUsedInput\": \" ... \",\n    \n    // Role form fields\n    \"roleType\": \"Select the type of role this person or organization plays in relation to the knowledge graph (Creator, Publisher, or Funder).\",\n    \"roleAgent\": \"The IRI (Internationalized Resource Identifier) that uniquely identifies the person or organization in this role.\",\n    \"roleGivenName\": \"The given name (first name) of the person in this role.\",\n    \"roleMbox\": \"The email address of the person or organization in this role.\",\n  };\n  \n  export default fieldInstructions;","import React, { useState, useEffect, useRef } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport fieldInstructions from '../fieldInstructions';\n\nfunction ModalForm({ onSubmit, onClose, initialFormData = null, onDraftSaved = null }) {\n  // Initial form state\n  const initialFormState = {\n    identifier: [uuidv4()], // Auto-generate UUID\n    type: ['dcat:Dataset', 'void:Dataset'], // Both types checked by default\n    title: '',\n    description: '',\n    \n    // Date fields\n    createdDate: '',\n    modifiedDate: [],\n    publishedDate: '',\n    \n    alternativeTitle: [],\n    acronym: [],\n    homepageURL: [],\n    otherPages: [],\n    \n    // Roles array (replaces individual role objects)\n    roles: [],\n    \n    // Other fields\n    license: '',\n    version: '1.0', // Default version number\n\n    // Distributions array\n    distributions: [],\n    \n    primaryReferenceDocument: [],\n    metaGraph: [],\n    statistics: [],\n    vocabulariesUsed: [],\n    metadataSchema: [],\n    restAPI: [],\n    sparqlEndpoint: [],\n    exampleQueries: [],\n    keywords: [],\n    category: [],\n    publicationReferences: [],\n    language: [],\n    iriTemplate: [],\n    linkedResources: [],\n    exampleResource: [],\n    accessStatement: '',\n    source: [],\n    nameSpace: []\n  };\n\n  const [formData, setFormData] = useState(initialFormData || initialFormState);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [message, setMessage] = useState('');\n  // No longer need identifierInput state since it's auto-generated\n  const [alternativeTitleInput, setAlternativeTitleInput] = useState('');\n  const [acronymInput, setAcronymInput] = useState('');\n  const [homepageURLInput, setHomepageURLInput] = useState('');\n  const [otherPagesInput, setOtherPagesInput] = useState('');\n  const [modifiedDateInput, setModifiedDateInput] = useState('');\n  const [primaryReferenceDocInput, setPrimaryReferenceDocInput] = useState('');\n  const [statisticsInput, setStatisticsInput] = useState('');\n  const [keywordsInput, setKeywordsInput] = useState('');\n  const [categoryInput, setCategoryInput] = useState('');\n  const [publicationReferencesInput, setPublicationReferencesInput] = useState('');\n  const [languageInput, setLanguageInput] = useState('');\n  const [iriTemplateInput, setIriTemplateInput] = useState('');\n  // Linked Resources collection state (similar to example resources)\n  const emptyLinkedResource = {\n    target: '',\n    triples: ''\n  };\n  const [currentLinkedResource, setCurrentLinkedResource] = useState(emptyLinkedResource);\n  const [linkedResources, setLinkedResources] = useState([]);\n  const [editingLinkedResourceIdx, setEditingLinkedResourceIdx] = useState(null);\n  const [linkedResourceTargetValid, setLinkedResourceTargetValid] = useState(false);\n  const [linkedResourceTriplesValid, setLinkedResourceTriplesValid] = useState(false);\n  const [exampleResourceInput, setExampleResourceInput] = useState('');\n  const [sourceInput, setSourceInput] = useState('');\n  const [nameSpaceInput, setNameSpaceInput] = useState('');\n  const [imageFileName, setImageFileName] = useState('');\n  // Role editing state (similar to distribution editing)\n  const [currentRole, setCurrentRole] = useState({\n    roleType: 'resourceProvider',\n    inputMode: 'agentIRI', // 'agentIRI' or 'nameEmail'\n    agent: '',\n    givenName: '',\n    mbox: ''\n  });\n\n  const fileInputRef = useRef(null);\n\n  const [createdDateError, setCreatedDateError] = useState('');\n  const [publishedDateError, setPublishedDateError] = useState('');\n  const [modifiedDateError, setModifiedDateError] = useState('');\n  const [distReleaseDateError, setDistReleaseDateError] = useState('');\n  const [distModificationDateError, setDistModificationDateError] = useState('');\n\n  // New state for distribution editing\n  const [currentDistribution, setCurrentDistribution] = useState({\n    title: '',\n    description: '',\n    mediaType: '',\n    downloadURL: '',\n    accessURL: '',\n    accessService: '',\n    byteSize: '',\n    compressionFormat: '',\n    packagingFormat: '',\n    hasPolicy: '',\n    license: '',\n    rights:'',\n    spatialResolution: '',\n    temporalResolution: '',\n    releaseDate: '',\n    modificationDate: '',\n    issued: ''\n  });\n\n  const [vocabulariesUsedInput, setVocabulariesUsedInput] = useState('');\n  const [metadataSchemaInput, setMetadataSchemaInput] = useState('');\n  const [restAPIInput, setRestAPIInput] = useState('');\n  const [exampleQueriesInput, setExampleQueriesInput] = useState('');\n\n// SPARQL Endpoints Section State\nconst emptySparqlEndpoint = {\n  dataService: '',\n  endpointURL: '',\n  identifier: '',\n  title: '',\n  endpointDescription: '',\n  status: ''\n};\nconst [currentSparqlEndpoint, setCurrentSparqlEndpoint] = useState(emptySparqlEndpoint);\nconst [sparqlEndpoints, setSparqlEndpoints] = useState([]);\nconst [editingSparqlEndpointIdx, setEditingSparqlEndpointIdx] = useState(null);\nconst [sparqlDataServiceValid, setSparqlDataServiceValid] = useState(false);\nconst [sparqlEndpointURLValid, setSparqlEndpointURLValid] = useState(false);\nconst [sparqlEndpointURLError, setSparqlEndpointURLError] = useState('');\nconst [sparqlIdentifierValid, setSparqlIdentifierValid] = useState(false);\nconst [sparqlTitleValid, setSparqlTitleValid] = useState(false);\nconst [sparqlEndpointDescriptionValid, setSparqlEndpointDescriptionValid] = useState(false);\nconst [sparqlStatusValid, setSparqlStatusValid] = useState(false);\n\n// Example Resource Section State\nconst emptyExampleResource = {\n  accessURL: '',\n  title: '',\n  mediaType: '',\n  description: '',\n  status: ''\n};\nconst [currentExampleResource, setCurrentExampleResource] = useState(emptyExampleResource);\nconst [exampleResources, setExampleResources] = useState([]);\nconst [editingExampleResourceIdx, setEditingExampleResourceIdx] = useState(null);\nconst [exampleResourceAccessURLValid, setExampleResourceAccessURLValid] = useState(false);\nconst [exampleResourceAccessURLError, setExampleResourceAccessURLError] = useState('');\nconst [exampleResourceTitleValid, setExampleResourceTitleValid] = useState(false);\nconst [exampleResourceMediaTypeValid, setExampleResourceMediaTypeValid] = useState(false);\nconst [exampleResourceDescriptionValid, setExampleResourceDescriptionValid] = useState(false);\nconst [exampleResourceStatusValid, setExampleResourceStatusValid] = useState(false);\n\nconst handleCurrentSparqlEndpointChange = (field, value) => {\n  setCurrentSparqlEndpoint(prev => ({ ...prev, [field]: value }));\n};\n\nconst handleCurrentExampleResourceChange = (field, value) => {\n  setCurrentExampleResource(prev => ({ ...prev, [field]: value }));\n};\n\n// Handle Enter key press for tag inputs\nconst handleKeyPress = (e, tagType, inputValue, setInputFunction) => {\n  if (e.key === 'Enter') {\n    e.preventDefault();\n    handleAddTag(tagType, inputValue, setInputFunction);\n  }\n};\n\nconst resetSparqlEndpointForm = () => {\n  setCurrentSparqlEndpoint(emptySparqlEndpoint);\n  setEditingSparqlEndpointIdx(null);\n  setSparqlDataServiceValid(false);\n  setSparqlEndpointURLValid(false);\n  setSparqlEndpointURLError('');\n  setSparqlIdentifierValid(false);\n  setSparqlTitleValid(false);\n  setSparqlEndpointDescriptionValid(false);\n  setSparqlStatusValid(false);\n};\n\nconst resetExampleResourceForm = () => {\n  setCurrentExampleResource(emptyExampleResource);\n  setEditingExampleResourceIdx(null);\n  setExampleResourceAccessURLValid(false);\n  setExampleResourceAccessURLError('');\n  setExampleResourceTitleValid(false);\n  setExampleResourceMediaTypeValid(false);\n  setExampleResourceDescriptionValid(false);\n  setExampleResourceStatusValid(false);\n};\n\nconst handleAddSparqlEndpoint = () => {\n  if (editingSparqlEndpointIdx !== null) {\n    // Save edits\n    const updated = [...sparqlEndpoints];\n    updated[editingSparqlEndpointIdx] = currentSparqlEndpoint;\n    setSparqlEndpoints(updated);\n  } else {\n    setSparqlEndpoints(prev => [...prev, currentSparqlEndpoint]);\n  }\n  resetSparqlEndpointForm();\n};\n\nconst handleEditSparqlEndpoint = (idx) => {\n  setCurrentSparqlEndpoint(sparqlEndpoints[idx]);\n  setEditingSparqlEndpointIdx(idx);\n  // Optionally set valid states for fields if desired\n};\n\nconst handleRemoveSparqlEndpoint = (idx) => {\n  setSparqlEndpoints(prev => prev.filter((_, i) => i !== idx));\n  if (editingSparqlEndpointIdx === idx) {\n    resetSparqlEndpointForm();\n  }\n};\n\nconst handleCancelEditSparqlEndpoint = () => {\n  resetSparqlEndpointForm();\n};\n\nconst handleAddExampleResource = () => {\n  if (editingExampleResourceIdx !== null) {\n    // Save edits\n    const updated = [...exampleResources];\n    updated[editingExampleResourceIdx] = currentExampleResource;\n    setExampleResources(updated);\n  } else {\n    // Add new\n    setExampleResources([...exampleResources, currentExampleResource]);\n  }\n  setCurrentExampleResource(emptyExampleResource);\n  setEditingExampleResourceIdx(null);\n};\n\n// Linked Resource handlers\nconst handleCurrentLinkedResourceChange = (field, value) => {\n  setCurrentLinkedResource(prev => ({ ...prev, [field]: value }));\n};\n\nconst handleAddLinkedResource = () => {\n  if (editingLinkedResourceIdx !== null) {\n    // Save edits\n    const updated = [...linkedResources];\n    updated[editingLinkedResourceIdx] = currentLinkedResource;\n    setLinkedResources(updated);\n  } else {\n    // Add new\n    setLinkedResources([...linkedResources, currentLinkedResource]);\n  }\n  setCurrentLinkedResource(emptyLinkedResource);\n  setEditingLinkedResourceIdx(null);\n};\n\nconst handleEditLinkedResource = (idx) => {\n  setCurrentLinkedResource(linkedResources[idx]);\n  setEditingLinkedResourceIdx(idx);\n};\n\nconst handleRemoveLinkedResource = (idx) => {\n  const updated = linkedResources.filter((_, i) => i !== idx);\n  setLinkedResources(updated);\n  if (editingLinkedResourceIdx === idx) {\n    setCurrentLinkedResource(emptyLinkedResource);\n    setEditingLinkedResourceIdx(null);\n  } else if (editingLinkedResourceIdx > idx) {\n    setEditingLinkedResourceIdx(editingLinkedResourceIdx - 1);\n  }\n};\n\nconst handleEditExampleResource = (idx) => {\n  setCurrentExampleResource(exampleResources[idx]);\n  setEditingExampleResourceIdx(idx);\n  // Optionally set valid states based on current values\n};\n\nconst handleRemoveExampleResource = (idx) => {\n  setExampleResources(prev => prev.filter((_, i) => i !== idx));\n  if (editingExampleResourceIdx === idx) {\n    resetExampleResourceForm();\n  }\n};\n\nconst handleCancelEditExampleResource = () => {\n  resetExampleResourceForm();\n};\n\n  const [acronymInputValid, setAcronymInputValid] = useState(false);\n  const [metaGraphInput, setMetaGraphInput] = useState('');\n\n  const [homepageURLInputError, setHomepageURLInputError] = useState('');\n  const [otherPagesInputError, setOtherPagesInputError] = useState('');\n  const [primaryReferenceDocInputError, setPrimaryReferenceDocInputError] = useState('');\n  const [metaGraphInputError, setMetaGraphInputError] = useState('');\n  const [statisticsInputError, setStatisticsInputError] = useState('');\n  const [categoryInputError, setCategoryInputError] = useState('');\n  const [publicationReferencesInputError, setPublicationReferencesInputError] = useState('');\n  const [sourceInputError, setSourceInputError] = useState('');\n\n  // Valid states for date fields\n  const [createdDateValid, setCreatedDateValid] = useState(false);\n  const [publishedDateValid, setPublishedDateValid] = useState(false);\n  const [modifiedDateValid, setModifiedDateValid] = useState(false);\n\n  // Valid states for IRI fields (removed metaGraph)\n  const [homepageURLInputValid, setHomepageURLInputValid] = useState(false);\n  const [otherPagesInputValid, setOtherPagesInputValid] = useState(false);\n  const [primaryReferenceDocInputValid, setPrimaryReferenceDocInputValid] = useState(false);\n  const [statisticsInputValid, setStatisticsInputValid] = useState(false);\n  const [categoryInputValid, setCategoryInputValid] = useState(false);\n  const [publicationReferencesInputValid, setPublicationReferencesInputValid] = useState(false);\n  const [sourceInputValid, setSourceInputValid] = useState(false);\n\n  // Valid states for other fields\n  const [titleValid, setTitleValid] = useState(false);\n  const [descriptionValid, setDescriptionValid] = useState(false);\n  const [typeValid, setTypeValid] = useState(true); // Valid by default since both types are pre-selected\n  const [licenseValid, setLicenseValid] = useState(false);\n  const [versionValid, setVersionValid] = useState(true); // Version validation state\n  const [accessStatementValid, setAccessStatementValid] = useState(false);\n  const [keywordsInputValid, setKeywordsInputValid] = useState(false);\n  const [nameSpaceInputValid, setNameSpaceInputValid] = useState(false);\n  const [languageInputValid, setLanguageInputValid] = useState(false);\n  const [iriTemplateInputValid, setIriTemplateInputValid] = useState(false);\n  const [restAPIInputValid, setRestAPIInputValid] = useState(false);\n  const [exampleQueriesInputValid, setExampleQueriesInputValid] = useState(false);\n\n  const [distReleaseDateValid, setDistReleaseDateValid] = useState(false);\n  const [distModificationDateValid, setDistModificationDateValid] = useState(false);\n  // No longer need identifierInputValid state since it's auto-generated\n  const [alternativeTitleInputValid, setAlternativeTitleInputValid] = useState(false);\n  const [distLicenseValid, setDistLicenseValid] = useState(false);\n  const [distRightsValid, setDistRightsValid] = useState(false);\n  const [distSpatialResolutionValid, setDistSpatialResolutionValid] = useState(false);\n  const [distTemporalResolutionValid, setDistTemporalResolutionValid] = useState(false);\n  const [distCompressionFormatValid, setDistCompressionFormatValid] = useState(false);\n  const [distPackagingFormatValid, setDistPackagingFormatValid] = useState(false);\n  const [distHasPolicyValid, setDistHasPolicyValid] = useState(false);\n\n  useEffect(() => {\n      if (initialFormData) {\n        setFormData(initialFormData);\n        \n        // Handle loading custom license input from draft\n        if (initialFormData.customLicenseInput) {\n          setCustomLicenseInput(initialFormData.customLicenseInput);\n        }\n        \n        // If license starts with \"Other-\", extract the custom part and set dropdown to \"Other\"\n        if (initialFormData.license && initialFormData.license.startsWith('Other-')) {\n          const customPart = initialFormData.license.substring(6); // Remove \"Other-\" prefix\n          setCustomLicenseInput(customPart);\n          setFormData(prev => ({\n            ...prev,\n            license: 'Other'\n          }));\n        }\n        \n        // Load collection data from draft\n        if (initialFormData.sparqlEndpoint) {\n          setSparqlEndpoints(initialFormData.sparqlEndpoint);\n        }\n        if (initialFormData.exampleResource) {\n          setExampleResources(initialFormData.exampleResource);\n        }\n        if (initialFormData.linkedResources) {\n          setLinkedResources(initialFormData.linkedResources);\n        }\n      }\n    }, [initialFormData]);\n\n    \n  useEffect(() => {\n    document.body.style.overflow = 'hidden';\n    \n    // Re-enable scrolling when component unmounts\n    return () => {\n      document.body.style.overflow = 'auto';\n    };\n  }, []);\n  \n  useEffect(() => {\n    const labels = document.querySelectorAll('.form-group label');\n    \n    // Loop through each label\n    labels.forEach(label => {\n      // Get the 'for' attribute which connects to the input ID\n      const fieldId = label.getAttribute('for');\n      \n      // If we have instructions for this field, add the tooltip\n      if (fieldId && fieldInstructions[fieldId]) {\n        label.setAttribute('data-tooltip', fieldInstructions[fieldId]);\n        label.setAttribute('tabindex', '0'); // Make focusable for accessibility\n      }\n    });\n  }, []);\n\n\n  useEffect(() => {\n    let timeoutId;\n    if (message) {\n      timeoutId = setTimeout(() => {\n        setMessage(null);\n      }, 20000);\n    }\n    return () => timeoutId && clearTimeout(timeoutId);\n  }, [message]);\n\n\n\n\n    const isValidIriString = (iriString) => {\n      console.log('Validating IRI:', iriString);\n      \n      // Allow empty values for optional fields\n      if (!iriString || !iriString.trim()) {\n        console.log('IRI is empty - allowed for optional fields');\n        return null;\n      }\n      \n      const trimmed = iriString.trim();\n      \n      // Check for obviously invalid characters at the start\n      if (/^[@#{}|\\\\^`<>\"']/.test(trimmed)) {\n        return 'IRI cannot start with invalid characters.';\n      }\n      \n      // Basic scheme check - IRI must have a scheme\n      if (!/^[a-zA-Z][a-zA-Z0-9+.-]*:/.test(trimmed)) {\n        return 'IRI must have a valid scheme (e.g., http:, https:, ftp:).';\n      }\n      \n      // Check for invalid characters that should not appear in IRIs\n      if (/[\\s<>\"{}|\\\\^`]/.test(trimmed)) {\n        return 'IRI contains invalid characters.';\n      }\n      \n      // Check for unmatched brackets\n      const openBrackets = (trimmed.match(/\\[/g) || []).length;\n      const closeBrackets = (trimmed.match(/\\]/g) || []).length;\n      if (openBrackets !== closeBrackets) {\n        return 'IRI has unmatched brackets.';\n      }\n      \n      // Check for @ symbol in inappropriate places (not in userinfo or email schemes)\n      if (/@/.test(trimmed) && !/^(mailto:|http:\\/\\/[^@]*@|https:\\/\\/[^@]*@)/.test(trimmed)) {\n        return 'IRI contains @ symbol in invalid position.';\n      }\n      \n      console.log('IRI is valid');\n      return null;\n    };\n\n\n    const validateIriInput = (e) => {\n      const { name, value } = e.target;\n      \n      // Map field names to their error setter functions - EXPANDED LIST\n      const errorSetters = {\n        'homepageURLInput': setHomepageURLInputError,\n        'otherPagesInput': setOtherPagesInputError,\n        'vocabulariesUsedInput': setVocabulariesUsedInputError,\n        'metadataSchemaInput': setMetadataSchemaInputError,\n        'primaryReferenceDocInput': setPrimaryReferenceDocInputError,\n        'license': setLicenseError,\n        'categoryInput': setCategoryInputError,\n        'publicationReferencesInput': setPublicationReferencesInputError,\n        'accessStatement': setAccessStatementError,\n        'sourceInput': setSourceInputError,\n        'currentRoleAgent': setCurrentRoleAgentError,\n        'distDownloadURL': setDistDownloadURLError,\n        'distAccessURL': setDistAccessURLError,\n        'sparqlEndpointURL': setSparqlEndpointURLError,\n        'exampleResourceAccessURL': setExampleResourceAccessURLError\n      };\n      \n      // Map field names to their valid setter functions - EXPANDED LIST\n      const validSetters = {\n        'homepageURLInput': setHomepageURLInputValid,\n        'otherPagesInput': setOtherPagesInputValid,\n        'vocabulariesUsedInput': setVocabulariesUsedInputValid,\n        'metadataSchemaInput': setMetadataSchemaInputValid,\n        'primaryReferenceDocInput': setPrimaryReferenceDocInputValid,\n        'license': setLicenseValid,\n        \n        'categoryInput': setCategoryInputValid,\n        'publicationReferencesInput': setPublicationReferencesInputValid,\n        'accessStatement': setAccessStatementValid,\n        'sourceInput': setSourceInputValid,\n        'currentRoleAgent': setCurrentRoleAgentValid,\n        'distDownloadURL': setDistDownloadURLValid,\n        'distAccessURL': setDistAccessURLValid,\n        'sparqlEndpointURL': setSparqlEndpointURLValid,\n        'exampleResourceAccessURL': setExampleResourceAccessURLValid\n      };\n      \n      const setErrorFunc = errorSetters[name];\n      const setValidFunc = validSetters[name];\n      \n      if (!setErrorFunc || !setValidFunc) return; // Field doesn't need IRI validation\n      // DEBUG: Log which field is being validated\n      // console.log('Validating IRI for field:', name, value);\n      \n      // Skip validation for empty optional fields\n      if (!value || !value.trim()) {\n        setErrorFunc('');\n        setValidFunc(false);\n        return;\n      }\n      \n      const iriError = isValidIriString(value);\n      if (iriError) {\n        setErrorFunc(iriError);\n        setValidFunc(false);\n      } else {\n        setErrorFunc('');\n        setValidFunc(true);\n      }\n    };\n    \n    // 2. Add new state declarations for error and valid states (add these to your existing state declarations):\n    \n    // Error states for new IRI fields\n    const [vocabulariesUsedInputError, setVocabulariesUsedInputError] = useState('');\n    const [metadataSchemaInputError, setMetadataSchemaInputError] = useState('');\n    const [licenseError, setLicenseError] = useState('');\n    const [accessStatementError, setAccessStatementError] = useState('');\n    const [currentRoleAgentError, setCurrentRoleAgentError] = useState('');\n    const [currentRoleMboxError, setCurrentRoleMboxError] = useState('');\n    const [distDownloadURLError, setDistDownloadURLError] = useState('');\n    const [distAccessURLError, setDistAccessURLError] = useState('');\n    \n    // State for custom license input\n    const [customLicenseInput, setCustomLicenseInput] = useState('');\n    \n    // Valid states for new IRI fields\n    const [vocabulariesUsedInputValid, setVocabulariesUsedInputValid] = useState(false);\n    const [metadataSchemaInputValid, setMetadataSchemaInputValid] = useState(false);\n    const [currentRoleAgentValid, setCurrentRoleAgentValid] = useState(false);\n    const [currentRoleMboxValid, setCurrentRoleMboxValid] = useState(false);\n    const [distDownloadURLValid, setDistDownloadURLValid] = useState(false);\n    const [distAccessURLValid, setDistAccessURLValid] = useState(false);\n    \n    // 3. Update handleAddTag to include IRI validation for new fields:\n    \n    const handleAddTag = (fieldName, inputValue, setInputFunc, setErrorFunc) => {\n      if (setErrorFunc) setErrorFunc(''); // Clear previous error\n      // No need to handle identifier field validation anymore\n      if (fieldName === 'alternativeTitle') setAlternativeTitleInputValid(false);\n    \n      // Fields that require IRI validation - EXPANDED LIST\n      const iriFields = [\n        'homepageURL', 'otherPages', 'vocabulariesUsed', 'metadataSchema',\n        'primaryReferenceDocument', 'category', \n        'publicationReferences', 'source'\n      ];\n    \n      if (iriFields.includes(fieldName)) {\n        const iriError = isValidIriString(inputValue);\n        if (iriError) {\n          if (setErrorFunc) setErrorFunc(iriError);\n          return;\n        }\n      }\n    \n      if (inputValue.trim()) {\n        setFormData(prevFormData => ({\n          ...prevFormData,\n          [fieldName]: [...(prevFormData[fieldName] || []), inputValue.trim()]\n        }));\n        setInputFunc('');\n      }\n    };\n    \n\n    const handleChange = (e) => {\n      const { name, value } = e.target;\n      \n      // Clear valid states when user starts typing in date fields\n      if (name === 'createdDate') setCreatedDateValid(false);\n      if (name === 'publishedDate') setPublishedDateValid(false);\n      \n      // Clear valid states for regular fields when typing\n      if (name === 'title') setTitleValid(false);\n      if (name === 'description') setDescriptionValid(false);\n      if (name === 'license') setLicenseValid(false);\n      if (name === 'version') setVersionValid(true); // Reset version validation\n      if (name === 'accessStatement') setAccessStatementValid(false);\n      if (name === 'keywords') setKeywordsInputValid(false);\n      if (name === 'nameSpace') setNameSpaceInputValid(false);\n      if (name === 'restAPI') setRestAPIInputValid(false);\n      \n      if (name === 'exampleQueries') setExampleQueriesInputValid(false);\n      \n      setFormData({\n        ...formData,\n        [name]: value\n      });\n\n      // Validate non-IRI and non-date fields\n      validateRegularInput(e);\n    };\n  \n    const handleTypeChange = (value) => {\n      // Prevent unchecking dcat:Dataset - it's always required\n      if (value === 'dcat:Dataset') {\n        return;\n      }\n      \n      setFormData(prevData => {\n        const currentTypes = prevData.type || [];\n        let newTypes;\n        \n        if (currentTypes.includes(value)) {\n          // Remove the value if it's already selected\n          newTypes = currentTypes.filter(type => type !== value);\n        } else {\n          // Add the value if it's not selected\n          newTypes = [...currentTypes, value];\n        }\n        \n        // Update validation state - valid if at least one type is selected\n        setTypeValid(newTypes.length > 0);\n        \n        return {\n          ...prevData,\n          type: newTypes\n        };\n      });\n    };\n\n\n  // Handle current role field changes\n  const handleCurrentRoleChange = (field, value) => {\n    setCurrentRole(prevRole => ({\n      ...prevRole,\n      [field]: value\n    }));\n  };\n\n  // Reset current role form\n  const resetCurrentRoleForm = () => {\n    setCurrentRole({\n      roleType: 'resourceProvider',\n      inputMode: 'agentIRI',\n      agent: '',\n      givenName: '',\n      mbox: ''\n    });\n    setCurrentRoleAgentError('');\n    setCurrentRoleAgentValid(false);\n    setCurrentRoleMboxError('');\n    setCurrentRoleMboxValid(false);\n  };\n\n  // Validate a role before adding it\n  const validateRole = (role) => {\n    if (role.inputMode === 'agentIRI') {\n      if (!role.agent.trim()) {\n        return { isValid: false, error: 'Agent IRI is required.' };\n      }\n      const iriError = isValidIriString(role.agent.trim());\n      if (iriError) {\n        return { isValid: false, error: `Invalid IRI: ${iriError}` };\n      }\n      return { isValid: true };\n    } else {\n      if (!role.givenName.trim()) {\n        return { isValid: false, error: 'Given Name is required.' };\n      }\n      if (!role.mbox.trim()) {\n        return { isValid: false, error: 'Email address is required.' };\n      }\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      if (!emailRegex.test(role.mbox.trim())) {\n        return { isValid: false, error: 'Please enter a valid email address.' };\n      }\n      return { isValid: true };\n    }\n  };\n\n  // Add a role\n  const handleAddRole = () => {\n    const validation = validateRole(currentRole);\n    if (!validation.isValid) {\n      setMessage(validation.error);\n      setTimeout(() => setMessage(''), 3000);\n      return;\n    }\n\n    // Create role object without inputMode, only store actual field values\n    const newRole = {\n      roleType: currentRole.roleType,\n      agent: currentRole.agent || '',\n      givenName: currentRole.givenName || '',\n      mbox: currentRole.mbox || '',\n      id: Date.now() // Simple ID for React keys\n    };\n\n    setFormData({\n      ...formData,\n      roles: [...formData.roles, newRole]\n    });\n\n    resetCurrentRoleForm();\n    setMessage('Role added successfully');\n    setTimeout(() => setMessage(''), 2000);\n  };\n\n  // Remove a role\n  const handleRemoveRole = (index) => {\n    const newRoles = formData.roles.filter((_, i) => i !== index);\n    setFormData({\n      ...formData,\n      roles: newRoles\n    });\n  };\n  \n  // Handle adding a date tag\n  const handleAddDate = (e) => {\n    if (modifiedDateInput) {\n      setFormData({\n        ...formData,\n        modifiedDate: [...formData.modifiedDate, modifiedDateInput]\n      });\n      setModifiedDateInput('');\n    }\n  };\n\n  const validateDateInput = (e) => {\n    const { name, value } = e.target;\n    let errorMessage = '';\n    \n    const validSetters = {\n      'createdDate': setCreatedDateValid,\n      'publishedDate': setPublishedDateValid,\n      'modifiedDate': setModifiedDateValid,\n      'distReleaseDate': setDistReleaseDateValid,\n      'distModificationDate': setDistModificationDateValid\n    };\n    \n    const setValidFunc = validSetters[name];\n    \n    if (!value && name !== 'publishedDate') {\n      e.target.setCustomValidity('');\n      \n      if (name === 'createdDate') setCreatedDateError('');\n      else if (name === 'modifiedDate') setModifiedDateError('');\n      else if (name === 'distReleaseDate') setDistReleaseDateError('');\n      else if (name === 'distModificationDate') setDistModificationDateError('');\n      \n      if (setValidFunc) setValidFunc(false);\n      return;\n    }\n    \n    const datePattern = /^\\d{4}\\/\\d{2}\\/\\d{2}$/;\n    if (!datePattern.test(value)) {\n      errorMessage = 'Please use YYYY/MM/DD format';\n      e.target.setCustomValidity(errorMessage);\n      \n      if (name === 'createdDate') setCreatedDateError(errorMessage);\n      else if (name === 'publishedDate') setPublishedDateError(errorMessage);\n      else if (name === 'modifiedDate') setModifiedDateError(errorMessage);\n      else if (name === 'distReleaseDate') setDistReleaseDateError(errorMessage);\n      else if (name === 'distModificationDate') setDistModificationDateError(errorMessage);\n      \n      if (setValidFunc) setValidFunc(false);\n      return;\n    }\n    \n    const parts = value.split('/');\n    const year = parseInt(parts[0], 10);\n    const month = parseInt(parts[1], 10);\n    const day = parseInt(parts[2], 10);\n    \n    if (year < 1900 || year > 2100) {\n      errorMessage = 'Year should be between 1900 and 2100';\n      e.target.setCustomValidity(errorMessage);\n      \n      if (name === 'createdDate') setCreatedDateError(errorMessage);\n      else if (name === 'publishedDate') setPublishedDateError(errorMessage);\n      else if (name === 'modifiedDate') setModifiedDateError(errorMessage);\n      else if (name === 'distReleaseDate') setDistReleaseDateError(errorMessage);\n      else if (name === 'distModificationDate') setDistModificationDateError(errorMessage);\n      \n      if (setValidFunc) setValidFunc(false);\n      return;\n    }\n    \n    if (month < 1 || month > 12) {\n      errorMessage = 'Month should be between 1 and 12';\n      e.target.setCustomValidity(errorMessage);\n      \n      if (name === 'createdDate') setCreatedDateError(errorMessage);\n      else if (name === 'publishedDate') setPublishedDateError(errorMessage);\n      else if (name === 'modifiedDate') setModifiedDateError(errorMessage);\n      else if (name === 'distReleaseDate') setDistReleaseDateError(errorMessage);\n      else if (name === 'distModificationDate') setDistModificationDateError(errorMessage);\n      \n      if (setValidFunc) setValidFunc(false);\n      return;\n    }\n    \n    const daysInMonth = [\n      31, isLeapYear(year) ? 29 : 28, 31, 30, 31, 30,\n      31, 31, 30, 31, 30, 31\n    ];\n    \n    if (day < 1 || day > daysInMonth[month - 1]) {\n      errorMessage = `Day should be between 1 and ${daysInMonth[month - 1]} for this month`;\n      e.target.setCustomValidity(errorMessage);\n      \n      if (name === 'createdDate') setCreatedDateError(errorMessage);\n      else if (name === 'publishedDate') setPublishedDateError(errorMessage);\n      else if (name === 'modifiedDate') setModifiedDateError(errorMessage);\n      else if (name === 'distReleaseDate') setDistReleaseDateError(errorMessage);\n      else if (name === 'distModificationDate') setDistModificationDateError(errorMessage);\n      \n      if (setValidFunc) setValidFunc(false);\n      return;\n    }\n    \n    const date = new Date(year, month - 1, day);\n    if (\n      isNaN(date.getTime()) || \n      date.getFullYear() !== year || \n      date.getMonth() !== month - 1 || \n      date.getDate() !== day\n    ) {\n      errorMessage = 'Invalid date';\n      e.target.setCustomValidity(errorMessage);\n      \n      if (name === 'createdDate') setCreatedDateError(errorMessage);\n      else if (name === 'publishedDate') setPublishedDateError(errorMessage);\n      else if (name === 'modifiedDate') setModifiedDateError(errorMessage);\n      else if (name === 'distReleaseDate') setDistReleaseDateError(errorMessage);\n      else if (name === 'distModificationDate') setDistModificationDateError(errorMessage);\n      \n      if (setValidFunc) setValidFunc(false);\n      return;\n    }\n    \n    e.target.setCustomValidity('');\n    \n    if (name === 'createdDate') setCreatedDateError('');\n    else if (name === 'publishedDate') setPublishedDateError('');\n    else if (name === 'modifiedDate') setModifiedDateError('');\n    else if (name === 'distReleaseDate') setDistReleaseDateError('');\n    else if (name === 'distModificationDate') setDistModificationDateError('');\n    \n    if (setValidFunc) setValidFunc(true);\n\n    if (setValidFunc) {\n      setValidFunc(true);\n      console.log(`Setting ${name} to valid`); // Add this line\n    }\n\n    };\n  \n\n  const isLeapYear = (year) => {\n    return (year % 4 === 0 && year % 100 !== 0) || (year % 400 === 0);\n  };\n  \n  \n  const convertToISODate = (dateString) => {\n    if (!dateString) return '';\n    \n    if (/^\\d{4}\\/\\d{2}\\/\\d{2}$/.test(dateString)) {\n      return dateString.replace(/\\//g, '-');\n    }\n    \n    return dateString;\n  };\n\n\n  const validateRegularInput = (e) => {\n    const { name, value } = e.target;\n    \n    // Map field names to their valid setter functions\n    const validSetters = {\n      'title': setTitleValid,\n      'description': setDescriptionValid,\n      'type': setTypeValid,\n      \n      'version': setVersionValid, // Version validation\n      'accessStatement': setAccessStatementValid,\n      'keywords': setKeywordsInputValid,\n      'language': setLanguageInputValid,\n      'iriTemplate': setIriTemplateInputValid,\n      'nameSpace': setNameSpaceInputValid,\n      'vocabulariesUsed': setVocabulariesUsedInputValid,\n      'metadataSchema': setMetadataSchemaInputValid,\n      'restAPI': setRestAPIInputValid,\n      \n      'exampleQueries': setExampleQueriesInputValid,\n      'distLicense': setDistLicenseValid,\n      'distRights': setDistRightsValid,\n      'distSpatialResolution': setDistSpatialResolutionValid,\n      'distTemporalResolution': setDistTemporalResolutionValid,\n      'distCompressionFormat': setDistCompressionFormatValid,\n      'distPackagingFormat': setDistPackagingFormatValid,\n      'distHasPolicy': setDistHasPolicyValid,\n    'sparqlDataService': setSparqlDataServiceValid,\n    'sparqlIdentifier': setSparqlIdentifierValid,\n    'sparqlTitle': setSparqlTitleValid,\n    'sparqlEndpointDescription': setSparqlEndpointDescriptionValid,\n    'sparqlStatus': setSparqlStatusValid,\n    'exampleResourceTitle': setExampleResourceTitleValid,\n    'exampleResourceMediaType': setExampleResourceMediaTypeValid,\n    'exampleResourceDescription': setExampleResourceDescriptionValid,\n    'exampleResourceStatus': setExampleResourceStatusValid,\n    'linkedResourceTarget': setLinkedResourceTargetValid,\n    'linkedResourceTriples': setLinkedResourceTriplesValid\n    };\n    \n    const setValidFunc = validSetters[name];\n    if (!setValidFunc) return;\n    \n    // Set valid if field has content\n    setValidFunc(value && value.trim().length > 0);\n};\n\n  // Email validation function for mbox field\n  const validateEmailInput = (e) => {\n    const { value } = e.target;\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    \n    if (!value || value.trim() === '') {\n      setCurrentRoleMboxError('');\n      setCurrentRoleMboxValid(false);\n      return;\n    }\n    \n    if (emailRegex.test(value.trim())) {\n      setCurrentRoleMboxError('');\n      setCurrentRoleMboxValid(true);\n    } else {\n      setCurrentRoleMboxError('Please enter a valid email address');\n      setCurrentRoleMboxValid(false);\n    }\n  };\n  \n  const handleRemoveTag = (fieldName, index) => {\n    const newTags = [...formData[fieldName]];\n    newTags.splice(index, 1);\n    setFormData({\n      ...formData,\n      [fieldName]: newTags\n    });\n  };\n  \n  const handleFileUpload = (e) => {\n    const file = e.target.files[0];\n    if (file) {\n      setImageFileName(file.name);\n      setFormData({\n        ...formData,\n        metaGraph: [...formData.metaGraph, file.name]\n      });\n    }\n  };\n  \n  const addPendingTagInputs = () => {\n    // Create a copy of the current form data that we'll update\n    let updatedFormData = {...formData};\n    \n    // Handle all tag input fields\n    // No longer need to check identifierInput since it's auto-generated\n    // identifier is already set with UUID\n    \n    \n    if (alternativeTitleInput.trim()) {\n      updatedFormData = {\n        ...updatedFormData,\n        alternativeTitle: [...updatedFormData.alternativeTitle, alternativeTitleInput.trim()]\n      };\n    }\n    \n    if (acronymInput.trim()) {\n      updatedFormData = {\n        ...updatedFormData,\n        acronym: [...updatedFormData.acronym, acronymInput.trim()]\n      };\n    }\n    \n    if (homepageURLInput.trim()) {\n      const iriError = isValidIriString(homepageURLInput);\n      if (!iriError) {\n        updatedFormData = {\n          ...updatedFormData,\n          homepageURL: [...updatedFormData.homepageURL, homepageURLInput.trim()]\n        };\n      } else {\n        setHomepageURLInputError(iriError);\n      }\n    }\n    \n    if (otherPagesInput.trim()) {\n      const iriError = isValidIriString(otherPagesInput);\n      if (!iriError) {\n        updatedFormData = {\n          ...updatedFormData,\n          otherPages: [...updatedFormData.otherPages, otherPagesInput.trim()]\n        };\n      } else {\n        setOtherPagesInputError(iriError);\n      }\n    }\n    \n    if (modifiedDateInput) {\n      updatedFormData = {\n        ...updatedFormData,\n        modifiedDate: [...updatedFormData.modifiedDate, modifiedDateInput]\n      };\n    }\n    \n    if (primaryReferenceDocInput.trim()) {\n      updatedFormData = {\n        ...updatedFormData,\n        primaryReferenceDocument: [...updatedFormData.primaryReferenceDocument, primaryReferenceDocInput.trim()]\n      };\n    }\n    \n    if (statisticsInput.trim()) {\n      updatedFormData = {\n        ...updatedFormData,\n        statistics: [...updatedFormData.statistics, statisticsInput.trim()]\n      };\n    }\n    \n    if (keywordsInput.trim()) {\n      updatedFormData = {\n        ...updatedFormData,\n        keywords: [...updatedFormData.keywords, keywordsInput.trim()]\n      };\n    }\n    \n    if (categoryInput.trim()) {\n      updatedFormData = {\n        ...updatedFormData,\n        category: [...updatedFormData.category, categoryInput.trim()]\n      };\n    }\n    \n    if (publicationReferencesInput.trim()) {\n      updatedFormData = {\n        ...updatedFormData,\n        publicationReferences: [...updatedFormData.publicationReferences, publicationReferencesInput.trim()]\n      };\n    }\n    \n    if (languageInput.trim()) {\n      updatedFormData = {\n        ...updatedFormData,\n        language: [...updatedFormData.language, languageInput.trim()]\n      };\n    }\n    \n    if (iriTemplateInput.trim()) {\n      updatedFormData = {\n        ...updatedFormData,\n        iriTemplate: [...updatedFormData.iriTemplate, iriTemplateInput.trim()]\n      };\n    }\n    \n    \n    if (exampleResourceInput.trim()) {\n      updatedFormData = {\n        ...updatedFormData,\n        exampleResource: [...updatedFormData.exampleResource, exampleResourceInput.trim()]\n      };\n    }\n    \n    if (sourceInput.trim()) {\n      updatedFormData = {\n        ...updatedFormData,\n        source: [...updatedFormData.source, sourceInput.trim()]\n      };\n    }\n    \n    if (nameSpaceInput.trim()) {\n      updatedFormData = {\n        ...updatedFormData,\n        nameSpace: [...updatedFormData.nameSpace, nameSpaceInput.trim()]\n      };\n    }\n  \n    if (vocabulariesUsedInput.trim()) {\n      updatedFormData = {\n        ...updatedFormData,\n        vocabulariesUsed: [...updatedFormData.vocabulariesUsed, vocabulariesUsedInput.trim()]\n      };\n    }\n    \n    if (metadataSchemaInput.trim()) {\n      updatedFormData = {\n        ...updatedFormData,\n        metadataSchema: [...updatedFormData.metadataSchema, metadataSchemaInput.trim()]\n      };\n    }\n    \n    \n    if (restAPIInput.trim()) {\n      updatedFormData = {\n        ...updatedFormData,\n        restAPI: [...updatedFormData.restAPI, restAPIInput.trim()]\n      };\n    }\n    \n    if (exampleQueriesInput.trim()) {\n      updatedFormData = {\n        ...updatedFormData,\n        exampleQueries: [...updatedFormData.exampleQueries, exampleQueriesInput.trim()]\n      };\n    }\n    \n    // Check if current distribution is partially filled and valid\n    const currDist = currentDistribution;\n    if (currDist.title || currDist.description || currDist.mediaType || \n        currDist.downloadURL || currDist.accessURL) {\n      // Only add the distribution if it passes full validation\n      const validation = validateDistribution(currDist);\n      if (validation.isValid) {\n        updatedFormData = {\n          ...updatedFormData,\n          distributions: [...updatedFormData.distributions, {...currDist}]\n        };\n      }\n    }\n    \n    // Update the state with all changes\n    setFormData(updatedFormData);\n    \n    // Return the updated form data for immediate use\n    return updatedFormData;\n  };\n\n  const handleDistributionChange = (field, value) => {\n    setCurrentDistribution({\n      ...currentDistribution,\n      [field]: value\n    });\n  };\n\n  // Validate a distribution before adding it\n  const validateDistribution = (dist) => {\n    // Check required fields\n    if (!dist.title || !dist.description || !dist.mediaType || \n        !dist.downloadURL || !dist.accessURL) {\n      return { isValid: false, error: 'Please fill in all required fields for the distribution' };\n    }\n\n    // Validate required IRI fields\n    const downloadURLError = isValidIriString(dist.downloadURL);\n    if (downloadURLError) {\n      return { isValid: false, error: `Invalid Download URL: ${downloadURLError}` };\n    }\n\n    const accessURLError = isValidIriString(dist.accessURL);\n    if (accessURLError) {\n      return { isValid: false, error: `Invalid Access URL: ${accessURLError}` };\n    }\n\n    // Validate optional IRI fields (only if they have values)\n    if (dist.accessService && dist.accessService.trim()) {\n      const accessServiceError = isValidIriString(dist.accessService);\n      if (accessServiceError) {\n        return { isValid: false, error: `Invalid Access Service: ${accessServiceError}` };\n      }\n    }\n\n    if (dist.hasPolicy && dist.hasPolicy.trim()) {\n      const hasPolicyError = isValidIriString(dist.hasPolicy);\n      if (hasPolicyError) {\n        return { isValid: false, error: `Invalid Has Policy: ${hasPolicyError}` };\n      }\n    }\n\n    if (dist.license && dist.license.trim()) {\n      const licenseError = isValidIriString(dist.license);\n      if (licenseError) {\n        return { isValid: false, error: `Invalid License: ${licenseError}` };\n      }\n    }\n\n    return { isValid: true };\n  };\n\n  // Add a distribution\n  const handleAddDistribution = () => {\n    const validation = validateDistribution(currentDistribution);\n    if (!validation.isValid) {\n      setMessage(validation.error);\n      setTimeout(() => setMessage(''), 5000);\n      return;\n    }\n    \n    setFormData({\n      ...formData,\n      distributions: [...formData.distributions, {...currentDistribution}]\n    });\n    \n    // Reset the current distribution form\n    setCurrentDistribution({\n      title: '',\n      description: '',\n      mediaType: '',\n      downloadURL: '',\n      accessURL: '',\n      accessService: '',\n      byteSize: '',\n      compressionFormat: '',\n      packagingFormat: '',\n      hasPolicy: '',\n      license: '',\n       rights:'',\n      spatialResolution: '',\n      temporalResolution: '',\n      releaseDate: '',\n      modificationDate: '',\n      issued: ''\n    });\n\n    setMessage('Distribution added successfully');\n    setTimeout(() => setMessage(''), 2000);\n  };\n\n  // Remove a distribution\n  const handleRemoveDistribution = (index) => {\n    const newDistributions = [...formData.distributions];\n    newDistributions.splice(index, 1);\n    setFormData({\n      ...formData,\n      distributions: newDistributions\n    });\n  };\n\n\n\n\n\n  const validateDateField = (fieldName, dateValue) => {\n    if (!dateValue) {\n      // For required fields, this would be caught later\n      return true;\n    }\n    \n    if (!isValidDate(dateValue)) {\n      // Create a synthetic event to pass to validateDateInput\n      const syntheticEvent = {\n        target: {\n          name: fieldName,\n          value: dateValue,\n          setCustomValidity: () => {} // Mock function\n        }\n      };\n      \n      validateDateInput(syntheticEvent);\n      return false;\n    }\n    \n    return true;\n  };\n  \n  // Helper function to check if a date string is valid\n  const isValidDate = (dateString) => {\n    // Skip empty values\n    if (!dateString) return true;\n    \n    // Check format\n    const datePattern = /^\\d{4}\\/\\d{2}\\/\\d{2}$/;\n    if (!datePattern.test(dateString)) {\n      return false;\n    }\n    \n    // Parse date parts\n    const parts = dateString.split('/');\n    const year = parseInt(parts[0], 10);\n    const month = parseInt(parts[1], 10);\n    const day = parseInt(parts[2], 10);\n    \n    // Check ranges\n    if (year < 1990 || year > 2030) return false;\n    if (month < 1 || month > 12) return false;\n    \n    // Check days in month\n    const daysInMonth = [\n      31, isLeapYear(year) ? 29 : 28, 31, 30, 31, 30,\n      31, 31, 30, 31, 30, 31\n    ];\n    \n    if (day < 1 || day > daysInMonth[month - 1]) return false;\n    \n    return true;\n  };\n\n\n\n  const handleDatePickerChange = (e, targetFieldName) => {\n    const selectedDate = e.target.value; // This will be in YYYY-MM-DD format\n    \n    // Convert from YYYY-MM-DD to YYYY/MM/DD\n    const formattedDate = selectedDate.replace(/-/g, '/');\n    \n    // Set the value in the appropriate field based on targetFieldName\n    if (targetFieldName === 'createdDate') {\n      // For direct form fields\n      setFormData({\n        ...formData,\n        createdDate: formattedDate\n      });\n    } else if (targetFieldName === 'publishedDate') {\n      setFormData({\n        ...formData,\n        publishedDate: formattedDate\n      });\n    } else if (targetFieldName === 'modifiedDate') {\n      // For the modified date input\n      setModifiedDateInput(formattedDate);\n    } else if (targetFieldName === 'distReleaseDate') {\n      // For distribution date fields\n      setCurrentDistribution({\n        ...currentDistribution,\n        releaseDate: formattedDate\n      });\n    } else if (targetFieldName === 'distModificationDate') {\n      setCurrentDistribution({\n        ...currentDistribution,\n        modificationDate: formattedDate\n      });\n    }\n    \n    // Validate the date after setting it\n    setTimeout(() => {\n      const syntheticEvent = {\n        target: {\n          name: targetFieldName,\n          value: formattedDate,\n          setCustomValidity: () => {}\n        }\n      };\n      validateDateInput(syntheticEvent);\n    }, 0);\n  };\n  \n  \n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    const updatedForm = addPendingTagInputs();\n    \n    // Keep the user-specified version number as is\n    // The full version (UUID+vNum) will be displayed in the UI but we store just the number\n    \n    // Separate arrays for different types of errors\n    const missingFields = [];\n    const invalidDates = [];\n    \n    // Check for missing required fields (including dates)\n    if (!updatedForm.title) missingFields.push('Title');\n    if (!updatedForm.description) missingFields.push('Description'); \n    if (!updatedForm.type || updatedForm.type.length === 0) missingFields.push('Type');\n    if (!updatedForm.publishedDate) missingFields.push('Published Date');\n    if (updatedForm.distributions.length === 0) missingFields.push('Distribution');\n    if (updatedForm.primaryReferenceDocument.length === 0) missingFields.push('Primary Reference Document');\n    if (updatedForm.keywords.length === 0) missingFields.push('Keywords');\n    if (updatedForm.language.length === 0) missingFields.push('Language');\n    if (!updatedForm.accessStatement) missingFields.push('Access Statement');\n    if (updatedForm.vocabulariesUsed.length === 0) missingFields.push('Vocabularies Used');\n    if (updatedForm.metadataSchema.length === 0) missingFields.push('Metadata Schema');\n    \n    // Check for invalid dates (only for dates that are filled)\n    if (createdDateError && updatedForm.createdDate) invalidDates.push(`Created Date: ${createdDateError}`);\n    if (publishedDateError && updatedForm.publishedDate) invalidDates.push(`Published Date: ${publishedDateError}`);\n    if (modifiedDateError && updatedForm.modifiedDate.length > 0) invalidDates.push(`Modified Date: ${modifiedDateError}`);\n    if (distReleaseDateError) invalidDates.push(`Distribution Release Date: ${distReleaseDateError}`);\n    if (distModificationDateError) invalidDates.push(`Distribution Modification Date: ${distModificationDateError}`);\n    \n    // For optional date fields that have values, validate them\n    if (updatedForm.createdDate) {\n      const e = {\n        target: {\n          name: 'createdDate',\n          value: updatedForm.createdDate,\n          setCustomValidity: () => {}\n        }\n      };\n      validateDateInput(e);\n      if (createdDateError) {\n        invalidDates.push(`Created Date: ${createdDateError}`);\n      }\n    }\n\n    // Construct error message\n    let errorMessage = '';\n    \n    if (missingFields.length > 0) {\n      errorMessage += `The following fields are required but have not been filled: ${missingFields.join(', ')}`;\n    }\n    \n    if (invalidDates.length > 0) {\n      if (errorMessage) errorMessage += '\\n\\n';\n      errorMessage += `The following dates are invalid:\\n${invalidDates.join('\\n')}`;\n    }\n\n    if (errorMessage) {\n      setMessage(errorMessage);\n      setIsSubmitting(false);\n      return;\n    }\n    \n    // Sync SPARQL endpoints, Example Resources, and Linked Resources before submission\n    updatedForm.sparqlEndpoint = sparqlEndpoints;\n    updatedForm.exampleResource = exampleResources;\n    updatedForm.linkedResources = linkedResources;\n\n    // Proceed with submission\n    setIsSubmitting(true);\n    setMessage('');\n    \n    // Handle custom license formatting\n    let finalFormData = { ...updatedForm };\n    if (updatedForm.license === 'Other' && customLicenseInput.trim()) {\n      finalFormData.license = `Other-${customLicenseInput.trim()}`;\n    }\n    \n    try {\n      // Submit form data to parent component\n      const result = await onSubmit(finalFormData);\n      \n      if (result.success) {\n        setMessage('Form submitted successfully!');\n        setTimeout(() => {\n          setMessage('');\n          onClose();\n        }, 3000);\n      } else {\n        setMessage(result.message);\n      }\n    } catch (error) {\n      console.error('Error in form submission:', error);\n      setMessage('An unexpected error occurred. Please try again.');\n    } finally {\n      setIsSubmitting(false);\n    }\n};\n\n  const formatDate = (dateString) => {\n    if (!dateString) return '';\n    try {\n      const date = new Date(dateString);\n      return date.toISOString().split('T')[0]; //YYYY-MM-DD\n    } catch (e) {\n      return dateString;\n    }\n  };\n\n\n  const handleSaveDraft = () => {\n    // First add any pending tag inputs\n    const updatedForm = addPendingTagInputs();\n    \n    // Handle custom license formatting for drafts\n    let finalFormData = { ...updatedForm };\n    if (updatedForm.license === 'Other' && customLicenseInput.trim()) {\n      finalFormData.license = `Other-${customLicenseInput.trim()}`;\n    }\n    \n    // Sync collections before saving draft\n    finalFormData.sparqlEndpoint = sparqlEndpoints;\n    finalFormData.exampleResource = exampleResources;\n    finalFormData.linkedResources = linkedResources;\n    \n    const existingDraftId = finalFormData.draftId || null;\n    const draftId = existingDraftId || `draft-${Date.now()}`;\n    const draft = {\n      id: draftId,\n      name: finalFormData.title || 'Untitled Draft',\n      date: new Date().toISOString(),\n      formData: {\n        ...finalFormData,\n        draftId: draftId, // Store the draft ID in the form data\n        customLicenseInput: customLicenseInput // Also save the custom license input separately for editing\n      }\n    };\n    \n    // Get existing drafts from localStorage\n    let savedDrafts = [];\n    try {\n      const draftsString = localStorage.getItem('kg-metadata-drafts');\n      if (draftsString) {\n        savedDrafts = JSON.parse(draftsString);\n      }\n    } catch (error) {\n      console.error('Error loading saved drafts:', error);\n    }\n    \n    \n    if (existingDraftId) {\n      savedDrafts = savedDrafts.filter(d => d.id !== existingDraftId);\n    }\n    \n    \n    savedDrafts.push(draft);\n    localStorage.setItem('kg-metadata-drafts', JSON.stringify(savedDrafts));\n    \n    \n    setMessage('Draft saved successfully!');\n    setTimeout(() => setMessage(''), 2000);\n\n    if (onDraftSaved) {\n      onDraftSaved();\n    }\n    setTimeout(() => {\n      onClose();\n    }, 2000); \n  };\n\n\n  return (\n    <div className={`modal-overlay`}>\n    <div className={`modal-content`} onClick={e => e.stopPropagation()}>\n    \n    {message && (\n      <div className={`floating-message`}>\n        <div className={message.includes('success') ? 'success-message' : 'error-message'}>\n          <div className={`message-content`}>{message}</div>\n          <button \n            type=\"button\" \n            className={`message-close-button`} \n            onClick={() => setMessage(null)} \n            aria-label=\"Dismiss message\"\n          >\n            Dismiss\n          </button>\n        </div>\n      </div>\n    )}\n      <div className={`modal-header`}>\n        <h2>Knowledge Graph Metadata</h2>\n        <button className={`modal-close-button`} onClick={onClose}>×</button>\n      </div>\n      \n      <div className={`modal-body`} onClick={(e) => e.stopPropagation()}>\n        \n        <form onSubmit={handleSubmit}>\n          \n          {/* Identifier (auto-generated UUID) */}\n          <div className=\"form-group\">\n            <label htmlFor=\"identifier\">\n              Identifier <span className=\"field-indicator\">auto-generated UUID</span>\n            </label>\n            <div>\n              {formData.identifier.map((id, index) => (\n                <div key={`identifier-${index}`} className=\"uuid-display\">\n                  {id}\n                </div>\n              ))}\n              <div className=\"field-hint\">This identifier is automatically generated and cannot be edited</div>\n            </div>\n          </div>\n          \n          {/* Title */}\n          <div className=\"form-group\">\n            <label htmlFor=\"title\">\n              Title <span className=\"field-indicator required-indicator\">required, 1 value only</span>\n            </label>\n            <input\n              type=\"text\"\n              id=\"title\"\n              name=\"title\"\n              value={formData.title}\n              onChange={handleChange}\n              className={`form-control ${titleValid ? 'form-input-valid' : ''}`}\n              placeholder=\"Enter title\"\n            />\n          </div>\n          \n          {/* Alternative Title */}\n          <div className=\"form-group\">\n            <label htmlFor=\"alternativeTitle\">\n              Alternative Title <span className=\"field-indicator optional-indicator\">optional, multiple values allowed</span>\n            </label>\n            <div className=\"tag-input-container\">\n              <div className=\"tag-input-row\">\n                <input\n                  type=\"text\"\n                  id=\"alternativeTitle\"\n                  value={alternativeTitleInput}\n                  onChange={(e) => {\n                    setAlternativeTitleInput(e.target.value);\n                    setAlternativeTitleInputValid(false);\n                  }}\n                  onBlur={() => {\n                    if (alternativeTitleInput.trim()) setAlternativeTitleInputValid(true);\n                  }}\n                  onKeyPress={(e) => handleKeyPress(e, 'alternativeTitle', alternativeTitleInput, setAlternativeTitleInput)}\n                  className={`tag-input ${alternativeTitleInputValid ? 'tag-input-valid' : ''}`}\n                />\n                <button \n                  type=\"button\" \n                  className=\"tag-add-button\"\n                  onClick={() => {\n                    handleAddTag('alternativeTitle', alternativeTitleInput, setAlternativeTitleInput);\n                    setAlternativeTitleInputValid(false);\n                  }}\n                >\n                  +\n                </button>\n              </div>\n              <div className=\"tag-list\">\n                {formData.alternativeTitle.map((title, index) => (\n                  <div key={`alt-title-${index}`} className=\"tag-item tag-item-valid\">\n                    <span className=\"tag-text\">{title}</span>\n                    <button \n                      type=\"button\"\n                      className=\"tag-remove\"\n                      onClick={() => handleRemoveTag('alternativeTitle', index)}\n                    >\n                      ×\n                    </button>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          {/* Acronym */}\n          <div className=\"form-group\">\n            <label htmlFor=\"acronym\">\n              Acronym <span className=\"field-indicator optional-indicator\">optional, multiple values allowed</span>\n            </label>\n            <div className=\"tag-input-container\">\n              <div className=\"tag-input-row\">\n                <input\n                  type=\"text\"\n                  id=\"acronym\"\n                  value={acronymInput}\n                  onChange={(e) => {\n                    setAcronymInput(e.target.value);\n                    setAcronymInputValid(false);\n                  }}\n                  onBlur={() => setAcronymInputValid(!!acronymInput.trim())}\n                  onKeyPress={(e) => handleKeyPress(e, 'acronym', acronymInput, setAcronymInput)}\n                  className={`tag-input ${acronymInputValid ? 'tag-input-valid' : ''}`}\n                />\n                <button \n                  type=\"button\" \n                  className=\"tag-add-button\"\n                  onClick={() => handleAddTag('acronym', acronymInput, setAcronymInput)}\n                >\n                  +\n                </button>\n              </div>\n              <div className=\"tag-list\">\n                {formData.acronym.map((acr, index) => (\n                  <div key={`acronym-${index}`} className=\"tag-item\">\n                    <span className=\"tag-text\">{acr}</span>\n                    <button \n                      type=\"button\"\n                      className=\"tag-remove\"\n                      onClick={() => handleRemoveTag('acronym', index)}\n                    >\n                      ×\n                    </button>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          {/* Description */}\n          <div className=\"form-group\">\n            <label htmlFor=\"description\">\n              Description <span className=\"field-indicator required-indicator\">required, 1 value only</span>\n            </label>\n            <textarea\n              id=\"description\"\n              name=\"description\"\n              value={formData.description}\n              onChange={handleChange}\n              className={`form-control ${descriptionValid ? 'form-input-valid' : ''}`}\n              rows=\"4\"\n            />\n          </div>\n\n          {/* Language [1,∞] - Required, multiple values */}\n          <div className=\"form-group\">\n            <label htmlFor=\"language\">\n              Language <span className=\"field-indicator required-indicator\">required, multiple values allowed</span>\n            </label>\n            <div className=\"tag-input-container\">\n              <div className=\"tag-input-row\">\n                <input\n                  type=\"text\"\n                  id=\"language\"\n                  name=\"language\"\n                  value={languageInput}\n                  onChange={(e) => setLanguageInput(e.target.value)}\n                  onBlur={validateRegularInput}\n                  onKeyPress={(e) => handleKeyPress(e, 'language', languageInput, setLanguageInput)}\n                  className={`tag-input ${languageInputValid ? 'form-input-valid' : ''}`}\n                />\n                <button \n                  type=\"button\" \n                  className=\"tag-add-button\"\n                  onClick={() => handleAddTag('language', languageInput, setLanguageInput)}\n                >\n                  +\n                </button>\n              </div>\n              <div className=\"tag-list\">\n                {formData.language.map((lang, index) => (\n                  <div key={`language-${index}`} className=\"tag-item\">\n                    <span className=\"tag-text\">{lang}</span>\n                    <button \n                      type=\"button\"\n                      className=\"tag-remove\"\n                      onClick={() => handleRemoveTag('language', index)}\n                    >\n                      ×\n                    </button>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          {/* Keywords [1,∞] - Required, multiple values */}\n          <div className=\"form-group\">\n            <label htmlFor=\"keywords\">\n              Keywords <span className=\"field-indicator required-indicator\">required, multiple values allowed</span>\n            </label>\n            <div className=\"tag-input-container\">\n              <div className=\"tag-input-row\">\n                <input\n                  type=\"text\"\n                  id=\"keywords\"\n                  name=\"keywords\"\n                  value={keywordsInput}\n                  onChange={(e) => setKeywordsInput(e.target.value)}\n                  onBlur={validateRegularInput}\n                  onKeyPress={(e) => handleKeyPress(e, 'keywords', keywordsInput, setKeywordsInput)}\n                  className={`tag-input ${keywordsInputValid ? 'form-input-valid' : ''}`}\n                />\n                <button \n                  type=\"button\" \n                  className=\"tag-add-button\"\n                  onClick={() => handleAddTag('keywords', keywordsInput, setKeywordsInput)}\n                >\n                  +\n                </button>\n              </div>\n              <div className=\"tag-list\">\n                {formData.keywords.map((keyword, index) => (\n                  <div key={`keyword-${index}`} className=\"tag-item\">\n                    <span className=\"tag-text\">{keyword}</span>\n                    <button \n                      type=\"button\"\n                      className=\"tag-remove\"\n                      onClick={() => handleRemoveTag('keywords', index)}\n                    >\n                      ×\n                    </button>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          {/* Type */}\n          <div className=\"form-group\">\n            <label htmlFor=\"type\">\n              Type <span className=\"field-indicator required-indicator\">required</span>\n            </label>\n            <div className={`checkbox-group ${typeValid ? 'form-input-valid' : ''}`}>\n              <div className=\"checkbox-item\">\n                <input\n                  type=\"checkbox\"\n                  name=\"type\"\n                  id=\"typeDataset\"\n                  checked={formData.type.includes('dcat:Dataset')}\n                  onChange={() => handleTypeChange('dcat:Dataset')}\n                  disabled\n                />\n                <label htmlFor=\"typeDataset\">dcat:Dataset <span className=\"required-indicator\">(required)</span></label>\n              </div>\n              <div>\n                <input\n                  type=\"checkbox\"\n                  name=\"type\"\n                  id=\"typeVoidDataset\"\n                  checked={formData.type.includes('void:Dataset')}\n                  onChange={() => handleTypeChange('void:Dataset')}\n                />\n                <label htmlFor=\"typeVoidDataset\">RDF Dataset (void:Dataset)</label>\n              </div>\n            </div>\n          </div>\n\n          {/* Date fields */}\n          <div className=\"form-group\">\n            <label htmlFor=\"createdDate\">\n              Created Date <span className=\"field-indicator optional-indicator\">optional, 1 value only</span>\n            </label>\n            <div className=\"date-input-container\">\n              <input\n                type=\"text\"\n                id=\"createdDate\"\n                name=\"createdDate\"\n                value={formData.createdDate}\n                onChange={handleChange}\n                onBlur={validateDateInput}\n                placeholder=\"YYYY/MM/DD\"\n                className={`date-input ${createdDateError ? 'date-input-error' : ''} ${createdDateValid ? 'date-input-valid' : ''}`}\n              />\n              <input\n                type=\"date\"\n                className=\"date-picker-control\"\n                onChange={(e) => handleDatePickerChange(e, 'createdDate')}\n                aria-label=\"Date picker for Created Date\"\n              />\n            </div>\n            {createdDateError && <div className=\"date-error-message\">{createdDateError}</div>}\n          </div>\n          \n    \n          <div className=\"form-group\">\n            <label htmlFor=\"modifiedDate\">\n              Modified Date <span className=\"field-indicator optional-indicator\">optional, multiple values allowed</span>\n            </label>\n            <div className=\"tag-input-container\">\n              <div className=\"tag-input-row\">\n                <input\n                  type=\"text\"\n                  id=\"modifiedDate\"\n                  name=\"modifiedDate\"\n                  value={modifiedDateInput}\n                  onChange={(e) => setModifiedDateInput(e.target.value)}\n                  onBlur={validateDateInput}\n                  placeholder=\"YYYY/MM/DD\"\n                  className={`date-input ${modifiedDateError ? 'date-input-error' : ''} ${modifiedDateValid ? 'date-input-valid' : ''}`}\n                />\n                <input\n                  type=\"date\"\n                  className=\"date-picker-control\"\n                  onChange={(e) => handleDatePickerChange(e, 'modifiedDate')}\n                  aria-label=\"Date picker for Modified Date\"\n                />\n                <button \n                  type=\"button\" \n                  className=\"tag-add-button\"\n                  onClick={handleAddDate}\n                  disabled={!modifiedDateInput || modifiedDateError}\n                >\n                  +\n                </button>\n              </div>\n              {modifiedDateError && <div className=\"date-error-message\">{modifiedDateError}</div>}\n              <div className=\"tag-list\">\n                {formData.modifiedDate.map((date, index) => (\n                  <div key={`modified-date-${index}`} className=\"tag-item\">\n                    <span className=\"tag-text date-tag\">{date}</span>\n                    <button \n                      type=\"button\"\n                      className=\"tag-remove\"\n                      onClick={() => handleRemoveTag('modifiedDate', index)}\n                    >\n                      ×\n                    </button>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          {/* Version - User input with subtle version ID display */}\n          <div className=\"form-group\">\n            <label htmlFor=\"version\">\n              Version <span className=\"field-indicator required-indicator\">required, 1 value only</span>\n            </label>\n            <input\n              type=\"text\"\n              id=\"version\"\n              name=\"version\"\n              value={formData.version}\n              onChange={handleChange}\n              placeholder=\"e.g. 1.0, 2.5\"\n              required\n              className={`form-control ${versionValid ? 'form-input-valid' : ''}`}\n            />\n            <span className=\"version-id-display\">\n              Full ID: {formData.identifier[0] ? `${formData.identifier[0]}-v${formData.version}` : 'Will be generated from identifier'}\n            </span>\n          </div>\n    \n                      \n          <div className=\"form-group\">\n            <label htmlFor=\"publishedDate\">\n              Published Date <span className=\"field-indicator required-indicator\">required, 1 value only</span>\n            </label>\n            <div className=\"date-input-container\">\n              <input\n                type=\"text\"\n                id=\"publishedDate\"\n                name=\"publishedDate\"\n                value={formData.publishedDate}\n                onChange={handleChange}\n                onBlur={validateDateInput}\n                placeholder=\"YYYY/MM/DD\"\n                required\n                className={`date-input ${publishedDateError ? 'date-input-error' : ''} ${publishedDateValid ? 'date-input-valid' : ''}`}\n              />\n              <input\n                type=\"date\"\n                className=\"date-picker-control\"\n                onChange={(e) => handleDatePickerChange(e, 'publishedDate')}\n                aria-label=\"Date picker for Published Date\"\n              />\n            </div>\n            {publishedDateError && <div className=\"date-error-message\">{publishedDateError}</div>}\n          </div>\n    \n    \n          <div className=\"form-group\">\n          <label htmlFor=\"vocabulariesUsed\">\n              Vocabularies Used <span className=\"field-indicator required-indicator\">required (IRI), multiple values allowed</span>\n          </label>\n          <div className=\"tag-input-container\">\n              <div className=\"tag-input-row\">\n              <input\n                  type=\"text\"\n                  id=\"vocabulariesUsed\"\n                  name=\"vocabulariesUsedInput\"\n                  value={vocabulariesUsedInput}\n                  onChange={(e) => {\n                    setVocabulariesUsedInput(e.target.value);\n                    setVocabulariesUsedInputError('');\n                    setVocabulariesUsedInputValid(false);\n                  }}\n                  onBlur={validateIriInput}\n                  onKeyUp= {(e) => handleKeyPress(e, 'vocabulariesUsed', vocabulariesUsedInput, setVocabulariesUsedInput, setVocabulariesUsedInputError)}\n                  className={`tag-input ${vocabulariesUsedInputError ? 'tag-input-error' : ''} ${vocabulariesUsedInputValid ? 'tag-input-valid' : ''}`}\n              />\n              {vocabulariesUsedInputError && <div className=\"iri-error-message\">{vocabulariesUsedInputError}</div>}\n\n              <button \n                  type=\"button\" \n                  className=\"tag-add-button\"\n                  onClick={() => handleAddTag('vocabulariesUsed', vocabulariesUsedInput, setVocabulariesUsedInput)}\n              >\n                  +\n              </button>\n              </div>\n              <div className=\"tag-list\">\n              {formData.vocabulariesUsed.map((item, index) => (\n                  <div key={`vocabulary-${index}`} className=\"tag-item\">\n                  <span className=\"tag-text\">{item}</span>\n                  <button \n                      type=\"button\"\n                      className=\"tag-remove\"\n                      onClick={() => handleRemoveTag('vocabulariesUsed', index)}\n                  >\n                      ×\n                  </button>\n                  </div>\n              ))}\n              </div>\n              <div className=\"field-hint\"> </div>\n          </div>\n          </div>\n    \n          {/* Metadata Schema [1,∞] - Required, multiple values */}\n          <div className=\"form-group\">\n          <label htmlFor=\"metadataSchema\">\n              Metadata Schema <span className=\"field-indicator required-indicator\">required (IRI), multiple values allowed</span>\n          </label>\n          <div className=\"tag-input-container\">\n              <div className=\"tag-input-row\">\n              <input\n                type=\"text\"\n                id=\"metadataSchema\"\n                name=\"metadataSchemaInput\"\n                value={metadataSchemaInput}\n                onChange={(e) => {\n                  setMetadataSchemaInput(e.target.value);\n                  setMetadataSchemaInputError('');\n                  setMetadataSchemaInputValid(false);\n                }}\n                onBlur={validateIriInput}\n                onKeyPress={(e) => handleKeyPress(e, 'metadataSchema', metadataSchemaInput, setMetadataSchemaInput, setMetadataSchemaInputError)}\n                className={`tag-input ${metadataSchemaInputError ? 'tag-input-error' : ''} ${metadataSchemaInputValid ? 'tag-input-valid' : ''}`}\n              />\n              {metadataSchemaInputError && <div className=\"iri-error-message\">{metadataSchemaInputError}</div>}\n\n              <button \n                  type=\"button\" \n                  className=\"tag-add-button\"\n                  onClick={() => handleAddTag('metadataSchema', metadataSchemaInput, setMetadataSchemaInput)}\n              >\n                  +\n              </button>\n              </div>\n              <div className=\"tag-list\">\n              {formData.metadataSchema.map((item, index) => (\n                  <div key={`metadata-schema-${index}`} className=\"tag-item\">\n                  <span className=\"tag-text\">{item}</span>\n                  <button \n                      type=\"button\"\n                      className=\"tag-remove\"\n                      onClick={() => handleRemoveTag('metadataSchema', index)}\n                  >\n                      ×\n                  </button>\n                  </div>\n              ))}\n              </div>\n              <div className=\"field-hint\"> </div>\n          </div>\n          </div>\n    \n          {/* Primary Reference Document */}\n          <div className=\"form-group\">\n            <label htmlFor=\"primaryReferenceDocument\">\n              Primary Reference Document <span className=\"field-indicator required-indicator\">required (IRI), multiple values allowed</span>\n            </label>\n            <div className=\"tag-input-container\">\n              <div className=\"tag-input-row\">\n              <input\n                type=\"text\"\n                id=\"primaryReferenceDocument\"\n                name=\"primaryReferenceDocInput\"\n                value={primaryReferenceDocInput}\n                onChange={(e) => {\n                  setPrimaryReferenceDocInput(e.target.value);\n                  setPrimaryReferenceDocInputError('');\n                  setPrimaryReferenceDocInputValid(false);\n                }}\n                onBlur={validateIriInput}\n                onKeyUp={(e) => handleKeyPress(e, 'primaryReferenceDocument', primaryReferenceDocInput, setPrimaryReferenceDocInput, setPrimaryReferenceDocInputError)}\n                className={`${primaryReferenceDocInputError ? 'tag-input-error' : ''} ${primaryReferenceDocInputValid ? 'tag-input-valid' : ''}`}\n              />\n              {primaryReferenceDocInputError && <div className=\"iri-error-message\">{primaryReferenceDocInputError}</div>}\n\n                <button \n                  type=\"button\" \n                  className=\"tag-add-button\"\n                  onClick={() => handleAddTag('primaryReferenceDocument', primaryReferenceDocInput, setPrimaryReferenceDocInput)}\n                >\n                  +\n                </button>\n              </div>\n              <div className=\"tag-list\">\n                {formData.primaryReferenceDocument.map((doc, index) => (\n                  <div key={`ref-doc-${index}`} className=\"tag-item\">\n                    <span className=\"tag-text\">{doc}</span>\n                    <button \n                      type=\"button\"\n                      className=\"tag-remove\"\n                      onClick={() => handleRemoveTag('primaryReferenceDocument', index)}\n                    >\n                      ×\n                    </button>\n                  </div>\n                ))}\n              </div>\n              <div className=\"field-hint\"> </div>\n            </div>\n          </div>\n          \n          {/* Meta Graph */}\n          <div className=\"form-group\">\n            <label htmlFor=\"metaGraph\">\n              Meta Graph <span className=\"field-indicator optional-indicator\">optional, multiple values allowed</span>\n            </label>\n            <div className=\"file-upload-section\">\n              <div className=\"file-upload-label\">\n                <span className=\"file-name\">{imageFileName || \"No file selected\"}</span>\n                <button \n                  type=\"button\" \n                  className=\"browse-button\"\n                  onClick={() => fileInputRef.current.click()}\n                >\n                  Browse\n                </button>\n                <input\n          onBlur={validateRegularInput}              type=\"file\"\n                  id=\"metaGraph\"\n                  ref={fileInputRef}\n                  onChange={handleFileUpload}\n                  accept=\"image/*\"\n                  className=\"file-upload-input\"\n                  style={{ display: \"none\" }}\n                />\n              </div>\n              <div className=\"tag-list\">\n                {formData.metaGraph.map((graph, index) => (\n                  <div key={`meta-graph-${index}`} className=\"tag-item\">\n                    <span className=\"tag-text\">{graph}</span>\n                    <button \n                      type=\"button\"\n                      className=\"tag-remove\"\n                      onClick={() => handleRemoveTag('metaGraph', index)}\n                    >\n                      ×\n                    </button>\n                  </div>\n                ))}\n              </div>\n              <div className=\"field-hint\">Upload image files to add to meta graph</div>\n            </div>\n          </div>\n          \n          {/* Statistics */}\n          <div className=\"form-group\">\n            <label htmlFor=\"statistics\">\n              Statistics <span className=\"field-indicator optional-indicator\">optional, multiple values allowed</span>\n            </label>\n            <div className=\"tag-input-container\">\n              <div className=\"tag-input-row\">\n              <input\n                type=\"text\"\n                id=\"statistics\"\n                value={statisticsInput}\n                onChange={(e) => {\n                  setStatisticsInput(e.target.value);\n                  setStatisticsInputValid(false);\n                }}\n                onBlur={() => setStatisticsInputValid(!!statisticsInput.trim())}\n                onKeyPress={(e) => handleKeyPress(e, 'statistics', statisticsInput, setStatisticsInput)}\n                className={`tag-input ${statisticsInputValid ? 'tag-input-valid' : ''}`}\n              />\n              <button \n                  type=\"button\" \n                  className=\"tag-add-button\"\n                  onClick={() => handleAddTag('statistics', statisticsInput, setStatisticsInput)}\n              >\n                  +\n              </button>\n              </div>\n              <div className=\"tag-list\">\n                {formData.statistics.map((stat, index) => (\n                  <div key={`stat-${index}`} className=\"tag-item\">\n                    <span className=\"tag-text\">{stat}</span>\n                    <button \n                      type=\"button\"\n                      className=\"tag-remove\"\n                      onClick={() => handleRemoveTag('statistics', index)}\n                    >\n                      ×\n                    </button>\n                  </div>\n                ))}\n              </div>\n              <div className=\"field-hint\"> </div>\n            </div>\n          </div>\n    \n          {/* Acronym */}\n          <div className=\"form-group\">\n            <label htmlFor=\"acronym\">\n              Acronym <span className=\"field-indicator optional-indicator\">optional, multiple values allowed</span>\n            </label>\n            <div className=\"tag-input-container\">\n              <div className=\"tag-input-row\">\n              <input\n                  type=\"text\"\n                  id=\"acronym\"\n                  value={acronymInput}\n                  onChange={(e) => {\n                    setAcronymInput(e.target.value);\n                    setAcronymInputValid(false);\n                  }}\n                  onBlur={() => setAcronymInputValid(!!acronymInput.trim())}\n                  onKeyPress={(e) => handleKeyPress(e, 'acronym', acronymInput, setAcronymInput)}\n                  className={`tag-input ${acronymInputValid ? 'tag-input-valid' : ''}`}\n              />\n              <button \n                  type=\"button\" \n                  className=\"tag-add-button\"\n                  onClick={() => handleAddTag('acronym', acronymInput, setAcronymInput)}\n              >\n                  +\n              </button>\n              </div>\n              <div className=\"tag-list\">\n                {formData.acronym.map((acr, index) => (\n                  <div key={`acronym-${index}`} className=\"tag-item\">\n                    <span className=\"tag-text\">{acr}</span>\n                    <button \n                      type=\"button\"\n                      className=\"tag-remove\"\n                      onClick={() => handleRemoveTag('acronym', index)}\n                    >\n                      ×\n                    </button>\n                  </div>\n                ))}\n              </div>\n              <div className=\"field-hint\"> </div>\n            </div>\n          </div>\n          \n          {/* Homepage URL (optional, multiple values allowed, IRIs) */}\n          <div className=\"form-group\">\n            <label htmlFor=\"homepageURL\">\n              Homepage URL <span className=\"field-indicator optional-indicator\">optional (IRI), multiple values allowed, IRIs</span>\n            </label>\n            <div className=\"tag-input-container\">\n              <div className=\"tag-input-row\">\n              <input\n                type=\"text\"\n                id=\"homepageURL\"\n                name=\"homepageURLInput\"\n                value={homepageURLInput}\n                onChange={(e) => {\n                  setHomepageURLInput(e.target.value);\n                  setHomepageURLInputError('');\n                  setHomepageURLInputValid(false);\n                }}\n                onBlur={validateIriInput}\n                onKeyPress={(e) => handleKeyPress(e, 'homepageURL', homepageURLInput, setHomepageURLInput, setHomepageURLInputError)}\n                placeholder=\"Enter IRI and press Enter or +\"\n                className={`${homepageURLInputError ? 'tag-input-error' : ''} ${homepageURLInputValid ? 'tag-input-valid' : ''}`}\n              />\n                <button\n                  type=\"button\"\n                  className=\"tag-add-button\"\n                  onClick={() => handleAddTag('homepageURL', homepageURLInput, setHomepageURLInput)}\n                >\n                  +\n                </button>\n              </div>\n              <div className=\"tag-list\">\n                {formData.homepageURL.map((url, index) => (\n                  <div key={`homepage-url-${index}`} className=\"tag-item\">\n                    <span className=\"tag-text\">{url}</span>\n                    <button\n                      type=\"button\"\n                      className=\"tag-remove\"\n                      onClick={() => handleRemoveTag('homepageURL', index)}\n                    >\n                      ×\n                    </button>\n                  </div>\n                ))}\n              </div>\n              {homepageURLInputError && <div className=\"iri-error-message\">{homepageURLInputError}</div>}\n              <div className=\"field-hint\">Press Enter or click + to add IRI</div>\n            </div>\n          </div>\n          \n         {/* Other Pages (optional, multiple values allowed, IRIs) */}\n          <div className=\"form-group\">\n            <label htmlFor=\"otherPages\">\n              Other Pages <span className=\"field-indicator optional-indicator\">optional (IRI), multiple values allowed, IRIs</span>\n            </label>\n            <div className=\"tag-input-container\">\n              <div className=\"tag-input-row\">\n              <input\n                type=\"text\"\n                id=\"otherPages\"\n                name=\"otherPagesInput\"\n                value={otherPagesInput}\n                onChange={(e) => {\n                  setOtherPagesInput(e.target.value);\n                  setOtherPagesInputError('');\n                  setOtherPagesInputValid(false);\n                }}\n                onBlur={validateIriInput}\n                onKeyPress={(e) => handleKeyPress(e, 'otherPages', otherPagesInput, setOtherPagesInput, setOtherPagesInputError)}\n                placeholder=\"Enter IRI and press Enter or +\"\n                className={`tag-input ${otherPagesInputError ? 'tag-input-error' : ''} ${otherPagesInputValid ? 'tag-input-valid' : ''}`}\n              />\n              {otherPagesInputError && <div className=\"iri-error-message\">{otherPagesInputError}</div>}\n\n                <button\n                  type=\"button\"\n                  className=\"tag-add-button\"\n                  onClick={() => handleAddTag('otherPages', otherPagesInput, setOtherPagesInput)}\n                >\n                  +\n                </button>\n              </div>\n              {otherPagesInputError && <div className={`field-error-message`}>{otherPagesInputError}</div>}\n              <div className=\"tag-list\">\n                {formData.otherPages.map((page, index) => (\n                  <div key={`other-page-${index}`} className=\"tag-item\">\n                    <span className=\"tag-text\">{page}</span>\n                    <button\n                      type=\"button\"\n                      className=\"tag-remove\"\n                      onClick={() => handleRemoveTag('otherPages', index)}\n                    >\n                      ×\n                    </button>\n                  </div>\n                ))}\n              </div>\n              <div className=\"field-hint\">Press Enter or click + to add IRI</div>\n            </div>\n          </div>\n\n          {/* Roles Section */}\n          <div className=\"form-section\">\n            <h3 className=\"section-title\">Roles</h3>\n            <div className=\"field-indicator optional-indicator\">optional, multiple submissions allowed</div>\n          </div>\n\n          {/* Display existing roles */}\n          <div className=\"roles-list\">\n            {formData.roles.map((role, index) => (\n              <div key={`role-${role.id || index}`} className=\"distribution-item\">\n                <div className=\"distribution-header\">\n                  <div className=\"distribution-title\">{role.roleType}</div>\n                  <div className=\"distribution-actions\">\n                    <button \n                      type=\"button\"\n                      className=\"edit-button\"\n                      onClick={() => {\n                        setCurrentRole({...role});\n                        handleRemoveRole(index);\n                        document.querySelector('.role-form').scrollIntoView({ behavior: 'smooth' });\n                      }}\n                    >\n                      Edit\n                    </button>\n                    <button \n                      type=\"button\"\n                      className=\"tag-remove\"\n                      onClick={() => handleRemoveRole(index)}\n                    >\n                      ×\n                    </button>\n                  </div>\n                </div>\n                <div className=\"distribution-preview\">\n                  {role.agent ? (\n                    <div className=\"distribution-field\">\n                      <span className=\"field-label\">Agent:</span>\n                      <span className=\"field-value\">{role.agent}</span>\n                    </div>\n                  ) : (\n                    <>\n                      <div className=\"distribution-field\">\n                        <span className=\"field-label\">Given Name:</span>\n                        <span className=\"field-value\">{role.givenName}</span>\n                      </div>\n                      <div className=\"distribution-field\">\n                        <span className=\"field-label\">Mbox:</span>\n                        <span className=\"field-value\">{role.mbox}</span>\n                      </div>\n                    </>\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n\n          {/* Role Form */}\n          <div className=\"role-form\">\n            {/* Role Type Dropdown */}\n            <div className=\"form-group\">\n              <label htmlFor=\"roleType\">\n                Role Type <span className=\"field-indicator required-indicator\">required</span>\n              </label>\n              <select\n                id=\"roleType\"\n                value={currentRole.roleType}\n                onChange={(e) => handleCurrentRoleChange('roleType', e.target.value)}\n                className=\"subfield-input\"\n              >\n                <option value=\"resourceProvider\">resourceProvider</option>\n                <option value=\"custodian\">custodian</option>\n                <option value=\"owner\">owner</option>\n                <option value=\"user\">user</option>\n                <option value=\"distributor\">distributor</option>\n                <option value=\"originator\">originator</option>\n                <option value=\"pointOfContact\">pointOfContact</option>\n                <option value=\"principalInvestigator\">principalInvestigator</option>\n                <option value=\"processor\">processor</option>\n                <option value=\"publisher\">publisher</option>\n                <option value=\"author\">author</option>\n                <option value=\"sponsor\">sponsor</option>\n                <option value=\"coAuthor\">coAuthor</option>\n                <option value=\"collaborator\">collaborator</option>\n                <option value=\"editor\">editor</option>\n                <option value=\"mediator\">mediator</option>\n                <option value=\"rightsHolder\">rightsHolder</option>\n                <option value=\"contributor\">contributor</option>\n                <option value=\"funder\">funder</option>\n                <option value=\"stakeholder\">stakeholder</option>\n              </select>\n            </div>\n\n            {/* Toggle between Agent IRI and Name + mBox */}\n            <div className=\"toggle-container\">\n              <div className=\"toggle-switch-container\">\n                <label className={`toggle-option ${currentRole.inputMode === 'agentIRI' ? 'active' : 'inactive'}`}>\n                  Agent IRI available\n                </label>\n                <label className=\"toggle-switch\">\n                  <input\n                    type=\"checkbox\"\n                    checked={currentRole.inputMode === 'nameEmail'}\n                    onChange={(e) => {\n                      const newMode = e.target.checked ? 'nameEmail' : 'agentIRI';\n                      handleCurrentRoleChange('inputMode', newMode);\n                      \n                      // Clear fields when switching\n                      if (newMode === 'agentIRI') {\n                        handleCurrentRoleChange('givenName', '');\n                        handleCurrentRoleChange('mbox', '');\n                        setCurrentRoleMboxError('');\n                        setCurrentRoleMboxValid(false);\n                      } else {\n                        handleCurrentRoleChange('agent', '');\n                        setCurrentRoleAgentError('');\n                        setCurrentRoleAgentValid(false);\n                      }\n                    }}\n                  />\n                  <span className={`slider ${currentRole.inputMode === 'nameEmail' ? 'active' : ''}`}></span>\n                </label>\n                <label className={`toggle-option ${currentRole.inputMode === 'nameEmail' ? 'active' : 'inactive'}`}>\n                  Name + mBox\n                </label>\n              </div>\n            </div>\n            \n            {/* Role Fields */}\n            <div className=\"role-fields\">\n              {currentRole.inputMode === 'agentIRI' ? (\n                <div className=\"form-group\">\n                  <label htmlFor=\"roleAgent\" className=\"subfield-label\">\n                    Agent <span className=\"field-indicator required-indicator\">required (IRI)</span>\n                  </label>\n                  <input\n                    onBlur={validateIriInput}\n                    type=\"text\"\n                    id=\"roleAgent\"\n                    name=\"currentRoleAgent\"\n                    value={currentRole.agent}\n                    onChange={(e) => {\n                      handleCurrentRoleChange('agent', e.target.value);\n                      setCurrentRoleAgentError('');\n                      setCurrentRoleAgentValid(false);\n                    }}\n                    className={`subfield-input ${currentRoleAgentError ? 'input-error' : ''} ${currentRoleAgentValid ? 'input-valid' : ''}`}\n                  />\n                  {currentRoleAgentError && <div className=\"iri-error-message\">{currentRoleAgentError}</div>}\n                </div> \n              ) : (\n                <>\n                  <div className=\"form-group\">\n                    <label htmlFor=\"roleGivenName\" className=\"subfield-label\">\n                      Given Name <span className=\"field-indicator required-indicator\">required</span>\n                    </label>\n                    <input\n                      onBlur={validateRegularInput}\n                      type=\"text\"\n                      id=\"roleGivenName\"\n                      value={currentRole.givenName}\n                      onChange={(e) => handleCurrentRoleChange('givenName', e.target.value)}\n                      className=\"subfield-input\"\n                    />\n                  </div>\n                  <div className=\"form-group\">\n                    <label htmlFor=\"roleMbox\" className=\"subfield-label\">\n                      Mbox <span className=\"field-indicator required-indicator\">required</span>\n                    </label>\n                    <input\n                      onBlur={validateEmailInput}\n                      type=\"email\"\n                      id=\"roleMbox\"\n                      value={currentRole.mbox}\n                      onChange={(e) => {\n                        handleCurrentRoleChange('mbox', e.target.value);\n                        setCurrentRoleMboxError('');\n                        setCurrentRoleMboxValid(false);\n                      }}\n                      className={`subfield-input ${currentRoleMboxError ? 'input-error' : ''} ${currentRoleMboxValid ? 'input-valid' : ''}`}\n                    />\n                    {currentRoleMboxError && <div className=\"iri-error-message\">{currentRoleMboxError}</div>}\n                  </div>\n                </>\n              )}\n            </div>\n\n            {/* Add Role Button */}\n            <div className=\"form-group\">\n              <button \n                type=\"button\" \n                className=\"add-button\"\n                onClick={handleAddRole}\n              >\n                Add Role\n              </button>\n            </div>\n          </div>\n\n         {/* Distributions Section */}\n         <div className=\"form-section\">\n           <h3 className=\"section-title\">Distributions</h3>\n           <div className=\"field-indicator required-indicator\">required, multiple submissions allowed</div>\n         </div>\n    \n         {/* Display existing distributions */}\n         <div className=\"distributions-list\">\n           {formData.distributions.map((dist, index) => (\n             <div key={`distribution-${index}`} className=\"distribution-item\">\n               <div className=\"distribution-header\">\n                 <div className=\"distribution-title\">{dist.title}</div>\n                 <div className=\"distribution-actions\">\n                      <button \n                        type=\"button\"\n                        className=\"edit-button\"\n                        onClick={() => {\n                          setCurrentDistribution({...dist});\n                          handleRemoveDistribution(index);\n                          document.querySelector('.distribution-form').scrollIntoView({ behavior: 'smooth' });\n                        }}\n                      >\n                        Edit\n                      </button>\n                      <button \n                        type=\"button\"\n                        className=\"tag-remove\"\n                        onClick={() => handleRemoveDistribution(index)}\n                      >\n                        ×\n                      </button>\n                    </div>\n                  </div>\n               <div className=\"distribution-preview\">\n                 <div className=\"distribution-field\">\n                   <span className=\"field-label\">Description:</span>\n                   <span className=\"field-value\">{dist.description}</span>\n                 </div>\n                 <div className=\"distribution-field\">\n                   <span className=\"field-label\">Media Type:</span>\n                   <span className=\"field-value\">{dist.mediaType}</span>\n                 </div>\n                 <div className=\"distribution-field\">\n                   <span className=\"field-label\">Download URL:</span>\n                   <span className=\"field-value\">{dist.downloadURL}</span>\n                 </div>\n                 <div className=\"distribution-field\">\n                   <span className=\"field-label\">Access URL:</span>\n                   <span className=\"field-value\">{dist.accessURL}</span>\n                 </div>\n                 {dist.accessService && (\n                   <div className=\"distribution-field\">\n                     <span className=\"field-label\">Access Service:</span>\n                     <span className=\"field-value\">{dist.accessService}</span>\n                   </div>\n                 )}\n                 {dist.byteSize && (\n                   <div className=\"distribution-field\">\n                     <span className=\"field-label\">Byte Size:</span>\n                     <span className=\"field-value\">{dist.byteSize}</span>\n                   </div>\n                 )}\n                 {dist.compressionFormat && (\n                   <div className=\"distribution-field\">\n                     <span className=\"field-label\">Compression Format:</span>\n                     <span className=\"field-value\">{dist.compressionFormat}</span>\n                   </div>\n                 )}\n                 {dist.packagingFormat && (\n                   <div className=\"distribution-field\">\n                     <span className=\"field-label\">Packaging Format:</span>\n                     <span className=\"field-value\">{dist.packagingFormat}</span>\n                   </div>\n                 )}\n    \n    \n                 {dist.hasPolicy && (\n                   <div className=\"distribution-field\">\n                     <span className=\"field-label\">Has Policy:</span>\n                     <span className=\"field-value\">{dist.hasPolicy}</span>\n                   </div>\n                 )}\n                 {dist.license && (\n                   <div className=\"distribution-field\">\n                     <span className=\"field-label\">license:</span>\n                     <span className=\"field-value\">{dist.license}</span>\n                   </div>\n                 )}\n                 {dist.rights && (\n                   <div className=\"distribution-field\">\n                     <span className=\"field-label\">Rights:</span>\n                     <span className=\"field-value\">{dist.rights}</span>\n                   </div>\n                 )}\n                 {dist.spatialResolution && (\n                   <div className=\"distribution-field\">\n                     <span className=\"field-label\">Spatial Resolution In Meters:</span>\n                     <span className=\"field-value\">{dist.spatialResolution}</span>\n                   </div>\n                 )}\n                 {dist.temporalResolution && (\n                   <div className=\"distribution-field\">\n                     <span className=\"field-label\">Temporal Resolution:</span>\n                     <span className=\"field-value\">{dist.temporalResolution}</span>\n                   </div>\n                 )}\n    \n    \n    \n    \n                 {dist.releaseDate && (\n                   <div className=\"distribution-field\">\n                     <span className=\"field-label\">Release Date:</span>\n                     <span className=\"field-value\">{formatDate(dist.releaseDate)}</span>\n                   </div>\n                 )}\n                 {dist.modificationDate && (\n                   <div className=\"distribution-field\">\n                     <span className=\"field-label\">Modification Date:</span>\n                     <span className=\"field-value\">{formatDate(dist.modificationDate)}</span>\n                   </div>\n                 )}\n                 {dist.issued && (\n                   <div className=\"distribution-field\">\n                     <span className=\"field-label\">Issued:</span>\n                     <span className=\"field-value\">{dist.issued}</span>\n                   </div>\n                 )}\n               </div>\n             </div>\n           ))}\n         </div>\n    \n         {/* Distribution Form */}\n         <div className=\"distribution-form\">\n           <div className=\"distribution-form-header\">\n             <h4>Add New Distribution</h4>\n           </div>\n           \n           {/* Required distribution fields */}\n           <div className=\"form-group\">\n             <label htmlFor=\"distTitle\">\n               Title <span className=\"field-indicator required-indicator\">required</span>\n             </label>\n             <input\n              type=\"text\"\n              id=\"distTitle\"\n              value={currentDistribution.title}\n              onChange={(e) => handleDistributionChange('title', e.target.value)}\n              className=\"subfield-input\"\n             />\n           </div>\n           \n           <div className=\"form-group\">\n             <label htmlFor=\"distDescription\">\n               Description <span className=\"field-indicator required-indicator\">required</span>\n             </label>\n             <textarea\n              id=\"distDescription\"\n               value={currentDistribution.description}\n               onChange={(e) => handleDistributionChange('description', e.target.value)}\n               rows=\"2\"\n               className=\"subfield-input\"\n             ></textarea>\n           </div>\n           \n           <div className=\"form-group\">\n             <label htmlFor=\"distMediaType\">\n               Media Type <span className=\"field-indicator required-indicator\">required</span>\n             </label>\n             <input\n              type=\"text\"\n              id=\"distMediaType\"\n              value={currentDistribution.mediaType}\n              onChange={(e) => handleDistributionChange('mediaType', e.target.value)}\n              className=\"subfield-input\"\n             />\n           </div>\n           \n           <div className=\"form-group\">\n             <label htmlFor=\"distDownloadURL\">\n               Download URL (dcat:downloadURL) <span className=\"field-indicator required-indicator\">required (IRI)</span>\n             </label>\n             <input\n                type=\"url\"\n                id=\"distDownloadURL\"\n                name=\"distDownloadURL\"\n                value={currentDistribution.downloadURL}\n                onChange={(e) => {\n                  handleDistributionChange('downloadURL', e.target.value);\n                  setDistDownloadURLError('');\n                  setDistDownloadURLValid(false);\n                }}\n                onBlur={validateIriInput}\n                className={`subfield-input ${distDownloadURLError ? 'input-error' : ''} ${distDownloadURLValid ? 'input-valid' : ''}`}\n              />\n              {distDownloadURLError && <div className=\"iri-error-message\">{distDownloadURLError}</div>}\n\n           </div>\n           \n           <div className=\"form-group\">\n             <label htmlFor=\"distAccessURL\">\n               Access URL <span className=\"field-indicator required-indicator\">required (IRI)</span>\n             </label>\n             <input\n                type=\"url\"\n                id=\"distAccessURL\"\n                name=\"distAccessURL\"\n                value={currentDistribution.accessURL}\n                onChange={(e) => {\n                  handleDistributionChange('accessURL', e.target.value);\n                  setDistAccessURLError('');\n                  setDistAccessURLValid(false);\n                }}\n                onBlur={validateIriInput}\n                className={`subfield-input ${distAccessURLError ? 'input-error' : ''} ${distAccessURLValid ? 'input-valid' : ''}`}\n              />\n              {distAccessURLError && <div className=\"iri-error-message\">{distAccessURLError}</div>}\n          </div>    \n           {/* Optional distribution fields */}\n           <div className=\"form-group\">\n             <label htmlFor=\"distAccessService\">\n               Access Service <span className=\"field-indicator optional-indicator\">optional</span>\n             </label>\n             <input\n              type=\"text\"\n              id=\"distAccessService\"\n              value={currentDistribution.accessService}\n              onChange={(e) => handleDistributionChange('accessService', e.target.value)}\n              className=\"subfield-input\"\n             />\n           </div>\n           \n           <div className=\"form-group\">\n             <label htmlFor=\"distByteSize\">\n               Byte Size <span className=\"field-indicator optional-indicator\">optional</span>\n             </label>\n             <input\n              type=\"text\"\n              id=\"distByteSize\"\n              value={currentDistribution.byteSize}\n              onChange={(e) => handleDistributionChange('byteSize', e.target.value)}\n              className=\"subfield-input\"\n             />\n           </div>\n           \n           <div className=\"form-group\">\n             <label htmlFor=\"distCompressionFormat\">\n               Compression Format <span className=\"field-indicator optional-indicator\">optional</span>\n             </label>\n             <input\n               type=\"text\"\n               id=\"distCompressionFormat\"\n               name=\"distCompressionFormat\"\n               value={currentDistribution.compressionFormat}\n               onChange={(e) => handleDistributionChange('compressionFormat', e.target.value)}\n               onBlur={validateRegularInput}\n               className={`subfield-input ${distCompressionFormatValid ? 'form-input-valid' : ''}`}\n             />\n           </div>\n           \n           <div className=\"form-group\">\n             <label htmlFor=\"distPackagingFormat\">\n               Packaging Format <span className=\"field-indicator optional-indicator\">optional</span>\n             </label>\n             <input\n               type=\"text\"\n               id=\"distPackagingFormat\"\n               name=\"distPackagingFormat\"\n               value={currentDistribution.packagingFormat}\n               onChange={(e) => handleDistributionChange('packagingFormat', e.target.value)}\n               onBlur={validateRegularInput}\n               className={`subfield-input ${distPackagingFormatValid ? 'form-input-valid' : ''}`}\n             />\n           </div>\n           <div className=\"form-group\">\n             <label htmlFor=\"distHasPolicy\">\n               Has Policy <span className=\"field-indicator optional-indicator\">optional</span>\n             </label>\n             <input\n               type=\"text\"\n               id=\"distHasPolicy\"\n               name=\"distHasPolicy\"\n               value={currentDistribution.hasPolicy}\n               onChange={(e) => handleDistributionChange('hasPolicy', e.target.value)}\n               onBlur={validateRegularInput}\n               className={`subfield-input ${distHasPolicyValid ? 'form-input-valid' : ''}`}\n             />\n           </div>\n           \n           <div className=\"form-group\">\n             <label htmlFor=\"distLicense\">\n               License <span className=\"field-indicator optional-indicator\">optional</span>\n             </label>\n             <input\n               type=\"text\"\n               id=\"distLicense\"\n               name=\"distLicense\"\n               value={currentDistribution.license}\n               onChange={(e) => handleDistributionChange('license', e.target.value)}\n               onBlur={validateRegularInput}\n               className={`subfield-input ${distLicenseValid ? 'form-input-valid' : ''}`}\n             />\n           </div>\n           \n           <div className=\"form-group\">\n             <label htmlFor=\"distRights\">\n               Rights <span className=\"field-indicator optional-indicator\">optional</span>\n             </label>\n             <input\n               type=\"text\"\n               id=\"distRights\"\n               name=\"distRights\"\n               value={currentDistribution.rights}\n               onChange={(e) => handleDistributionChange('rights', e.target.value)}\n               onBlur={validateRegularInput}\n               className={`subfield-input ${distRightsValid ? 'form-input-valid' : ''}`}\n             />\n           </div>\n           <div className=\"form-group\">\n             <label htmlFor=\"distSpatialResolution\">\n               Spatial Resolution In Meters <span className=\"field-indicator optional-indicator\">optional</span>\n             </label>\n             <input\n               type=\"text\"\n               id=\"distSpatialResolution\"\n               name=\"distSpatialResolution\"\n               value={currentDistribution.spatialResolution}\n               onChange={(e) => handleDistributionChange('spatialResolution', e.target.value)}\n               onBlur={validateRegularInput}\n               className={`subfield-input ${distSpatialResolutionValid ? 'form-input-valid' : ''}`}\n             />\n           </div>\n           <div className=\"form-group\">\n             <label htmlFor=\"distTemporalResolution\">\n               Temporal Resolution <span className=\"field-indicator optional-indicator\">optional</span>\n             </label>\n             <input\n               type=\"text\"\n               id=\"distTemporalResolution\"\n               name=\"distTemporalResolution\"\n               value={currentDistribution.temporalResolution}\n               onChange={(e) => handleDistributionChange('temporalResolution', e.target.value)}\n               onBlur={validateRegularInput}\n               className={`subfield-input ${distTemporalResolutionValid ? 'form-input-valid' : ''}`}\n             />\n           </div>\n           <div className=\"form-group\">\n             <label htmlFor=\"distReleaseDate\">\n              Release Date <span className=\"field-indicator optional-indicator\">optional</span>\n            </label>\n            <div className=\"date-input-container\">\n              <input\n                type=\"text\"\n                id=\"distReleaseDate\"\n                name=\"distReleaseDate\"\n                value={currentDistribution.releaseDate}\n                onChange={(e) => handleDistributionChange('releaseDate', e.target.value)}\n                onBlur={validateDateInput}\n                placeholder=\"YYYY/MM/DD\"\n                className={`date-input subfield-input ${distReleaseDateError ? 'date-input-error' : ''}`}\n              />\n              <input\n                type=\"date\"\n                className=\"date-picker-control\"\n                onChange={(e) => handleDatePickerChange(e, 'distReleaseDate')}\n                aria-label=\"Date picker for Release Date\"\n                defaultValue=\"\"\n                tabIndex=\"-1\"\n              />\n            </div>\n            {distReleaseDateError && <div className=\"date-error-message\">{distReleaseDateError}</div>}\n          </div>\n    \n          <div className=\"form-group\">\n            <label htmlFor=\"distModificationDate\">\n              Update/Modification Date <span className=\"field-indicator optional-indicator\">optional</span>\n            </label>\n            <div className=\"date-input-container\">\n              <input\n                type=\"text\"\n                id=\"distModificationDate\"\n                name=\"distModificationDate\"\n                value={currentDistribution.modificationDate}\n                onChange={(e) => handleDistributionChange('modificationDate', e.target.value)}\n                onBlur={validateDateInput}\n                placeholder=\"YYYY/MM/DD\"\n                className={`date-input subfield-input ${distModificationDateError ? 'date-input-error' : ''}`}\n              />\n              <input\n                type=\"date\"\n                className=\"date-picker-control\"\n                onChange={(e) => handleDatePickerChange(e, 'distModificationDate')}\n                aria-label=\"Date picker for Modification Date\"\n                defaultValue=\"\"\n                tabIndex=\"-1\"\n              />\n            </div>\n            {distModificationDateError && <div className=\"date-error-message\">{distModificationDateError}</div>}\n          </div>\n          \n          <div className=\"form-group\">\n            <label htmlFor=\"distIssued\">\n              Issued <span className=\"field-indicator optional-indicator\">optional</span>\n            </label>\n            <input\n              type=\"text\"\n              id=\"distIssued\"\n              name=\"distIssued\"\n              value={currentDistribution.issued}\n              onChange={(e) => handleDistributionChange('issued', e.target.value)}\n              className=\"subfield-input\"\n            />\n          </div>\n    \n           \n          \n           <div className=\"distribution-actions\">\n             <button \n               type=\"button\" \n               className={`add-button`}\n               onClick={handleAddDistribution}\n             >\n               Add Distribution\n             </button>\n           </div>\n         </div>\n         \n         <div className=\"form-group\">\n          <label htmlFor=\"restAPI\">\n              REST API <span className=\"field-indicator optional-indicator\">optional, multiple values allowed</span>\n          </label>\n          <div className=\"tag-input-container\">\n              <div className=\"tag-input-row\">\n              <input\n                  type=\"text\"\n                  id=\"restAPI\"\n                  value={restAPIInput}\n                  onChange={(e) => {\n                    setRestAPIInput(e.target.value);\n                    setRestAPIInputValid(false);\n                  }}\n                  onBlur={() => setRestAPIInputValid(!!restAPIInput.trim())}\n                  onKeyPress={(e) => handleKeyPress(e, 'restAPI', restAPIInput, setRestAPIInput)}\n                  className={`tag-input ${restAPIInputValid ? 'tag-input-valid' : ''}`}\n              />\n              <button \n                  type=\"button\" \n                  className=\"tag-add-button\"\n                  onClick={() => handleAddTag('restAPI', restAPIInput, setRestAPIInput)}\n              >\n                  +\n              </button>\n              </div>\n              <div className=\"tag-list\">\n              {formData.restAPI.map((item, index) => (\n                  <div key={`rest-api-${index}`} className=\"tag-item\">\n                  <span className=\"tag-text\">{item}</span>\n                  <button \n                      type=\"button\"\n                      className=\"tag-remove\"\n                      onClick={() => handleRemoveTag('restAPI', index)}\n                  >\n                      ×\n                  </button>\n                  </div>\n              ))}\n              </div>\n              <div className=\"field-hint\"> </div>\n          </div>\n          </div>\n    \n          {/* SPARQL Endpoints Section */}\n<div className=\"form-section\">\n  <h3 className=\"section-title\">SPARQL Endpoints</h3>\n  <div className=\"field-indicator optional-indicator\">optional, multiple submissions allowed</div>\n  {/* Display existing SPARQL endpoints */}\n  <div className=\"distributions-list\">\n    {sparqlEndpoints.map((endpoint, idx) => (\n      <div key={`sparql-endpoint-${idx}`} className=\"distribution-item\">\n        <div className=\"distribution-header\">\n          <div className=\"distribution-title\">{endpoint.title || '(no title)'}</div>\n          <div className=\"distribution-actions\">\n            <button\n              type=\"button\"\n              className=\"edit-button\"\n              onClick={() => handleEditSparqlEndpoint(idx)}\n              aria-label=\"Edit SPARQL endpoint\"\n            >\n              Edit\n            </button>\n            <button\n              type=\"button\"\n              className=\"tag-remove\"\n              onClick={() => handleRemoveSparqlEndpoint(idx)}\n              aria-label=\"Remove SPARQL endpoint\"\n            >\n              ×\n            </button>\n          </div>\n        </div>\n        <div className=\"distribution-preview\">\n          <div className=\"distribution-field\">\n            <span className=\"field-label\">dcat:DataService:</span>\n            <span className=\"field-value\">{endpoint.dataService}</span>\n          </div>\n          <div className=\"distribution-field\">\n            <span className=\"field-label\">dcat:endpointURL:</span>\n            <span className=\"field-value\">{endpoint.endpointURL}</span>\n          </div>\n          <div className=\"distribution-field\">\n            <span className=\"field-label\">dct:identifier:</span>\n            <span className=\"field-value\">{endpoint.identifier}</span>\n          </div>\n          <div className=\"distribution-field\">\n            <span className=\"field-label\">dct:title:</span>\n            <span className=\"field-value\">{endpoint.title}</span>\n          </div>\n          <div className=\"distribution-field\">\n            <span className=\"field-label\">dcat:endpointDescription:</span>\n            <span className=\"field-value\">{endpoint.endpointDescription}</span>\n          </div>\n          <div className=\"distribution-field\">\n            <span className=\"field-label\">adms:status:</span>\n            <span className=\"field-value\">{endpoint.status}</span>\n          </div>\n        </div>\n      </div>\n    ))}\n  </div>\n  {/* SPARQL Endpoint Form */}\n  <div className=\"distribution-form sparql-endpoint-form\">\n    <div className=\"distribution-form-header\">\n      <h4>Add New SPARQL Endpoint</h4>\n    </div>\n    <div className=\"form-group\">\n      <label htmlFor=\"sparqlDataService\">\n        dcat:DataService <span className=\"field-indicator optional-indicator\">optional</span>\n      </label>\n      <input\n        type=\"text\"\n        id=\"sparqlDataService\"\n        name=\"sparqlDataService\"\n        value={currentSparqlEndpoint.dataService}\n        onChange={e => handleCurrentSparqlEndpointChange('dataService', e.target.value)}\n        onBlur={validateRegularInput}\n        className={`subfield-input ${sparqlDataServiceValid ? 'form-input-valid' : ''}`}\n      />\n    </div>\n    <div className=\"form-group\">\n      <label htmlFor=\"sparqlEndpointURL\">\n        dcat:endpointURL <span className=\"field-indicator optional-indicator\">optional</span>\n      </label>\n      <input\n        type=\"text\"\n        id=\"sparqlEndpointURL\"\n        name=\"sparqlEndpointURL\"\n        value={currentSparqlEndpoint.endpointURL}\n        onChange={e => handleCurrentSparqlEndpointChange('endpointURL', e.target.value)}\n        onBlur={validateIriInput}\n        className={`subfield-input ${sparqlEndpointURLError ? 'form-input-error' : ''} ${sparqlEndpointURLValid ? 'form-input-valid' : ''}`}\n      />\n      {sparqlEndpointURLError && <div className=\"iri-error-message\">{sparqlEndpointURLError}</div>}\n    </div>\n    <div className=\"form-group\">\n      <label htmlFor=\"sparqlIdentifier\">\n        dct:identifier <span className=\"field-indicator optional-indicator\">optional</span>\n      </label>\n      <input\n        type=\"text\"\n        id=\"sparqlIdentifier\"\n        name=\"sparqlIdentifier\"\n        value={currentSparqlEndpoint.identifier}\n        onChange={e => handleCurrentSparqlEndpointChange('identifier', e.target.value)}\n        onBlur={validateRegularInput}\n        className={`subfield-input ${sparqlIdentifierValid ? 'form-input-valid' : ''}`}\n      />\n    </div>\n    <div className=\"form-group\">\n      <label htmlFor=\"sparqlTitle\">\n        dct:title <span className=\"field-indicator optional-indicator\">optional</span>\n      </label>\n      <input\n        type=\"text\"\n        id=\"sparqlTitle\"\n        name=\"sparqlTitle\"\n        value={currentSparqlEndpoint.title}\n        onChange={e => handleCurrentSparqlEndpointChange('title', e.target.value)}\n        onBlur={validateRegularInput}\n        className={`subfield-input ${sparqlTitleValid ? 'form-input-valid' : ''}`}\n      />\n    </div>\n    <div className=\"form-group\">\n      <label htmlFor=\"sparqlEndpointDescription\">\n        dcat:endpointDescription <span className=\"field-indicator optional-indicator\">optional</span>\n      </label>\n      <input\n        type=\"text\"\n        id=\"sparqlEndpointDescription\"\n        name=\"sparqlEndpointDescription\"\n        value={currentSparqlEndpoint.endpointDescription}\n        onChange={e => handleCurrentSparqlEndpointChange('endpointDescription', e.target.value)}\n        onBlur={validateRegularInput}\n        className={`subfield-input ${sparqlEndpointDescriptionValid ? 'form-input-valid' : ''}`}\n      />\n    </div>\n    <div className=\"form-group\">\n      <label htmlFor=\"sparqlStatus\">\n        adms:status <span className=\"field-indicator optional-indicator\">optional</span>\n      </label>\n      <input\n        type=\"text\"\n        id=\"sparqlStatus\"\n        name=\"sparqlStatus\"\n        value={currentSparqlEndpoint.status}\n        onChange={e => handleCurrentSparqlEndpointChange('status', e.target.value)}\n        onBlur={validateRegularInput}\n        className={`subfield-input ${sparqlStatusValid ? 'form-input-valid' : ''}`}\n      />\n    </div>\n    <div className=\"distribution-actions\">\n      <button\n        type=\"button\"\n        className=\"add-button\"\n        onClick={handleAddSparqlEndpoint}\n      >\n        {editingSparqlEndpointIdx !== null ? 'Save SPARQL Endpoint' : 'Add SPARQL Endpoint'}\n      </button>\n      {editingSparqlEndpointIdx !== null && (\n        <button\n          type=\"button\"\n          className=\"cancel-button\"\n          onClick={handleCancelEditSparqlEndpoint}\n        >\n          Cancel\n        </button>\n      )}\n    </div>\n  </div>\n</div>\n\n          {/* Example Resource Section */}\n<div className=\"form-section\">\n  <h3 className=\"section-title\">Example Resources</h3>\n  <div className=\"field-indicator optional-indicator\">optional, multiple submissions allowed</div>\n  \n  {/* Display existing Example Resources */}\n  <div className=\"distributions-list\">\n    {exampleResources.map((resource, idx) => (\n      <div key={`example-resource-${idx}`} className=\"distribution-item\">\n        <div className=\"distribution-header\">\n          <div className=\"distribution-title\">{resource.title || '(no title)'}</div>\n          <div className=\"distribution-actions\">\n            <button\n              type=\"button\"\n              className=\"edit-button\"\n              onClick={() => handleEditExampleResource(idx)}\n              aria-label=\"Edit Example Resource\"\n            >\n              Edit\n            </button>\n            <button\n              type=\"button\"\n              className=\"tag-remove\"\n              onClick={() => handleRemoveExampleResource(idx)}\n              aria-label=\"Remove Example Resource\"\n            >\n              ×\n            </button>\n          </div>\n        </div>\n        <div className=\"distribution-preview\">\n          <div className=\"distribution-field\">\n            <span className=\"field-label\">dcat:accessURL:</span>\n            <span className=\"field-value\">{resource.accessURL}</span>\n          </div>\n          <div className=\"distribution-field\">\n            <span className=\"field-label\">dct:title:</span>\n            <span className=\"field-value\">{resource.title}</span>\n          </div>\n          <div className=\"distribution-field\">\n            <span className=\"field-label\">dcat:mediaType:</span>\n            <span className=\"field-value\">{resource.mediaType}</span>\n          </div>\n          <div className=\"distribution-field\">\n            <span className=\"field-label\">dct:description:</span>\n            <span className=\"field-value\">{resource.description}</span>\n          </div>\n          <div className=\"distribution-field\">\n            <span className=\"field-label\">adms:status:</span>\n            <span className=\"field-value\">{resource.status}</span>\n          </div>\n        </div>\n      </div>\n    ))}\n  </div>\n\n  {/* Example Resource Form */}\n  <div className=\"distribution-form\">\n    <div className=\"form-group\">\n      <label htmlFor=\"exampleResourceAccessURL\">\n        dcat:accessURL <span className=\"field-indicator optional-indicator\">optional (IRI)</span>\n      </label>\n      <input\n        type=\"text\"\n        id=\"exampleResourceAccessURL\"\n        name=\"exampleResourceAccessURL\"\n        value={currentExampleResource.accessURL}\n        onChange={e => handleCurrentExampleResourceChange('accessURL', e.target.value)}\n        onBlur={validateIriInput}\n        className={`subfield-input ${exampleResourceAccessURLError ? 'form-input-error' : ''} ${exampleResourceAccessURLValid ? 'form-input-valid' : ''}`}\n      />\n      {exampleResourceAccessURLError && <div className=\"iri-error-message\">{exampleResourceAccessURLError}</div>}\n    </div>\n    <div className=\"form-group\">\n      <label htmlFor=\"exampleResourceTitle\">\n        dct:title <span className=\"field-indicator optional-indicator\">optional</span>\n      </label>\n      <input\n        type=\"text\"\n        id=\"exampleResourceTitle\"\n        name=\"exampleResourceTitle\"\n        value={currentExampleResource.title}\n        onChange={e => handleCurrentExampleResourceChange('title', e.target.value)}\n        onBlur={validateRegularInput}\n        className={`subfield-input ${exampleResourceTitleValid ? 'form-input-valid' : ''}`}\n      />\n    </div>\n    <div className=\"form-group\">\n      <label htmlFor=\"exampleResourceMediaType\">\n        dcat:mediaType <span className=\"field-indicator optional-indicator\">optional</span>\n      </label>\n      <input\n        type=\"text\"\n        id=\"exampleResourceMediaType\"\n        name=\"exampleResourceMediaType\"\n        value={currentExampleResource.mediaType}\n        onChange={e => handleCurrentExampleResourceChange('mediaType', e.target.value)}\n        onBlur={validateRegularInput}\n        className={`subfield-input ${exampleResourceMediaTypeValid ? 'form-input-valid' : ''}`}\n      />\n    </div>\n    <div className=\"form-group\">\n      <label htmlFor=\"exampleResourceDescription\">\n        dct:description <span className=\"field-indicator optional-indicator\">optional</span>\n      </label>\n      <input\n        type=\"text\"\n        id=\"exampleResourceDescription\"\n        name=\"exampleResourceDescription\"\n        value={currentExampleResource.description}\n        onChange={e => handleCurrentExampleResourceChange('description', e.target.value)}\n        onBlur={validateRegularInput}\n        className={`subfield-input ${exampleResourceDescriptionValid ? 'form-input-valid' : ''}`}\n      />\n    </div>\n    <div className=\"form-group\">\n      <label htmlFor=\"exampleResourceStatus\">\n        adms:status <span className=\"field-indicator optional-indicator\">optional</span>\n      </label>\n      <input\n        type=\"text\"\n        id=\"exampleResourceStatus\"\n        name=\"exampleResourceStatus\"\n        value={currentExampleResource.status}\n        onChange={e => handleCurrentExampleResourceChange('status', e.target.value)}\n        onBlur={validateRegularInput}\n        className={`subfield-input ${exampleResourceStatusValid ? 'form-input-valid' : ''}`}\n      />\n    </div>\n    <div className=\"button-row\">\n      <button\n        type=\"button\"\n        className=\"add-button\"\n        onClick={handleAddExampleResource}\n      >\n        {editingExampleResourceIdx !== null ? 'Save Changes' : 'Add Example Resource'}\n      </button>\n      {editingExampleResourceIdx !== null && (\n        <button\n          type=\"button\"\n          className=\"cancel-button\"\n          onClick={handleCancelEditExampleResource}\n        >\n          Cancel\n        </button>\n      )}\n    </div>\n  </div>\n</div>\n\n          {/* Example Queries [0,∞] - Optional, multiple values */}\n          <div className=\"form-group\">\n          <label htmlFor=\"exampleQueries\">\n              Example Queries <span className=\"field-indicator optional-indicator\">optional, multiple values allowed</span>\n          </label>\n          <div className=\"tag-input-container\">\n              <div className=\"tag-input-row\">\n              <input\n                  type=\"text\"\n                  id=\"exampleQueries\"\n                  name=\"exampleQueries\"\n                  value={exampleQueriesInput}\n                  onChange={(e) => setExampleQueriesInput(e.target.value)}\n                  onBlur={validateRegularInput}\n                  onKeyPress={(e) => handleKeyPress(e, 'exampleQueries', exampleQueriesInput, setExampleQueriesInput)}\n                  className={`tag-input ${exampleQueriesInputValid ? 'form-input-valid' : ''}`}\n              />\n              <button \n                  type=\"button\" \n                  className=\"tag-add-button\"\n                  onClick={() => handleAddTag('exampleQueries', exampleQueriesInput, setExampleQueriesInput)}\n              >\n                  +\n              </button>\n              </div>\n              <div className=\"tag-list\">\n              {formData.exampleQueries.map((item, index) => (\n                  <div key={`example-query-${index}`} className=\"tag-item\">\n                  <span className=\"tag-text\">{item}</span>\n                  <button \n                      type=\"button\"\n                      className=\"tag-remove\"\n                      onClick={() => handleRemoveTag('exampleQueries', index)}\n                  >\n                      ×\n                  </button>\n                  </div>\n              ))}\n              </div>\n              <div className=\"field-hint\"> </div>\n          </div>\n      </div>\n    \n         {/* Keywords [1,∞] - Required, multiple values */}\n         <div className=\"form-group\">\n           <label htmlFor=\"keywords\">\n             Keywords <span className=\"field-indicator required-indicator\">required, multiple values allowed</span>\n           </label>\n           <div className=\"tag-input-container\">\n             <div className=\"tag-input-row\">\n               <input\n                 type=\"text\"\n                 id=\"keywords\"\n                 name=\"keywords\"\n                 value={keywordsInput}\n                 onChange={(e) => setKeywordsInput(e.target.value)}\n                 onBlur={validateRegularInput}\n                 onKeyPress={(e) => handleKeyPress(e, 'keywords', keywordsInput, setKeywordsInput)}\n                 className={`tag-input ${keywordsInputValid ? 'form-input-valid' : ''}`}\n               />\n               <button \n                 type=\"button\" \n                 className=\"tag-add-button\"\n                 onClick={() => handleAddTag('keywords', keywordsInput, setKeywordsInput)}\n               >\n                 +\n               </button>\n             </div>\n             <div className=\"tag-list\">\n               {formData.keywords.map((keyword, index) => (\n                 <div key={`keyword-${index}`} className=\"tag-item\">\n                   <span className=\"tag-text\">{keyword}</span>\n                   <button \n                     type=\"button\"\n                     className=\"tag-remove\"\n                     onClick={() => handleRemoveTag('keywords', index)}\n                   >\n                     ×\n                   </button>\n                 </div>\n               ))}\n             </div>\n             <div className=\"field-hint\"> </div>\n           </div>\n         </div>\n    \n         {/* Category [0,∞] - Optional, multiple values */}\n         <div className=\"form-group\">\n           <label htmlFor=\"category\">\n             Category <span className=\"field-indicator optional-indicator\">optional (IRI), multiple values allowed</span>\n           </label>\n           <div className=\"tag-input-container\">\n             <div className=\"tag-input-row\">\n             <input\n                    type=\"text\"\n                    id=\"category\"\n                    name=\"categoryInput\"\n                    value={categoryInput}\n                    onChange={(e) => {\n                      setCategoryInput(e.target.value);\n                      setCategoryInputError('');\n                      setCategoryInputValid(false);\n                    }}\n                    onBlur={validateIriInput}\n                    onKeyUp={(e) => handleKeyPress(e, 'category', categoryInput, setCategoryInput, setCategoryInputError)}\n                    className={`${categoryInputError ? 'tag-input-error' : ''} ${categoryInputValid ? 'tag-input-valid' : ''}`}\n                  />\n                  {categoryInputError && <div className=\"iri-error-message\">{categoryInputError}</div>}\n\n               <button \n                 type=\"button\" \n                 className=\"tag-add-button\"\n                 onClick={() => handleAddTag('category', categoryInput, setCategoryInput)}\n               >\n                 +\n               </button>\n             </div>\n             <div className=\"tag-list\">\n               {formData.category.map((cat, index) => (\n                 <div key={`category-${index}`} className=\"tag-item\">\n                   <span className=\"tag-text\">{cat}</span>\n                   <button \n                     type=\"button\"\n                     className=\"tag-remove\"\n                     onClick={() => handleRemoveTag('category', index)}\n                   >\n                     ×\n                   </button>\n                 </div>\n               ))}\n             </div>\n             <div className=\"field-hint\"> </div>\n           </div>\n         </div>\n    \n         {/* Publication/References [0,∞] - Optional, multiple values */}\n         <div className=\"form-group\">\n           <label htmlFor=\"publicationReferences\">\n             Publication/References <span className=\"field-indicator optional-indicator\">optional (IRI), multiple values allowed</span>\n           </label>\n           <div className=\"tag-input-container\">\n             <div className=\"tag-input-row\">\n             <input\n                type=\"text\"\n                id=\"publicationReferences\"\n                name=\"publicationReferencesInput\"\n                value={publicationReferencesInput}\n                onChange={(e) => {\n                  setPublicationReferencesInput(e.target.value);\n                  setPublicationReferencesInputError('');\n                  setPublicationReferencesInputValid(false);\n                }}\n                onBlur={validateIriInput}\n                onKeyPress={(e) => handleKeyPress(e, 'publicationReferences', publicationReferencesInput, setPublicationReferencesInput, setPublicationReferencesInputError)}\n                className={`${publicationReferencesInputError ? 'tag-input-error' : ''} ${publicationReferencesInputValid ? 'tag-input-valid' : ''}`}\n              />\n              {publicationReferencesInputError && <div className=\"iri-error-message\">{publicationReferencesInputError}</div>}\n\n               <button \n                 type=\"button\" \n                 className=\"tag-add-button\"\n                 onClick={() => handleAddTag('publicationReferences', publicationReferencesInput, setPublicationReferencesInput)}\n               >\n                 +\n               </button>\n             </div>\n             <div className=\"tag-list\">\n               {formData.publicationReferences.map((ref, index) => (\n                 <div key={`pub-ref-${index}`} className=\"tag-item\">\n                   <span className=\"tag-text\">{ref}</span>\n                   <button \n                     type=\"button\"\n                     className=\"tag-remove\"\n                     onClick={() => handleRemoveTag('publicationReferences', index)}\n                   >\n                     ×\n                   </button>\n                 </div>\n               ))}\n             </div>\n             <div className=\"field-hint\"> </div>\n           </div>\n         </div>\n    \n         {/* Language [1,∞] - Required, multiple values */}\n         <div className=\"form-group\">\n           <label htmlFor=\"language\">\n             Language <span className=\"field-indicator required-indicator\">required, multiple values allowed</span>\n           </label>\n           <div className=\"tag-input-container\">\n             <div className=\"tag-input-row\">\n               <input\n                 type=\"text\"\n                 id=\"language\"\n                 name=\"language\"\n                 value={languageInput}\n                 onChange={(e) => setLanguageInput(e.target.value)}\n                 onBlur={validateRegularInput}\n                 onKeyPress={(e) => handleKeyPress(e, 'language', languageInput, setLanguageInput)}\n                 className={`tag-input ${languageInputValid ? 'form-input-valid' : ''}`}\n               />\n               <button \n                 type=\"button\" \n                 className=\"tag-add-button\"\n                 onClick={() => handleAddTag('language', languageInput, setLanguageInput)}\n               >\n                 +\n               </button>\n             </div>\n             <div className=\"tag-list\">\n               {formData.language.map((lang, index) => (\n                 <div key={`language-${index}`} className=\"tag-item\">\n                   <span className=\"tag-text\">{lang}</span>\n                   <button \n                     type=\"button\"\n                     className=\"tag-remove\"\n                     onClick={() => handleRemoveTag('language', index)}\n                   >\n                     ×\n                   </button>\n                 </div>\n               ))}\n             </div>\n             <div className=\"field-hint\"> </div>\n           </div>\n         </div>\n    \n         {/* IRI Template [0,∞] - Optional, multiple values */}\n         <div className=\"form-group\">\n           <label htmlFor=\"iriTemplate\">\n             IRI Template <span className=\"field-indicator optional-indicator\">optional, multiple values allowed</span>\n           </label>\n           <div className=\"tag-input-container\">\n             <div className=\"tag-input-row\">\n                <input\n                  type=\"text\"\n                  id=\"iriTemplate\"\n                  name=\"iriTemplate\"\n                  value={iriTemplateInput}\n                  onChange={(e) => setIriTemplateInput(e.target.value)}\n                  onBlur={validateRegularInput}\n                  onKeyPress={(e) => handleKeyPress(e, 'iriTemplate', iriTemplateInput, setIriTemplateInput)}\n                  className={`tag-input ${iriTemplateInputValid ? 'form-input-valid' : ''}`}\n                />\n               <button \n                 type=\"button\" \n                 className=\"tag-add-button\"\n                 onClick={() => handleAddTag('iriTemplate', iriTemplateInput, setIriTemplateInput)}\n               >\n                 +\n               </button>\n             </div>\n             <div className=\"tag-list\">\n               {formData.iriTemplate.map((iri, index) => (\n                 <div key={`iri-${index}`} className=\"tag-item\">\n                   <span className=\"tag-text\">{iri}</span>\n                   <button \n                     type=\"button\"\n                     className=\"tag-remove\"\n                     onClick={() => handleRemoveTag('iriTemplate', index)}\n                   >\n                     ×\n                   </button>\n                 </div>\n               ))}\n             </div>\n             <div className=\"field-hint\"> </div>\n           </div>\n         </div>\n    \n         {/* Linked Resources [0,∞] - Optional, collection with target and triples */}\n         <div className=\"form-group\">\n           <label>\n             Linked Resources <span className=\"field-indicator optional-indicator\">optional, multiple values allowed</span>\n           </label>\n           \n           {/* Display existing Linked Resources */}\n           <div className=\"distributions-list\">\n             {linkedResources.map((resource, idx) => (\n               <div key={`linked-resource-${idx}`} className=\"distribution-item\">\n                 <div className=\"distribution-header\">\n                   <div className=\"distribution-title\">{resource.target || '(no target)'}</div>\n                   <div className=\"distribution-actions\">\n                     <button\n                       type=\"button\"\n                       className=\"edit-button\"\n                       onClick={() => handleEditLinkedResource(idx)}\n                       aria-label=\"Edit Linked Resource\"\n                     >\n                       Edit\n                     </button>\n                     <button\n                       type=\"button\"\n                       className=\"tag-remove\"\n                       onClick={() => handleRemoveLinkedResource(idx)}\n                       aria-label=\"Remove Linked Resource\"\n                     >\n                       ×\n                     </button>\n                   </div>\n                 </div>\n                 <div className=\"distribution-details\">\n                   <div><strong>void:target:</strong> {resource.target}</div>\n                   <div><strong>void:triples:</strong> {resource.triples}</div>\n                 </div>\n               </div>\n             ))}\n           </div>\n           \n           {/* Linked Resource Form */}\n           <div className=\"distribution-form\">\n             <div className=\"form-group\">\n               <label htmlFor=\"linkedResourceTarget\">\n                 void:target <span className=\"field-indicator optional-indicator\">optional</span>\n               </label>\n               <input\n                 type=\"text\"\n                 id=\"linkedResourceTarget\"\n                 name=\"linkedResourceTarget\"\n                 value={currentLinkedResource.target}\n                 onChange={e => handleCurrentLinkedResourceChange('target', e.target.value)}\n                 onBlur={validateRegularInput}\n                 className={`subfield-input ${linkedResourceTargetValid ? 'form-input-valid' : ''}`}\n               />\n             </div>\n             <div className=\"form-group\">\n               <label htmlFor=\"linkedResourceTriples\">\n                 void:triples <span className=\"field-indicator optional-indicator\">optional</span>\n               </label>\n               <input\n                 type=\"text\"\n                 id=\"linkedResourceTriples\"\n                 name=\"linkedResourceTriples\"\n                 value={currentLinkedResource.triples}\n                 onChange={e => handleCurrentLinkedResourceChange('triples', e.target.value)}\n                 onBlur={validateRegularInput}\n                 className={`subfield-input ${linkedResourceTriplesValid ? 'form-input-valid' : ''}`}\n               />\n             </div>\n             <div className=\"button-row\">\n               <button \n                 type=\"button\" \n                 className=\"add-button\"\n                 onClick={handleAddLinkedResource}\n               >\n                 {editingLinkedResourceIdx !== null ? 'Save Changes' : 'Add Another LinkSet'}\n               </button>\n               {editingLinkedResourceIdx !== null && (\n                 <button \n                   type=\"button\" \n                   className=\"cancel-button\"\n                   onClick={() => {\n                     setCurrentLinkedResource(emptyLinkedResource);\n                     setEditingLinkedResourceIdx(null);\n                   }}\n                 >\n                   Cancel\n                 </button>\n               )}\n             </div>\n           </div>\n         </div>\n    \n         {/* Access Statement [1] - Required, single value */}\n         <div className=\"form-group\">\n           <label htmlFor=\"accessStatement\">\n             Access Statement <span className=\"field-indicator required-indicator\">required (IRI), 1 value only</span>\n           </label>\n           <input\n                id=\"accessStatement\"\n                name=\"accessStatement\"\n                value={formData.accessStatement}\n                onChange={(e) => {\n                  handleChange(e);\n                  setAccessStatementError('');\n                  setAccessStatementValid(false);\n                }}\n                onBlur={validateIriInput}\n                required\n                rows=\"3\"\n                className={`form-control ${accessStatementValid ? 'form-input-valid' : ''} ${accessStatementError ? 'form-input-error' : ''}`}\n              ></input>\n            {accessStatementError && <div className=\"iri-error-message\">{accessStatementError}</div>}\n\n         </div>\n    \n         {/* Source [0,∞] - Optional, multiple values */}\n         <div className=\"form-group\">\n           <label htmlFor=\"source\">\n             Source <span className=\"field-indicator optional-indicator\">optional (IRI), multiple values allowed</span>\n           </label>\n           <div className=\"tag-input-container\">\n             <div className=\"tag-input-row\">\n             <input\n                  type=\"text\"\n                  id=\"source\"\n                  name=\"sourceInput\"\n                  value={sourceInput}\n                  onChange={(e) => {\n                    setSourceInput(e.target.value);\n                    setSourceInputError('');\n                    setSourceInputValid(false);\n                  }}\n                  onBlur={validateIriInput}\n                  onKeyPress={(e) => handleKeyPress(e, 'source', sourceInput, setSourceInput, setSourceInputError)}\n                  className={`${sourceInputError ? 'tag-input-error' : ''} ${sourceInputValid ? 'tag-input-valid' : ''}`}\n            />\n            {sourceInputError && <div className=\"iri-error-message\">{sourceInputError}</div>}\n\n                              <button \n                 type=\"button\" \n                 className=\"tag-add-button\"\n                 onClick={() => handleAddTag('source', sourceInput, setSourceInput)}\n               >\n                 +\n               </button>\n             </div>\n             <div className=\"tag-list\">\n               {formData.source.map((src, index) => (\n                 <div key={`source-${index}`} className=\"tag-item\">\n                   <span className=\"tag-text\">{src}</span>\n                   <button \n                     type=\"button\"\n                     className=\"tag-remove\"\n                     onClick={() => handleRemoveTag('source', index)}\n                   >\n                     ×\n                   </button>\n                 </div>\n               ))}\n             </div>\n             <div className=\"field-hint\"> </div>\n           </div>\n         </div>\n    \n         {/* Name Space [0,∞] - Optional, multiple values */}\n         <div className=\"form-group\">\n           <label htmlFor=\"nameSpace\">\n             Name Space <span className=\"field-indicator optional-indicator\">optional, multiple values allowed</span>\n           </label>\n           <div className=\"tag-input-container\">\n             <div className=\"tag-input-row\">\n                <input\n                  type=\"text\"\n                  id=\"nameSpace\"\n                  name=\"nameSpace\"\n                  value={nameSpaceInput}\n                  onChange={(e) => setNameSpaceInput(e.target.value)}\n                  onBlur={validateRegularInput}\n                  onKeyPress={(e) => handleKeyPress(e, 'nameSpace', nameSpaceInput, setNameSpaceInput)}\n                  className={`tag-input ${nameSpaceInputValid ? 'form-input-valid' : ''}`}\n                />\n               <button \n                 type=\"button\" \n                 className=\"tag-add-button\"\n                 onClick={() => handleAddTag('nameSpace', nameSpaceInput, setNameSpaceInput)}\n               >\n                 +\n               </button>\n             </div>\n             <div className=\"tag-list\">\n               {formData.nameSpace.map((ns, index) => (\n                 <div key={`namespace-${index}`} className=\"tag-item\">\n                   <span className=\"tag-text\">{ns}</span>\n                   <button \n                     type=\"button\"\n                     className=\"tag-remove\"\n                     onClick={() => handleRemoveTag('nameSpace', index)}\n                   >\n                     ×\n                   </button>\n                 </div>\n               ))}\n             </div>\n             <div className=\"field-hint\"> </div>\n           </div>\n         </div>\n\n          {/* License for Metadata */}\n          <div className=\"form-group\">\n            <label htmlFor=\"license\">\n              Metadata License <span className=\"field-indicator required-indicator\">required, 1 value only</span>\n            </label>\n            <select\n               id=\"license\"\n               name=\"license\"\n               value={formData.license}\n               onChange={(e) => {\n                 handleChange(e);\n                 setLicenseError('');\n                 setLicenseValid(true);\n               }}\n               required\n               className={`form-control ${licenseValid ? 'form-input-valid' : ''} ${licenseError ? 'form-input-error' : ''}`}\n             >\n               <option value=\"\">Select a license...</option>\n               <option value=\"https://opensource.org/licenses/MIT\">MIT License</option>\n               <option value=\"https://opensource.org/licenses/Apache-2.0\">Apache License 2.0</option>\n               <option value=\"https://opensource.org/licenses/GPL-3.0\">GNU General Public License v3.0</option>\n               <option value=\"https://opensource.org/licenses/GPL-2.0\">GNU General Public License v2.0</option>\n               <option value=\"https://opensource.org/licenses/LGPL-3.0\">GNU Lesser General Public License v3.0</option>\n               <option value=\"https://opensource.org/licenses/BSD-3-Clause\">BSD 3-Clause License</option>\n               <option value=\"https://opensource.org/licenses/BSD-2-Clause\">BSD 2-Clause License</option>\n               <option value=\"https://opensource.org/licenses/ISC\">ISC License</option>\n               <option value=\"https://www.boost.org/LICENSE_1_0.txt\">Boost Software License</option>\n               <option value=\"https://opensource.org/licenses/Zlib\">Zlib License</option>\n               <option value=\"http://www.wtfpl.net/\">WTFPL (Do What The F* You Want To Public License)</option>\n               <option value=\"https://opensource.org/licenses/AGPL-3.0\">GNU Affero General Public License (AGPL) v3.0</option>\n               <option value=\"https://opensource.org/licenses/MPL-2.0\">Mozilla Public License (MPL) 2.0</option>\n               <option value=\"https://opensource.org/licenses/EPL-1.0\">Eclipse Public License (EPL)</option>\n               <option value=\"https://opensource.org/licenses/EUPL-1.1\">European Union Public License (EUPL)</option>\n               <option value=\"https://opensource.org/licenses/MS-PL\">Microsoft Public License (Ms-PL)</option>\n               <option value=\"https://opensource.org/licenses/MS-RL\">Microsoft Reciprocal License (Ms-RL)</option>\n               <option value=\"https://opensource.org/licenses/CDDL-1.0\">Common Development and Distribution License (CDDL)</option>\n               <option value=\"https://opensource.org/licenses/Artistic-2.0\">Artistic License 2.0</option>\n               <option value=\"https://opensource.org/licenses/AFL-3.0\">Academic Free License (AFL)</option>\n               <option value=\"https://creativecommons.org/licenses/by/4.0/\">Creative Commons Attribution 4.0</option>\n               <option value=\"https://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0</option>\n               <option value=\"https://creativecommons.org/licenses/by-nc/4.0/\">Creative Commons Attribution-NonCommercial 4.0</option>\n               <option value=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\">Creative Commons Attribution-NonCommercial-ShareAlike 4.0</option>\n               <option value=\"https://creativecommons.org/publicdomain/zero/1.0/\">Creative Commons Zero (Public Domain)</option>\n               <option value=\"https://unlicense.org/\">The Unlicense</option>\n               <option value=\"Other\">Other (specify below)</option>\n             </select>\n             {licenseError && <div className=\"iri-error-message\">{licenseError}</div>}\n             \n             {/* Conditional input field for \"Other\" license */}\n             {formData.license === 'Other' && (\n               <div className=\"custom-license-input\" style={{marginTop: '10px'}}>\n                 <input\n                   type=\"text\"\n                   id=\"customLicense\"\n                   name=\"customLicense\"\n                   placeholder=\"Enter custom license name or URL...\"\n                   value={customLicenseInput}\n                   onChange={(e) => setCustomLicenseInput(e.target.value)}\n                   className=\"form-control\"\n                   style={{fontSize: '14px'}}\n                 />\n               </div>\n             )}\n             \n             <div className=\"field-hint\">This license applies to the metadata record itself, not the dataset content</div>\n          </div>\n        </form>\n       </div>\n     \n     <div className=\"modal-footer\">\n       <button \n         className=\"cancel-button\"\n         onClick={onClose}\n       >\n         Cancel\n       </button>\n    \n       <button \n        className=\"save-draft-button\"\n      onClick={handleSaveDraft}\n      >\n        Save Draft\n      </button>\n    \n       <button \n         className=\"submit-button\"\n         onClick={handleSubmit}\n         disabled={isSubmitting}\n       >\n         {isSubmitting ? 'Submitting...' : 'Submit'}\n       </button>\n     </div>\n    </div>\n    </div>\n    );\n    }\n    \n\nexport default ModalForm;\n","// src/components/DataTable.js\nimport React from 'react';\n\nfunction DataTable({ submissions }) {\n  const downloadJSON = () => {\n    if (submissions.length === 0) {\n      alert('No data to export');\n      return;\n    }\n    \n    // Add browser type and ensure timestamp for all submissions\n    const enrichedData = submissions.map(submission => ({\n      ...submission,\n      browserType: navigator.userAgent,\n      timestamp: submission.timestamp || submission.date || new Date().toISOString(),\n      exportDate: new Date().toISOString()\n    }));\n    \n    // Convert to JSON string with proper formatting\n    const jsonData = JSON.stringify(enrichedData, null, 2);\n    \n    // Create download\n    const blob = new Blob([jsonData], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    \n    link.setAttribute('href', url);\n    link.setAttribute('download', `kg-metadata-${new Date().toISOString().slice(0,10)}.json`);\n    link.style.visibility = 'hidden';\n    \n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  const clearSubmissions = () => {\n    if (window.confirm('Are you sure you want to clear all metadata? This cannot be undone.')) {\n      localStorage.removeItem('kg-metadata-submissions');\n      window.location.reload(); // Reload to update the UI\n    }\n  };\n\n  return (\n    <div className=\"data-table-container\">\n      <div className=\"table-header\">\n        <h2>Metadata Submissions ({submissions.length})</h2>\n        <div className=\"table-actions\">\n          <button \n            onClick={downloadJSON}\n            disabled={submissions.length === 0}\n            className=\"download-button\"\n          >\n            Export JSON\n          </button>\n          <button \n            onClick={clearSubmissions}\n            disabled={submissions.length === 0}\n            className=\"clear-button\"\n          >\n            Clear All\n          </button>\n        </div>\n      </div>\n      \n      {submissions.length > 0 ? (\n        <div className=\"table-scroll\">\n          <table className=\"data-table\">\n            <thead>\n              <tr>\n                <th>Title</th>\n                <th>Description</th>\n                <th>Type</th>\n                <th>Date Submitted</th>\n              </tr>\n            </thead>\n            <tbody>\n              {submissions.map((item, index) => (\n                <tr key={index}>\n                  <td>{item.name}</td>\n                  <td>{item.description}</td>\n                  <td>{item.type}</td>\n                  <td>{new Date(item.date).toLocaleString()}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      ) : (\n        <p className=\"no-data\">No metadata submissions yet</p>\n      )}\n    </div>\n  );\n}\n\nexport default DataTable;","import React, { useState, useEffect, useImperativeHandle, forwardRef } from 'react';\n\n\nconst SavedDrafts = forwardRef(({ onLoadDraft }, ref) => {\n  const [drafts, setDrafts] = useState([]);\n  \n  const loadDrafts = () => {\n    try {\n      const draftsString = localStorage.getItem('kg-metadata-drafts');\n      if (draftsString) {\n        \n        const parsedDrafts = JSON.parse(draftsString);\n        \n        \n        parsedDrafts.sort((a, b) => {\n          const dateA = new Date(a.date);\n          const dateB = new Date(b.date);\n          return dateB - dateA; // Descending order (newest first)\n        });\n        \n        setDrafts(parsedDrafts);\n      } else {\n        setDrafts([]);\n      }\n    } catch (error) {\n      console.error('Error loading saved drafts:', error);\n      setDrafts([]);\n    }\n  };\n  \n  useEffect(() => {\n    loadDrafts();\n  }, []);\n  \n  useImperativeHandle(ref, () => ({\n    refreshDrafts: loadDrafts\n  }));\n  \n  const handleDeleteDraft = (id, e) => {\n    e.stopPropagation(); // Prevent triggering row click\n    \n    if (window.confirm('Are you sure you want to delete this draft?')) {\n      // Filter out the draft to delete\n      const updatedDrafts = drafts.filter(draft => draft.id !== id);\n      \n      // Save back to localStorage\n      localStorage.setItem('kg-metadata-drafts', JSON.stringify(updatedDrafts));\n      \n      // Update state\n      setDrafts(updatedDrafts);\n    }\n  };\n  \n  const handleLoadDraft = (draft) => {\n    // Call the onLoadDraft callback directly without confirmation\n    onLoadDraft(draft.formData);\n  };\n  \n  const clearAllDrafts = () => {\n    if (window.confirm('Are you sure you want to delete all drafts? This cannot be undone.')) {\n      localStorage.removeItem('kg-metadata-drafts');\n      setDrafts([]);\n    }\n  };\n\n  const formatDate = (dateString) => {\n    if (!dateString) return '';\n    try {\n      const date = new Date(dateString);\n      const dateFormatted = date.toISOString().split('T')[0];\n      \n      const hours = date.getHours().toString().padStart(2, '0');\n      const minutes = date.getMinutes().toString().padStart(2, '0');\n      \n      return `${dateFormatted} ${hours}:${minutes}`;\n    } catch (e) {\n      return dateString;\n    }\n  };\n\n  return (\n    <div className=\"data-table-container\">\n      <div className=\"table-header\">\n        <h2>Saved Drafts ({drafts.length})</h2>\n        <div className=\"table-actions\">\n          <button \n            onClick={clearAllDrafts}\n            disabled={drafts.length === 0}\n            className=\"clear-button\"\n          >\n            Clear All\n          </button>\n        </div>\n      </div>\n      \n      {drafts.length > 0 ? (\n        <div className=\"table-scroll\">\n          <table className=\"data-table\">\n            <thead>\n              <tr>\n                <th>Title</th>\n                <th>Date Last Saved</th>\n                <th>Actions</th>\n              </tr>\n            </thead>\n            <tbody>\n              {drafts.map((draft) => (\n                <tr \n                  key={draft.id} \n                  onClick={() => handleLoadDraft(draft)}\n                  style={{ cursor: 'pointer' }}\n                >\n                  <td>{draft.name}</td>\n                  <td>{formatDate(draft.date)}</td>\n                  <td>\n                    <div className=\"draft-actions\">\n                      <button \n                        className=\"load-button\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          handleLoadDraft(draft);\n                        }}\n                      >\n                        Load\n                      </button>\n                      <button \n                        className=\"delete-button\"\n                        onClick={(e) => handleDeleteDraft(draft.id, e)}\n                      >\n                        Delete\n                      </button>\n                    </div>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      ) : (\n        <p className=\"no-data\">No saved drafts</p>\n      )}\n    </div>\n  );\n});\n\nexport default SavedDrafts;","// src/App.js\nimport React, { useState, useEffect, useRef } from 'react';\nimport ModalForm from './components/ModalForm';\nimport DataTable from './components/DataTable';\nimport SavedDrafts from './components/SavedDrafts';\nimport './App.css';\n\nfunction App() {\n  const [submissions, setSubmissions] = useState([]);\n  const [showModal, setShowModal] = useState(false);\n  const [draftToLoad, setDraftToLoad] = useState(null);\n  \n  // Create a ref for the SavedDrafts component\n  const savedDraftsRef = useRef(null);\n  \n  // Load any saved submissions from localStorage on component mount\n  useEffect(() => {\n    const savedSubmissions = localStorage.getItem('kg-metadata-submissions');\n    if (savedSubmissions) {\n      try {\n        setSubmissions(JSON.parse(savedSubmissions));\n      } catch (error) {\n        console.error('Error loading saved submissions:', error);\n      }\n    }\n  }, []);\n  \n  // Save submissions to localStorage whenever they change\n  useEffect(() => {\n    if (submissions.length > 0) {\n      localStorage.setItem('kg-metadata-submissions', JSON.stringify(submissions));\n    }\n  }, [submissions]);\n  \n  // Handle loading a draft\n  const handleLoadDraft = (formData) => {\n    setDraftToLoad(formData);\n    setShowModal(true);\n  };\n  \n  // Handle drafts being saved\n  const handleDraftSaved = () => {\n    // Refresh the saved drafts display\n    if (savedDraftsRef.current) {\n      savedDraftsRef.current.refreshDrafts();\n    }\n  };\n  \n  // Handle opening the modal with a new form\n  const handleOpenModal = () => {\n    setDraftToLoad(null); // Reset any loaded draft\n    setShowModal(true);\n  };\n  \n  // Handle closing the modal\n  const handleCloseModal = () => {\n    setShowModal(false);\n    setDraftToLoad(null); // Reset the loaded draft when closing\n  };\n  \n  // Handle form submission\n  const handleSubmission = async (formData) => {\n    try {\n      // Create submission with complete data and metadata\n      const timestamp = new Date().toISOString();\n      \n      const submission = {\n        // Display data for the table\n        name: formData.title,\n        description: formData.description,\n        type: \"KG-Metadata\",\n        date: timestamp,\n        \n        // Complete form data\n        formData: {\n          ...formData,\n          timestamp: timestamp,\n          browserType: navigator.userAgent,\n          submissionId: `kg-meta-${Date.now()}`\n        }\n      };\n      \n      // Add to submissions\n      const newSubmissions = [...submissions, submission];\n      setSubmissions(newSubmissions);\n      \n      return { success: true, message: 'Metadata submitted successfully!' };\n    } catch (error) {\n      console.error('Error submitting form:', error);\n      return { \n        success: false, \n        message: 'Error submitting metadata. Please try again.' \n      };\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Knowledge Graph Metadata</h1>\n      </header>\n      <main>\n        <div className=\"form-container\">\n          <button \n            className=\"submit-button\" \n            onClick={handleOpenModal}\n            style={{ width: 'auto' }}\n          >\n            Create Metadata - Form/Manual\n          </button>\n        </div>\n        <DataTable submissions={submissions} />\n        \n        {/* Add SavedDrafts component below DataTable */}\n        <div className=\"saved-drafts-section\">\n          <SavedDrafts \n            ref={savedDraftsRef}\n            onLoadDraft={handleLoadDraft} \n          />\n        </div>\n        \n        {showModal && (\n          <ModalForm \n            onSubmit={handleSubmission} \n            onClose={handleCloseModal}\n            initialFormData={draftToLoad}\n            onDraftSaved={handleDraftSaved}\n          />\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}