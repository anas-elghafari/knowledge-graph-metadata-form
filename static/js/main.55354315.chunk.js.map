{"version":3,"sources":["fieldInstructions.js","components/ModalForm.js","components/DataTable.js","components/SavedDrafts.js","App.js","reportWebVitals.js","index.js"],"names":["fieldInstructions","identifier","type","title","alternativeTitle","acronym","description","homepageURL","otherPages","roleCreator","rolePublisher","roleFunder","prov:qualifiedAttribution","createdDate","modifiedDate","publishedDate","vocabulariesUsed","metadataSchema","primaryReferenceDocument","metaGraph","statistics","distTitle","distReleaseDate","distModificationDate","restAPI","sparqlEndpoint","exampleQueries","version","license","keywords","category","publicationReferences","language","iriTemplate","linkedResources","exampleResource","accessStatement","source","nameSpace","categoryInput","distAccessService","distAccessURL","distByteSize","distCompressionFormat","distDescription","distDownloadURL","distHasPolicy","distLicense","distMediaType","distPackagingFormat","distRights","distSpatialResolution","distTemporalResolution","exampleResourceAccessURL","exampleResourceDescription","exampleResourceMediaType","exampleResourceStatus","exampleResourceTitle","homepageURLInput","metadataSchemaInput","otherPagesInput","primaryReferenceDocInput","publicationReferencesInput","roleCreatorAgent","roleCreatorGivenName","roleCreatorMbox","roleFunderAgent","roleFunderGivenName","roleFunderMbox","rolePublisherAgent","rolePublisherGivenName","rolePublisherMbox","sourceInput","sparqlDataService","sparqlEndpointDescription","sparqlEndpointURL","sparqlIdentifier","sparqlStatus","sparqlTitle","vocabulariesUsedInput","ModalForm","_ref","onSubmit","onClose","initialFormData","onDraftSaved","initialFormState","uuidv4","agent","givenName","mbox","distributions","formData","setFormData","useState","isSubmitting","setIsSubmitting","message","setMessage","alternativeTitleInput","setAlternativeTitleInput","acronymInput","setAcronymInput","setHomepageURLInput","setOtherPagesInput","modifiedDateInput","setModifiedDateInput","setPrimaryReferenceDocInput","statisticsInput","setStatisticsInput","keywordsInput","setKeywordsInput","setCategoryInput","setPublicationReferencesInput","languageInput","setLanguageInput","iriTemplateInput","setIriTemplateInput","linkedResourcesInput","setLinkedResourcesInput","exampleResourceInput","setExampleResourceInput","setSourceInput","nameSpaceInput","setNameSpaceInput","imageFileName","setImageFileName","roleCreatorToggle","setRoleCreatorToggle","rolePublisherToggle","setRolePublisherToggle","roleFunderToggle","setRoleFunderToggle","fileInputRef","useRef","createdDateError","setCreatedDateError","publishedDateError","setPublishedDateError","modifiedDateError","setModifiedDateError","distReleaseDateError","setDistReleaseDateError","distModificationDateError","setDistModificationDateError","currentDistribution","setCurrentDistribution","mediaType","downloadURL","accessURL","accessService","byteSize","compressionFormat","packagingFormat","hasPolicy","rights","spatialResolution","temporalResolution","releaseDate","modificationDate","setVocabulariesUsedInput","setMetadataSchemaInput","restAPIInput","setRestAPIInput","exampleQueriesInput","setExampleQueriesInput","emptySparqlEndpoint","dataService","endpointURL","endpointDescription","status","currentSparqlEndpoint","setCurrentSparqlEndpoint","sparqlEndpoints","setSparqlEndpoints","editingSparqlEndpointIdx","setEditingSparqlEndpointIdx","sparqlDataServiceValid","setSparqlDataServiceValid","sparqlEndpointURLValid","setSparqlEndpointURLValid","sparqlEndpointURLError","setSparqlEndpointURLError","sparqlIdentifierValid","setSparqlIdentifierValid","sparqlTitleValid","setSparqlTitleValid","sparqlEndpointDescriptionValid","setSparqlEndpointDescriptionValid","sparqlStatusValid","setSparqlStatusValid","emptyExampleResource","currentExampleResource","setCurrentExampleResource","exampleResources","setExampleResources","editingExampleResourceIdx","setEditingExampleResourceIdx","exampleResourceAccessURLValid","setExampleResourceAccessURLValid","exampleResourceAccessURLError","setExampleResourceAccessURLError","exampleResourceTitleValid","setExampleResourceTitleValid","exampleResourceMediaTypeValid","setExampleResourceMediaTypeValid","exampleResourceDescriptionValid","setExampleResourceDescriptionValid","exampleResourceStatusValid","setExampleResourceStatusValid","handleCurrentSparqlEndpointChange","field","value","prev","[object Object]","handleCurrentExampleResourceChange","handleKeyPress","e","tagType","inputValue","setInputFunction","key","preventDefault","handleAddTag","resetSparqlEndpointForm","resetExampleResourceForm","acronymInputValid","setAcronymInputValid","metaGraphInput","setMetaGraphInput","homepageURLInputError","setHomepageURLInputError","otherPagesInputError","setOtherPagesInputError","primaryReferenceDocInputError","setPrimaryReferenceDocInputError","metaGraphInputError","setMetaGraphInputError","statisticsInputError","setStatisticsInputError","categoryInputError","setCategoryInputError","publicationReferencesInputError","setPublicationReferencesInputError","sourceInputError","setSourceInputError","createdDateValid","setCreatedDateValid","publishedDateValid","setPublishedDateValid","modifiedDateValid","setModifiedDateValid","homepageURLInputValid","setHomepageURLInputValid","otherPagesInputValid","setOtherPagesInputValid","primaryReferenceDocInputValid","setPrimaryReferenceDocInputValid","statisticsInputValid","setStatisticsInputValid","categoryInputValid","setCategoryInputValid","publicationReferencesInputValid","setPublicationReferencesInputValid","sourceInputValid","setSourceInputValid","titleValid","setTitleValid","descriptionValid","setDescriptionValid","typeValid","setTypeValid","licenseValid","setLicenseValid","versionValid","setVersionValid","accessStatementValid","setAccessStatementValid","keywordsInputValid","setKeywordsInputValid","nameSpaceInputValid","setNameSpaceInputValid","languageInputValid","setLanguageInputValid","iriTemplateInputValid","setIriTemplateInputValid","linkedResourcesInputValid","setLinkedResourcesInputValid","restAPIInputValid","setRestAPIInputValid","exampleQueriesInputValid","setExampleQueriesInputValid","distReleaseDateValid","setDistReleaseDateValid","distModificationDateValid","setDistModificationDateValid","alternativeTitleInputValid","setAlternativeTitleInputValid","distLicenseValid","setDistLicenseValid","distRightsValid","setDistRightsValid","distSpatialResolutionValid","setDistSpatialResolutionValid","distTemporalResolutionValid","setDistTemporalResolutionValid","distCompressionFormatValid","setDistCompressionFormatValid","distPackagingFormatValid","setDistPackagingFormatValid","distHasPolicyValid","setDistHasPolicyValid","useEffect","document","body","style","overflow","querySelectorAll","forEach","label","fieldId","getAttribute","setAttribute","timeoutId","setTimeout","clearTimeout","isValidIriString","iriString","console","log","trim","trimmed","test","match","length","validateIriInput","name","target","setErrorFunc","setVocabulariesUsedInputError","setMetadataSchemaInputError","setLicenseError","setAccessStatementError","setRoleCreatorAgentError","setRolePublisherAgentError","setRoleFunderAgentError","setDistDownloadURLError","setDistAccessURLError","setValidFunc","setVocabulariesUsedInputValid","setMetadataSchemaInputValid","setRoleCreatorAgentValid","setRolePublisherAgentValid","setRoleFunderAgentValid","setDistDownloadURLValid","setDistAccessURLValid","iriError","vocabulariesUsedInputError","metadataSchemaInputError","licenseError","accessStatementError","roleCreatorAgentError","rolePublisherAgentError","roleFunderAgentError","distDownloadURLError","distAccessURLError","vocabulariesUsedInputValid","metadataSchemaInputValid","roleCreatorAgentValid","rolePublisherAgentValid","roleFunderAgentValid","distDownloadURLValid","distAccessURLValid","fieldName","setInputFunc","includes","prevFormData","handleChange","validateRegularInput","handleRoleChange","role","validateDateInput","errorMessage","setCustomValidity","parts","split","year","parseInt","month","day","daysInMonth","isLeapYear","date","Date","isNaN","getTime","getFullYear","getMonth","getDate","handleRemoveTag","index","newTags","splice","addPendingTagInputs","updatedFormData","currDist","handleDistributionChange","handleRemoveDistribution","newDistributions","handleDatePickerChange","targetFieldName","formattedDate","replace","handleSubmit","async","updatedForm","missingFields","invalidDates","push","join","result","success","error","formatDate","dateString","toISOString","React","createElement","className","onClick","stopPropagation","aria-label","htmlFor","map","id","onChange","placeholder","onBlur","onKeyPress","acr","rows","lang","keyword","checked","disabled","prevData","newTypes","filter","handleTypeChange","required","onKeyUp","item","doc","current","click","ref","file","files","accept","display","graph","stat","url","page","newToggle","Fragment","dist","querySelector","scrollIntoView","behavior","defaultValue","tabIndex","handleAddDistribution","validateDistribution","endpoint","idx","handleEditSparqlEndpoint","_","i","handleRemoveSparqlEndpoint","handleAddSparqlEndpoint","updated","handleCancelEditSparqlEndpoint","resource","handleEditExampleResource","handleRemoveExampleResource","handleAddExampleResource","handleCancelEditExampleResource","cat","iri","src","ns","handleSaveDraft","existingDraftId","draftId","now","draft","savedDrafts","draftsString","localStorage","getItem","JSON","parse","d","setItem","stringify","DataTable","submissions","downloadJSON","alert","enrichedData","submission","browserType","navigator","userAgent","timestamp","exportDate","jsonData","blob","Blob","URL","createObjectURL","link","slice","visibility","appendChild","removeChild","clearSubmissions","window","confirm","removeItem","location","reload","toLocaleString","SavedDrafts","forwardRef","onLoadDraft","drafts","setDrafts","loadDrafts","parsedDrafts","sort","a","b","dateA","useImperativeHandle","refreshDrafts","handleLoadDraft","clearAllDrafts","cursor","getHours","toString","padStart","getMinutes","handleDeleteDraft","updatedDrafts","App","setSubmissions","showModal","setShowModal","draftToLoad","setDraftToLoad","savedDraftsRef","savedSubmissions","handleOpenModal","width","submissionId","newSubmissions","handleCloseModal","handleDraftSaved","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.55354315.chunk.js","sourcesContent":["const fieldInstructions = {\n    \"identifier\": \"The identifier for KG metadata.\",\n    \"type\": \"The type of object in the description.\",\n    \"title\": \"The name or formal title for the KG.\",\n    \"alternativeTitle\": \"Another name for the KG.\",\n    \"acronym\": \"An acronym used to identify the KG.\",\n    \"description\": \"Provide a human readable description of the KG. Minimally, the description should be in English, and ideally, there would be descriptions available in other languages.\",\n    \n    // URL fields\n    \"homepageURL\": \"Provides minimal information, link to access to data.\",\n    \"otherPages\": \"Provide additional relevant pages for the KG.\",\n    \n    // Roles\n    \"roleCreator\": \"The author of the KG.\",\n    \"rolePublisher\": \"The publisher of the KG (this ID typically has an ROR ID corresponding to the institution to which the authors belong).\",\n    \"roleFunder\": \"The organization(s) that funded the KG building and/or publication.\",\n    \"prov:qualifiedAttribution\": \"The contact point for inquiries about the KG, name and Email of the contact person.\",\n    \n    // Date fields\n    \"createdDate\": \"Provide the date when the KG is created.\",\n    \"modifiedDate\": \"The date when the KG is lastly modified.\",\n    \"publishedDate\": \"The date when the KG is published.\",\n    \n    // Vocabularies and schemas\n    \"vocabulariesUsed\": \"Specify the vocabularies used in the knowledge.\",\n    \"metadataSchema\": \"Specify the file against which to validate the KG metadata. Recommend that IRI is a Profile (https://www.w3.org/TR/dx-prof/).\",\n    \n    // Documentation\n    \"primaryReferenceDocument\": \"Provide a reference to a document, preprint or data paper describing the KG.\",\n    \"metaGraph\": \"Provide an illustration of the graph connectivity through its types and relations between instances.\",\n    \"statistics\": \"Provide a computational representation of the summary statistics of the knowledge graph. See HCLS: https://www.w3.org/TR/hcls-dataset/#s6.\",\n    \n    // Distribution related - not in the reference spreadsheet\n    \"distTitle\": \"Required title for this distribution\",\n    \"distReleaseDate\": \"Provide the release date for this specific distribution.\",\n    \"distModificationDate\": \"The date when this distribution was modified.\",\n    \n\n    \"restAPI\": \"Provide a REST API for the KG.\",\n    \"sparqlEndpoint\": \"Provide a SPARQL endpoint for the KG.\",\n    \"exampleQueries\": \"Provide an exemplar query against the KG.\",\n    \n  \n    \"version\": \"Specify the version of the dataset, if defined.\",\n    \"license\": \"Provide the license that the KG is released with. The Software Ontology defines a set of standard licenses to could be chosen from (see http://www.ebi.ac.uk/swo/license/SWO_0000002).\",\n    \"keywords\": \"Provide a set of keywords for the KG.\",\n    \"category\": \"A main category of the resource. A resource can have multiple themes.\",\n    \"publicationReferences\": \"Provide references for the KG.\",\n    \"language\": \"Languages represented in the knowledge graph.\",\n    \"iriTemplate\": \"Provide a 'J' IRI Templates, following RFC 6570, that individuals are typically identified by.\",\n    \"linkedResources\": \"Specify linkable resources to the knowledge graph.Link to a description of a relationship with another resource.\",\n    \"exampleResource\": \"Provide an example instance in the KG.\",\n    \"accessStatement\": \"Specify any restrictions on the access to the resource, and how to gain legitimate access.\",\n    \"source\": \"Specify the origin or source of data for the KG.\",\n    \"nameSpace\": \"Often, the entities described in a dataset share URIs of a common form. For example, all DBpedia entity URIs start with http://dbpedia.org/resource/. The void:uriSpace property can be used to state that all entity URIs in a dataset start with a given string. In other words, they share a common “URI namespace\",\n\n    // --- ModalForm.js fields missing instructions (auto-added 2025-07-01) ---\n    \"categoryInput\": \" ... \",\n    \"distAccessService\": \" ... \",\n    \"distAccessURL\": \" ... \",\n    \"distByteSize\": \" ... \",\n    \"distCompressionFormat\": \" ... \",\n    \"distDescription\": \" ... \",\n    \"distDownloadURL\": \" ... \",\n    \"distHasPolicy\": \" ... \",\n    \"distLicense\": \" ... \",\n    \"distMediaType\": \" ... \",\n    \"distPackagingFormat\": \" ... \",\n    \"distRights\": \" ... \",\n    \"distSpatialResolution\": \" ... \",\n    \"distTemporalResolution\": \" ... \",\n    \"exampleResourceAccessURL\": \" ... \",\n    \"exampleResourceDescription\": \" ... \",\n    \"exampleResourceMediaType\": \" ... \",\n    \"exampleResourceStatus\": \" ... \",\n    \"exampleResourceTitle\": \" ... \",\n    \"homepageURLInput\": \" ... \",\n    \"metadataSchemaInput\": \" ... \",\n    \"otherPagesInput\": \" ... \",\n    \"primaryReferenceDocInput\": \" ... \",\n    \"publicationReferencesInput\": \" ... \",\n    \"roleCreatorAgent\": \" ... \",\n    \"roleCreatorGivenName\": \" ... \",\n    \"roleCreatorMbox\": \" ... \",\n    \"roleFunderAgent\": \" ... \",\n    \"roleFunderGivenName\": \" ... \",\n    \"roleFunderMbox\": \" ... \",\n    \"rolePublisherAgent\": \" ... \",\n    \"rolePublisherGivenName\": \" ... \",\n    \"rolePublisherMbox\": \" ... \",\n    \"sourceInput\": \" ... \",\n    \"sparqlDataService\": \" ... \",\n    \"sparqlEndpointDescription\": \" ... \",\n    \"sparqlEndpointURL\": \" ... \",\n    \"sparqlIdentifier\": \" ... \",\n    \"sparqlStatus\": \" ... \",\n    \"sparqlTitle\": \" ... \",\n    \"vocabulariesUsedInput\": \" ... \",\n  };\n  \n  export default fieldInstructions;","import React, { useState, useEffect, useRef } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport fieldInstructions from '../fieldInstructions';\n\nfunction ModalForm({ onSubmit, onClose, initialFormData = null, onDraftSaved = null }) {\n  // Initial form state\n  const initialFormState = {\n    identifier: [uuidv4()], // Auto-generate UUID\n    type: ['dcat:Dataset'], // Default value is dcat:Dataset\n    title: '',\n    description: '',\n    \n    // Date fields\n    createdDate: '',\n    modifiedDate: [],\n    publishedDate: '',\n    \n    alternativeTitle: [],\n    acronym: [],\n    homepageURL: [],\n    otherPages: [],\n    \n    // Role fields\n    roleCreator: {\n      agent: '',\n      givenName: '',\n      mbox: ''\n    },\n    rolePublisher: {\n      agent: '',\n      givenName: '',\n      mbox: ''\n    },\n    roleFunder: {\n      agent: '',\n      givenName: '',\n      mbox: ''\n    },\n    \n    // Other fields\n    license: '',\n    version: '',\n\n    // Distributions array\n    distributions: [],\n    \n    primaryReferenceDocument: [],\n    metaGraph: [],\n    statistics: [],\n    vocabulariesUsed: [],\n    metadataSchema: [],\n    restAPI: [],\n    sparqlEndpoint: [],\n    exampleQueries: [],\n    keywords: [],\n    category: [],\n    publicationReferences: [],\n    language: [],\n    iriTemplate: [],\n    linkedResources: [],\n    exampleResource: [],\n    accessStatement: '',\n    source: [],\n    nameSpace: []\n  };\n\n  const [formData, setFormData] = useState(initialFormData || initialFormState);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [message, setMessage] = useState('');\n  // No longer need identifierInput state since it's auto-generated\n  const [alternativeTitleInput, setAlternativeTitleInput] = useState('');\n  const [acronymInput, setAcronymInput] = useState('');\n  const [homepageURLInput, setHomepageURLInput] = useState('');\n  const [otherPagesInput, setOtherPagesInput] = useState('');\n  const [modifiedDateInput, setModifiedDateInput] = useState('');\n  const [primaryReferenceDocInput, setPrimaryReferenceDocInput] = useState('');\n  const [statisticsInput, setStatisticsInput] = useState('');\n  const [keywordsInput, setKeywordsInput] = useState('');\n  const [categoryInput, setCategoryInput] = useState('');\n  const [publicationReferencesInput, setPublicationReferencesInput] = useState('');\n  const [languageInput, setLanguageInput] = useState('');\n  const [iriTemplateInput, setIriTemplateInput] = useState('');\n  const [linkedResourcesInput, setLinkedResourcesInput] = useState('');\n  const [exampleResourceInput, setExampleResourceInput] = useState('');\n  const [sourceInput, setSourceInput] = useState('');\n  const [nameSpaceInput, setNameSpaceInput] = useState('');\n  const [imageFileName, setImageFileName] = useState('');\n  const [roleCreatorToggle, setRoleCreatorToggle] = useState('agentIRI'); // 'agentIRI' or 'nameEmail'\n  const [rolePublisherToggle, setRolePublisherToggle] = useState('agentIRI');\n  const [roleFunderToggle, setRoleFunderToggle] = useState('agentIRI');\n\n  const fileInputRef = useRef(null);\n\n  const [createdDateError, setCreatedDateError] = useState('');\n  const [publishedDateError, setPublishedDateError] = useState('');\n  const [modifiedDateError, setModifiedDateError] = useState('');\n  const [distReleaseDateError, setDistReleaseDateError] = useState('');\n  const [distModificationDateError, setDistModificationDateError] = useState('');\n\n  // New state for distribution editing\n  const [currentDistribution, setCurrentDistribution] = useState({\n    title: '',\n    description: '',\n    mediaType: '',\n    downloadURL: '',\n    accessURL: '',\n    accessService: '',\n    byteSize: '',\n    compressionFormat: '',\n    packagingFormat: '',\n    hasPolicy: '',\n    license: '',\n    rights:'',\n    spatialResolution: '',\n    temporalResolution: '',\n    releaseDate: '',\n    modificationDate: ''\n  });\n\n  const [vocabulariesUsedInput, setVocabulariesUsedInput] = useState('');\n  const [metadataSchemaInput, setMetadataSchemaInput] = useState('');\n  const [restAPIInput, setRestAPIInput] = useState('');\n  const [exampleQueriesInput, setExampleQueriesInput] = useState('');\n\n// SPARQL Endpoints Section State\nconst emptySparqlEndpoint = {\n  dataService: '',\n  endpointURL: '',\n  identifier: '',\n  title: '',\n  endpointDescription: '',\n  status: ''\n};\nconst [currentSparqlEndpoint, setCurrentSparqlEndpoint] = useState(emptySparqlEndpoint);\nconst [sparqlEndpoints, setSparqlEndpoints] = useState([]);\nconst [editingSparqlEndpointIdx, setEditingSparqlEndpointIdx] = useState(null);\nconst [sparqlDataServiceValid, setSparqlDataServiceValid] = useState(false);\nconst [sparqlEndpointURLValid, setSparqlEndpointURLValid] = useState(false);\nconst [sparqlEndpointURLError, setSparqlEndpointURLError] = useState('');\nconst [sparqlIdentifierValid, setSparqlIdentifierValid] = useState(false);\nconst [sparqlTitleValid, setSparqlTitleValid] = useState(false);\nconst [sparqlEndpointDescriptionValid, setSparqlEndpointDescriptionValid] = useState(false);\nconst [sparqlStatusValid, setSparqlStatusValid] = useState(false);\n\n// Example Resource Section State\nconst emptyExampleResource = {\n  accessURL: '',\n  title: '',\n  mediaType: '',\n  description: '',\n  status: ''\n};\nconst [currentExampleResource, setCurrentExampleResource] = useState(emptyExampleResource);\nconst [exampleResources, setExampleResources] = useState([]);\nconst [editingExampleResourceIdx, setEditingExampleResourceIdx] = useState(null);\nconst [exampleResourceAccessURLValid, setExampleResourceAccessURLValid] = useState(false);\nconst [exampleResourceAccessURLError, setExampleResourceAccessURLError] = useState('');\nconst [exampleResourceTitleValid, setExampleResourceTitleValid] = useState(false);\nconst [exampleResourceMediaTypeValid, setExampleResourceMediaTypeValid] = useState(false);\nconst [exampleResourceDescriptionValid, setExampleResourceDescriptionValid] = useState(false);\nconst [exampleResourceStatusValid, setExampleResourceStatusValid] = useState(false);\n\nconst handleCurrentSparqlEndpointChange = (field, value) => {\n  setCurrentSparqlEndpoint(prev => ({ ...prev, [field]: value }));\n};\n\nconst handleCurrentExampleResourceChange = (field, value) => {\n  setCurrentExampleResource(prev => ({ ...prev, [field]: value }));\n};\n\n// Handle Enter key press for tag inputs\nconst handleKeyPress = (e, tagType, inputValue, setInputFunction) => {\n  if (e.key === 'Enter') {\n    e.preventDefault();\n    handleAddTag(tagType, inputValue, setInputFunction);\n  }\n};\n\nconst resetSparqlEndpointForm = () => {\n  setCurrentSparqlEndpoint(emptySparqlEndpoint);\n  setEditingSparqlEndpointIdx(null);\n  setSparqlDataServiceValid(false);\n  setSparqlEndpointURLValid(false);\n  setSparqlEndpointURLError('');\n  setSparqlIdentifierValid(false);\n  setSparqlTitleValid(false);\n  setSparqlEndpointDescriptionValid(false);\n  setSparqlStatusValid(false);\n};\n\nconst resetExampleResourceForm = () => {\n  setCurrentExampleResource(emptyExampleResource);\n  setEditingExampleResourceIdx(null);\n  setExampleResourceAccessURLValid(false);\n  setExampleResourceAccessURLError('');\n  setExampleResourceTitleValid(false);\n  setExampleResourceMediaTypeValid(false);\n  setExampleResourceDescriptionValid(false);\n  setExampleResourceStatusValid(false);\n};\n\nconst handleAddSparqlEndpoint = () => {\n  if (editingSparqlEndpointIdx !== null) {\n    // Save edits\n    const updated = [...sparqlEndpoints];\n    updated[editingSparqlEndpointIdx] = currentSparqlEndpoint;\n    setSparqlEndpoints(updated);\n  } else {\n    setSparqlEndpoints(prev => [...prev, currentSparqlEndpoint]);\n  }\n  resetSparqlEndpointForm();\n};\n\nconst handleEditSparqlEndpoint = (idx) => {\n  setCurrentSparqlEndpoint(sparqlEndpoints[idx]);\n  setEditingSparqlEndpointIdx(idx);\n  // Optionally set valid states for fields if desired\n};\n\nconst handleRemoveSparqlEndpoint = (idx) => {\n  setSparqlEndpoints(prev => prev.filter((_, i) => i !== idx));\n  if (editingSparqlEndpointIdx === idx) {\n    resetSparqlEndpointForm();\n  }\n};\n\nconst handleCancelEditSparqlEndpoint = () => {\n  resetSparqlEndpointForm();\n};\n\nconst handleAddExampleResource = () => {\n  if (editingExampleResourceIdx !== null) {\n    // Save edits\n    const updated = [...exampleResources];\n    updated[editingExampleResourceIdx] = currentExampleResource;\n    setExampleResources(updated);\n  } else {\n    setExampleResources(prev => [...prev, currentExampleResource]);\n  }\n  resetExampleResourceForm();\n};\n\nconst handleEditExampleResource = (idx) => {\n  setCurrentExampleResource(exampleResources[idx]);\n  setEditingExampleResourceIdx(idx);\n  // Optionally set valid states based on current values\n};\n\nconst handleRemoveExampleResource = (idx) => {\n  setExampleResources(prev => prev.filter((_, i) => i !== idx));\n  if (editingExampleResourceIdx === idx) {\n    resetExampleResourceForm();\n  }\n};\n\nconst handleCancelEditExampleResource = () => {\n  resetExampleResourceForm();\n};\n\n  const [acronymInputValid, setAcronymInputValid] = useState(false);\n  const [metaGraphInput, setMetaGraphInput] = useState('');\n\n  const [homepageURLInputError, setHomepageURLInputError] = useState('');\n  const [otherPagesInputError, setOtherPagesInputError] = useState('');\n  const [primaryReferenceDocInputError, setPrimaryReferenceDocInputError] = useState('');\n  const [metaGraphInputError, setMetaGraphInputError] = useState('');\n  const [statisticsInputError, setStatisticsInputError] = useState('');\n  const [categoryInputError, setCategoryInputError] = useState('');\n  const [publicationReferencesInputError, setPublicationReferencesInputError] = useState('');\n  const [sourceInputError, setSourceInputError] = useState('');\n\n  // Valid states for date fields\n  const [createdDateValid, setCreatedDateValid] = useState(false);\n  const [publishedDateValid, setPublishedDateValid] = useState(false);\n  const [modifiedDateValid, setModifiedDateValid] = useState(false);\n\n  // Valid states for IRI fields (removed metaGraph)\n  const [homepageURLInputValid, setHomepageURLInputValid] = useState(false);\n  const [otherPagesInputValid, setOtherPagesInputValid] = useState(false);\n  const [primaryReferenceDocInputValid, setPrimaryReferenceDocInputValid] = useState(false);\n  const [statisticsInputValid, setStatisticsInputValid] = useState(false);\n  const [categoryInputValid, setCategoryInputValid] = useState(false);\n  const [publicationReferencesInputValid, setPublicationReferencesInputValid] = useState(false);\n  const [sourceInputValid, setSourceInputValid] = useState(false);\n\n  // Valid states for other fields\n  const [titleValid, setTitleValid] = useState(false);\n  const [descriptionValid, setDescriptionValid] = useState(false);\n  const [typeValid, setTypeValid] = useState(false);\n  const [licenseValid, setLicenseValid] = useState(false);\n  const [versionValid, setVersionValid] = useState(false);\n  const [accessStatementValid, setAccessStatementValid] = useState(false);\n  const [keywordsInputValid, setKeywordsInputValid] = useState(false);\n  const [nameSpaceInputValid, setNameSpaceInputValid] = useState(false);\n  const [languageInputValid, setLanguageInputValid] = useState(false);\n  const [iriTemplateInputValid, setIriTemplateInputValid] = useState(false);\n  const [linkedResourcesInputValid, setLinkedResourcesInputValid] = useState(false);\n  const [restAPIInputValid, setRestAPIInputValid] = useState(false);\n  const [exampleQueriesInputValid, setExampleQueriesInputValid] = useState(false);\n\n  const [distReleaseDateValid, setDistReleaseDateValid] = useState(false);\n  const [distModificationDateValid, setDistModificationDateValid] = useState(false);\n  // No longer need identifierInputValid state since it's auto-generated\n  const [alternativeTitleInputValid, setAlternativeTitleInputValid] = useState(false);\n  const [distLicenseValid, setDistLicenseValid] = useState(false);\n  const [distRightsValid, setDistRightsValid] = useState(false);\n  const [distSpatialResolutionValid, setDistSpatialResolutionValid] = useState(false);\n  const [distTemporalResolutionValid, setDistTemporalResolutionValid] = useState(false);\n  const [distCompressionFormatValid, setDistCompressionFormatValid] = useState(false);\n  const [distPackagingFormatValid, setDistPackagingFormatValid] = useState(false);\n  const [distHasPolicyValid, setDistHasPolicyValid] = useState(false);\n\n  useEffect(() => {\n      if (initialFormData) {\n        setFormData(initialFormData);\n      }\n    }, [initialFormData]);\n\n    \n  useEffect(() => {\n    document.body.style.overflow = 'hidden';\n    \n    // Re-enable scrolling when component unmounts\n    return () => {\n      document.body.style.overflow = 'auto';\n    };\n  }, []);\n  \n  useEffect(() => {\n    const labels = document.querySelectorAll('.form-group label');\n    \n    // Loop through each label\n    labels.forEach(label => {\n      // Get the 'for' attribute which connects to the input ID\n      const fieldId = label.getAttribute('for');\n      \n      // If we have instructions for this field, add the tooltip\n      if (fieldId && fieldInstructions[fieldId]) {\n        label.setAttribute('data-tooltip', fieldInstructions[fieldId]);\n        label.setAttribute('tabindex', '0'); // Make focusable for accessibility\n      }\n    });\n  }, []);\n\n\n  useEffect(() => {\n    let timeoutId;\n    if (message) {\n      timeoutId = setTimeout(() => {\n        setMessage(null);\n      }, 20000);\n    }\n    return () => timeoutId && clearTimeout(timeoutId);\n  }, [message]);\n\n\n\n\n    const isValidIriString = (iriString) => {\n      console.log('Validating IRI:', iriString);\n      \n      // Allow empty values for optional fields\n      if (!iriString || !iriString.trim()) {\n        console.log('IRI is empty - allowed for optional fields');\n        return null;\n      }\n      \n      const trimmed = iriString.trim();\n      \n      // Check for obviously invalid characters at the start\n      if (/^[@#{}|\\\\^`<>\"']/.test(trimmed)) {\n        return 'IRI cannot start with invalid characters.';\n      }\n      \n      // Basic scheme check - IRI must have a scheme\n      if (!/^[a-zA-Z][a-zA-Z0-9+.-]*:/.test(trimmed)) {\n        return 'IRI must have a valid scheme (e.g., http:, https:, ftp:).';\n      }\n      \n      // Check for invalid characters that should not appear in IRIs\n      if (/[\\s<>\"{}|\\\\^`]/.test(trimmed)) {\n        return 'IRI contains invalid characters.';\n      }\n      \n      // Check for unmatched brackets\n      const openBrackets = (trimmed.match(/\\[/g) || []).length;\n      const closeBrackets = (trimmed.match(/\\]/g) || []).length;\n      if (openBrackets !== closeBrackets) {\n        return 'IRI has unmatched brackets.';\n      }\n      \n      // Check for @ symbol in inappropriate places (not in userinfo or email schemes)\n      if (/@/.test(trimmed) && !/^(mailto:|http:\\/\\/[^@]*@|https:\\/\\/[^@]*@)/.test(trimmed)) {\n        return 'IRI contains @ symbol in invalid position.';\n      }\n      \n      console.log('IRI is valid');\n      return null;\n    };\n\n\n    const validateIriInput = (e) => {\n      const { name, value } = e.target;\n      \n      // Map field names to their error setter functions - EXPANDED LIST\n      const errorSetters = {\n        'homepageURLInput': setHomepageURLInputError,\n        'otherPagesInput': setOtherPagesInputError,\n        'vocabulariesUsedInput': setVocabulariesUsedInputError,\n        'metadataSchemaInput': setMetadataSchemaInputError,\n        'primaryReferenceDocInput': setPrimaryReferenceDocInputError,\n        'license': setLicenseError,\n        'categoryInput': setCategoryInputError,\n        'publicationReferencesInput': setPublicationReferencesInputError,\n        'accessStatement': setAccessStatementError,\n        'sourceInput': setSourceInputError,\n        'roleCreatorAgent': setRoleCreatorAgentError,\n        'rolePublisherAgent': setRolePublisherAgentError,\n        'roleFunderAgent': setRoleFunderAgentError,\n        'distDownloadURL': setDistDownloadURLError,\n        'distAccessURL': setDistAccessURLError,\n        'sparqlEndpointURL': setSparqlEndpointURLError,\n        'exampleResourceAccessURL': setExampleResourceAccessURLError\n      };\n      \n      // Map field names to their valid setter functions - EXPANDED LIST\n      const validSetters = {\n        'homepageURLInput': setHomepageURLInputValid,\n        'otherPagesInput': setOtherPagesInputValid,\n        'vocabulariesUsedInput': setVocabulariesUsedInputValid,\n        'metadataSchemaInput': setMetadataSchemaInputValid,\n        'primaryReferenceDocInput': setPrimaryReferenceDocInputValid,\n        'license': setLicenseValid,\n        \n        'categoryInput': setCategoryInputValid,\n        'publicationReferencesInput': setPublicationReferencesInputValid,\n        'accessStatement': setAccessStatementValid,\n        'sourceInput': setSourceInputValid,\n        'roleCreatorAgent': setRoleCreatorAgentValid,\n        'rolePublisherAgent': setRolePublisherAgentValid,\n        'roleFunderAgent': setRoleFunderAgentValid,\n        'distDownloadURL': setDistDownloadURLValid,\n        'distAccessURL': setDistAccessURLValid,\n        'sparqlEndpointURL': setSparqlEndpointURLValid,\n        'exampleResourceAccessURL': setExampleResourceAccessURLValid\n      };\n      \n      const setErrorFunc = errorSetters[name];\n      const setValidFunc = validSetters[name];\n      \n      if (!setErrorFunc || !setValidFunc) return; // Field doesn't need IRI validation\n      // DEBUG: Log which field is being validated\n      // console.log('Validating IRI for field:', name, value);\n      \n      // Skip validation for empty optional fields\n      if (!value || !value.trim()) {\n        setErrorFunc('');\n        setValidFunc(false);\n        return;\n      }\n      \n      const iriError = isValidIriString(value);\n      if (iriError) {\n        setErrorFunc(iriError);\n        setValidFunc(false);\n      } else {\n        setErrorFunc('');\n        setValidFunc(true);\n      }\n    };\n    \n    // 2. Add new state declarations for error and valid states (add these to your existing state declarations):\n    \n    // Error states for new IRI fields\n    const [vocabulariesUsedInputError, setVocabulariesUsedInputError] = useState('');\n    const [metadataSchemaInputError, setMetadataSchemaInputError] = useState('');\n    const [licenseError, setLicenseError] = useState('');\n    const [accessStatementError, setAccessStatementError] = useState('');\n    const [roleCreatorAgentError, setRoleCreatorAgentError] = useState('');\n    const [rolePublisherAgentError, setRolePublisherAgentError] = useState('');\n    const [roleFunderAgentError, setRoleFunderAgentError] = useState('');\n    const [distDownloadURLError, setDistDownloadURLError] = useState('');\n    const [distAccessURLError, setDistAccessURLError] = useState('');\n    \n    // Valid states for new IRI fields\n    const [vocabulariesUsedInputValid, setVocabulariesUsedInputValid] = useState(false);\n    const [metadataSchemaInputValid, setMetadataSchemaInputValid] = useState(false);\n    const [roleCreatorAgentValid, setRoleCreatorAgentValid] = useState(false);\n    const [rolePublisherAgentValid, setRolePublisherAgentValid] = useState(false);\n    const [roleFunderAgentValid, setRoleFunderAgentValid] = useState(false);\n    const [distDownloadURLValid, setDistDownloadURLValid] = useState(false);\n    const [distAccessURLValid, setDistAccessURLValid] = useState(false);\n    \n    // 3. Update handleAddTag to include IRI validation for new fields:\n    \n    const handleAddTag = (fieldName, inputValue, setInputFunc, setErrorFunc) => {\n      if (setErrorFunc) setErrorFunc(''); // Clear previous error\n      // No need to handle identifier field validation anymore\n      if (fieldName === 'alternativeTitle') setAlternativeTitleInputValid(false);\n    \n      // Fields that require IRI validation - EXPANDED LIST\n      const iriFields = [\n        'homepageURL', 'otherPages', 'vocabulariesUsed', 'metadataSchema',\n        'primaryReferenceDocument', 'category', \n        'publicationReferences', 'source'\n      ];\n    \n      if (iriFields.includes(fieldName)) {\n        const iriError = isValidIriString(inputValue);\n        if (iriError) {\n          if (setErrorFunc) setErrorFunc(iriError);\n          return;\n        }\n      }\n    \n      if (inputValue.trim()) {\n        setFormData(prevFormData => ({\n          ...prevFormData,\n          [fieldName]: [...(prevFormData[fieldName] || []), inputValue.trim()]\n        }));\n        setInputFunc('');\n      }\n    };\n    \n\n    const handleChange = (e) => {\n      const { name, value } = e.target;\n      \n      // Clear valid states when user starts typing in date fields\n      if (name === 'createdDate') setCreatedDateValid(false);\n      if (name === 'publishedDate') setPublishedDateValid(false);\n      \n      // Clear valid states for regular fields when typing\n      if (name === 'title') setTitleValid(false);\n      if (name === 'description') setDescriptionValid(false);\n      if (name === 'license') setLicenseValid(false);\n      if (name === 'version') setVersionValid(false);\n      if (name === 'accessStatement') setAccessStatementValid(false);\n      if (name === 'keywords') setKeywordsInputValid(false);\n      if (name === 'nameSpace') setNameSpaceInputValid(false);\n      if (name === 'restAPI') setRestAPIInputValid(false);\n      \n      if (name === 'exampleQueries') setExampleQueriesInputValid(false);\n      \n      setFormData({\n        ...formData,\n        [name]: value\n      });\n\n      // Validate non-IRI and non-date fields\n      validateRegularInput(e);\n    };\n  \n    const handleTypeChange = (value) => {\n      setFormData(prevData => {\n        let newTypes;\n        \n        // Always include dcat:Dataset as the base type\n        if (value === 'void:Dataset') {\n          // Toggle void:Dataset to indicate if it's an RDF dataset\n          if (prevData.type.includes('void:Dataset')) {\n            // Remove void:Dataset if already selected\n            newTypes = prevData.type.filter(type => type !== 'void:Dataset');\n          } else {\n            // Add void:Dataset to indicate it's an RDF dataset\n            newTypes = [...prevData.type, 'void:Dataset'];\n          }\n        } else {\n          // For any other types, keep the current selection\n          newTypes = [...prevData.type];\n        }\n        \n        // Ensure dcat:Dataset is always included\n        if (!newTypes.includes('dcat:Dataset')) {\n          newTypes = ['dcat:Dataset', ...newTypes];\n        }\n        \n        // Update validation state - always valid since dcat:Dataset is always included\n        setTypeValid(true);\n        \n        return {\n          ...prevData,\n          type: newTypes\n        };\n      });\n    };\n\n\n  // Handle role field changes\n  const handleRoleChange = (role, field, value) => {\n    setFormData({\n      ...formData,\n      [role]: {\n        ...formData[role],\n        [field]: value\n      }\n    });\n  };\n  \n  // Handle adding a date tag\n  const handleAddDate = (e) => {\n    if (modifiedDateInput) {\n      setFormData({\n        ...formData,\n        modifiedDate: [...formData.modifiedDate, modifiedDateInput]\n      });\n      setModifiedDateInput('');\n    }\n  };\n\n  const validateDateInput = (e) => {\n    const { name, value } = e.target;\n    let errorMessage = '';\n    \n    const validSetters = {\n      'createdDate': setCreatedDateValid,\n      'publishedDate': setPublishedDateValid,\n      'modifiedDate': setModifiedDateValid,\n      'distReleaseDate': setDistReleaseDateValid,\n      'distModificationDate': setDistModificationDateValid\n    };\n    \n    const setValidFunc = validSetters[name];\n    \n    if (!value && name !== 'publishedDate') {\n      e.target.setCustomValidity('');\n      \n      if (name === 'createdDate') setCreatedDateError('');\n      else if (name === 'modifiedDate') setModifiedDateError('');\n      else if (name === 'distReleaseDate') setDistReleaseDateError('');\n      else if (name === 'distModificationDate') setDistModificationDateError('');\n      \n      if (setValidFunc) setValidFunc(false);\n      return;\n    }\n    \n    const datePattern = /^\\d{4}\\/\\d{2}\\/\\d{2}$/;\n    if (!datePattern.test(value)) {\n      errorMessage = 'Please use YYYY/MM/DD format';\n      e.target.setCustomValidity(errorMessage);\n      \n      if (name === 'createdDate') setCreatedDateError(errorMessage);\n      else if (name === 'publishedDate') setPublishedDateError(errorMessage);\n      else if (name === 'modifiedDate') setModifiedDateError(errorMessage);\n      else if (name === 'distReleaseDate') setDistReleaseDateError(errorMessage);\n      else if (name === 'distModificationDate') setDistModificationDateError(errorMessage);\n      \n      if (setValidFunc) setValidFunc(false);\n      return;\n    }\n    \n    const parts = value.split('/');\n    const year = parseInt(parts[0], 10);\n    const month = parseInt(parts[1], 10);\n    const day = parseInt(parts[2], 10);\n    \n    if (year < 1900 || year > 2100) {\n      errorMessage = 'Year should be between 1900 and 2100';\n      e.target.setCustomValidity(errorMessage);\n      \n      if (name === 'createdDate') setCreatedDateError(errorMessage);\n      else if (name === 'publishedDate') setPublishedDateError(errorMessage);\n      else if (name === 'modifiedDate') setModifiedDateError(errorMessage);\n      else if (name === 'distReleaseDate') setDistReleaseDateError(errorMessage);\n      else if (name === 'distModificationDate') setDistModificationDateError(errorMessage);\n      \n      if (setValidFunc) setValidFunc(false);\n      return;\n    }\n    \n    if (month < 1 || month > 12) {\n      errorMessage = 'Month should be between 1 and 12';\n      e.target.setCustomValidity(errorMessage);\n      \n      if (name === 'createdDate') setCreatedDateError(errorMessage);\n      else if (name === 'publishedDate') setPublishedDateError(errorMessage);\n      else if (name === 'modifiedDate') setModifiedDateError(errorMessage);\n      else if (name === 'distReleaseDate') setDistReleaseDateError(errorMessage);\n      else if (name === 'distModificationDate') setDistModificationDateError(errorMessage);\n      \n      if (setValidFunc) setValidFunc(false);\n      return;\n    }\n    \n    const daysInMonth = [\n      31, isLeapYear(year) ? 29 : 28, 31, 30, 31, 30,\n      31, 31, 30, 31, 30, 31\n    ];\n    \n    if (day < 1 || day > daysInMonth[month - 1]) {\n      errorMessage = `Day should be between 1 and ${daysInMonth[month - 1]} for this month`;\n      e.target.setCustomValidity(errorMessage);\n      \n      if (name === 'createdDate') setCreatedDateError(errorMessage);\n      else if (name === 'publishedDate') setPublishedDateError(errorMessage);\n      else if (name === 'modifiedDate') setModifiedDateError(errorMessage);\n      else if (name === 'distReleaseDate') setDistReleaseDateError(errorMessage);\n      else if (name === 'distModificationDate') setDistModificationDateError(errorMessage);\n      \n      if (setValidFunc) setValidFunc(false);\n      return;\n    }\n    \n    const date = new Date(year, month - 1, day);\n    if (\n      isNaN(date.getTime()) || \n      date.getFullYear() !== year || \n      date.getMonth() !== month - 1 || \n      date.getDate() !== day\n    ) {\n      errorMessage = 'Invalid date';\n      e.target.setCustomValidity(errorMessage);\n      \n      if (name === 'createdDate') setCreatedDateError(errorMessage);\n      else if (name === 'publishedDate') setPublishedDateError(errorMessage);\n      else if (name === 'modifiedDate') setModifiedDateError(errorMessage);\n      else if (name === 'distReleaseDate') setDistReleaseDateError(errorMessage);\n      else if (name === 'distModificationDate') setDistModificationDateError(errorMessage);\n      \n      if (setValidFunc) setValidFunc(false);\n      return;\n    }\n    \n    e.target.setCustomValidity('');\n    \n    if (name === 'createdDate') setCreatedDateError('');\n    else if (name === 'publishedDate') setPublishedDateError('');\n    else if (name === 'modifiedDate') setModifiedDateError('');\n    else if (name === 'distReleaseDate') setDistReleaseDateError('');\n    else if (name === 'distModificationDate') setDistModificationDateError('');\n    \n    if (setValidFunc) setValidFunc(true);\n\n    if (setValidFunc) {\n      setValidFunc(true);\n      console.log(`Setting ${name} to valid`); // Add this line\n    }\n\n    };\n  \n\n  const isLeapYear = (year) => {\n    return (year % 4 === 0 && year % 100 !== 0) || (year % 400 === 0);\n  };\n  \n  \n  const convertToISODate = (dateString) => {\n    if (!dateString) return '';\n    \n    if (/^\\d{4}\\/\\d{2}\\/\\d{2}$/.test(dateString)) {\n      return dateString.replace(/\\//g, '-');\n    }\n    \n    return dateString;\n  };\n\n\n  const validateRegularInput = (e) => {\n    const { name, value } = e.target;\n    \n    // Map field names to their valid setter functions\n    const validSetters = {\n      'title': setTitleValid,\n      'description': setDescriptionValid,\n      'type': setTypeValid,\n      \n      'version': setVersionValid,\n      'accessStatement': setAccessStatementValid,\n      'keywords': setKeywordsInputValid,\n      'language': setLanguageInputValid,\n      'iriTemplate': setIriTemplateInputValid,\n      'linkedResources': setLinkedResourcesInputValid,\n      'nameSpace': setNameSpaceInputValid,\n      'vocabulariesUsed': setVocabulariesUsedInputValid,\n      'metadataSchema': setMetadataSchemaInputValid,\n      'restAPI': setRestAPIInputValid,\n      \n      'exampleQueries': setExampleQueriesInputValid,\n      'distLicense': setDistLicenseValid,\n      'distRights': setDistRightsValid,\n      'distSpatialResolution': setDistSpatialResolutionValid,\n      'distTemporalResolution': setDistTemporalResolutionValid,\n      'distCompressionFormat': setDistCompressionFormatValid,\n      'distPackagingFormat': setDistPackagingFormatValid,\n      'distHasPolicy': setDistHasPolicyValid,\n    'sparqlDataService': setSparqlDataServiceValid,\n    'sparqlIdentifier': setSparqlIdentifierValid,\n    'sparqlTitle': setSparqlTitleValid,\n    'sparqlEndpointDescription': setSparqlEndpointDescriptionValid,\n    'sparqlStatus': setSparqlStatusValid,\n    'exampleResourceTitle': setExampleResourceTitleValid,\n    'exampleResourceMediaType': setExampleResourceMediaTypeValid,\n    'exampleResourceDescription': setExampleResourceDescriptionValid,\n    'exampleResourceStatus': setExampleResourceStatusValid\n    };\n    \n    const setValidFunc = validSetters[name];\n    if (!setValidFunc) return;\n    \n    // Set valid if field has content\n    setValidFunc(value && value.trim().length > 0);\n};\n  \n  const handleRemoveTag = (fieldName, index) => {\n    const newTags = [...formData[fieldName]];\n    newTags.splice(index, 1);\n    setFormData({\n      ...formData,\n      [fieldName]: newTags\n    });\n  };\n  \n  const handleFileUpload = (e) => {\n    const file = e.target.files[0];\n    if (file) {\n      setImageFileName(file.name);\n      setFormData({\n        ...formData,\n        metaGraph: [...formData.metaGraph, file.name]\n      });\n    }\n  };\n  \n  const addPendingTagInputs = () => {\n    // Create a copy of the current form data that we'll update\n    let updatedFormData = {...formData};\n    \n    // Handle all tag input fields\n    // No longer need to check identifierInput since it's auto-generated\n    // identifier is already set with UUID\n    \n    \n    if (alternativeTitleInput.trim()) {\n      updatedFormData = {\n        ...updatedFormData,\n        alternativeTitle: [...updatedFormData.alternativeTitle, alternativeTitleInput.trim()]\n      };\n    }\n    \n    if (acronymInput.trim()) {\n      updatedFormData = {\n        ...updatedFormData,\n        acronym: [...updatedFormData.acronym, acronymInput.trim()]\n      };\n    }\n    \n    if (homepageURLInput.trim()) {\n      const iriError = isValidIriString(homepageURLInput);\n      if (!iriError) {\n        updatedFormData = {\n          ...updatedFormData,\n          homepageURL: [...updatedFormData.homepageURL, homepageURLInput.trim()]\n        };\n      } else {\n        setHomepageURLInputError(iriError);\n      }\n    }\n    \n    if (otherPagesInput.trim()) {\n      const iriError = isValidIriString(otherPagesInput);\n      if (!iriError) {\n        updatedFormData = {\n          ...updatedFormData,\n          otherPages: [...updatedFormData.otherPages, otherPagesInput.trim()]\n        };\n      } else {\n        setOtherPagesInputError(iriError);\n      }\n    }\n    \n    if (modifiedDateInput) {\n      updatedFormData = {\n        ...updatedFormData,\n        modifiedDate: [...updatedFormData.modifiedDate, modifiedDateInput]\n      };\n    }\n    \n    if (primaryReferenceDocInput.trim()) {\n      updatedFormData = {\n        ...updatedFormData,\n        primaryReferenceDocument: [...updatedFormData.primaryReferenceDocument, primaryReferenceDocInput.trim()]\n      };\n    }\n    \n    if (statisticsInput.trim()) {\n      updatedFormData = {\n        ...updatedFormData,\n        statistics: [...updatedFormData.statistics, statisticsInput.trim()]\n      };\n    }\n    \n    if (keywordsInput.trim()) {\n      updatedFormData = {\n        ...updatedFormData,\n        keywords: [...updatedFormData.keywords, keywordsInput.trim()]\n      };\n    }\n    \n    if (categoryInput.trim()) {\n      updatedFormData = {\n        ...updatedFormData,\n        category: [...updatedFormData.category, categoryInput.trim()]\n      };\n    }\n    \n    if (publicationReferencesInput.trim()) {\n      updatedFormData = {\n        ...updatedFormData,\n        publicationReferences: [...updatedFormData.publicationReferences, publicationReferencesInput.trim()]\n      };\n    }\n    \n    if (languageInput.trim()) {\n      updatedFormData = {\n        ...updatedFormData,\n        language: [...updatedFormData.language, languageInput.trim()]\n      };\n    }\n    \n    if (iriTemplateInput.trim()) {\n      updatedFormData = {\n        ...updatedFormData,\n        iriTemplate: [...updatedFormData.iriTemplate, iriTemplateInput.trim()]\n      };\n    }\n    \n    if (linkedResourcesInput.trim()) {\n      updatedFormData = {\n        ...updatedFormData,\n        linkedResources: [...updatedFormData.linkedResources, linkedResourcesInput.trim()]\n      };\n    }\n    \n    if (exampleResourceInput.trim()) {\n      updatedFormData = {\n        ...updatedFormData,\n        exampleResource: [...updatedFormData.exampleResource, exampleResourceInput.trim()]\n      };\n    }\n    \n    if (sourceInput.trim()) {\n      updatedFormData = {\n        ...updatedFormData,\n        source: [...updatedFormData.source, sourceInput.trim()]\n      };\n    }\n    \n    if (nameSpaceInput.trim()) {\n      updatedFormData = {\n        ...updatedFormData,\n        nameSpace: [...updatedFormData.nameSpace, nameSpaceInput.trim()]\n      };\n    }\n  \n    if (vocabulariesUsedInput.trim()) {\n      updatedFormData = {\n        ...updatedFormData,\n        vocabulariesUsed: [...updatedFormData.vocabulariesUsed, vocabulariesUsedInput.trim()]\n      };\n    }\n    \n    if (metadataSchemaInput.trim()) {\n      updatedFormData = {\n        ...updatedFormData,\n        metadataSchema: [...updatedFormData.metadataSchema, metadataSchemaInput.trim()]\n      };\n    }\n    \n    \n    if (restAPIInput.trim()) {\n      updatedFormData = {\n        ...updatedFormData,\n        restAPI: [...updatedFormData.restAPI, restAPIInput.trim()]\n      };\n    }\n    \n    if (exampleQueriesInput.trim()) {\n      updatedFormData = {\n        ...updatedFormData,\n        exampleQueries: [...updatedFormData.exampleQueries, exampleQueriesInput.trim()]\n      };\n    }\n    \n    // Check if current distribution is partially filled and valid\n    const currDist = currentDistribution;\n    if (currDist.title || currDist.description || currDist.mediaType || \n        currDist.downloadURL || currDist.accessURL) {\n      // Only add the distribution if it has the required fields\n      if (currDist.title && currDist.description && currDist.mediaType && \n          currDist.downloadURL && currDist.accessURL) {\n        updatedFormData = {\n          ...updatedFormData,\n          distributions: [...updatedFormData.distributions, {...currDist}]\n        };\n      }\n    }\n    \n    // Update the state with all changes\n    setFormData(updatedFormData);\n    \n    // Return the updated form data for immediate use\n    return updatedFormData;\n  };\n\n  const handleDistributionChange = (field, value) => {\n    setCurrentDistribution({\n      ...currentDistribution,\n      [field]: value\n    });\n  };\n\n  // Validate a distribution before adding it\n  const validateDistribution = (dist) => {\n    return dist.title && dist.description && dist.mediaType && \n           dist.downloadURL && dist.accessURL;\n  };\n\n  // Add a distribution\n  const handleAddDistribution = () => {\n    if (!validateDistribution(currentDistribution)) {\n      setMessage('Please fill in all required fields for the distribution');\n      return;\n    }\n    \n    setFormData({\n      ...formData,\n      distributions: [...formData.distributions, {...currentDistribution}]\n    });\n    \n    // Reset the current distribution form\n    setCurrentDistribution({\n      title: '',\n      description: '',\n      mediaType: '',\n      downloadURL: '',\n      accessURL: '',\n      accessService: '',\n      byteSize: '',\n      compressionFormat: '',\n      packagingFormat: '',\n      hasPolicy: '',\n      license: '',\n       rights:'',\n      spatialResolution: '',\n      temporalResolution: '',\n      releaseDate: '',\n      modificationDate: ''\n    });\n\n    setMessage('Distribution added successfully');\n    setTimeout(() => setMessage(''), 2000);\n  };\n\n  // Remove a distribution\n  const handleRemoveDistribution = (index) => {\n    const newDistributions = [...formData.distributions];\n    newDistributions.splice(index, 1);\n    setFormData({\n      ...formData,\n      distributions: newDistributions\n    });\n  };\n\n\n\n\n\n  const validateDateField = (fieldName, dateValue) => {\n    if (!dateValue) {\n      // For required fields, this would be caught later\n      return true;\n    }\n    \n    if (!isValidDate(dateValue)) {\n      // Create a synthetic event to pass to validateDateInput\n      const syntheticEvent = {\n        target: {\n          name: fieldName,\n          value: dateValue,\n          setCustomValidity: () => {} // Mock function\n        }\n      };\n      \n      validateDateInput(syntheticEvent);\n      return false;\n    }\n    \n    return true;\n  };\n  \n  // Helper function to check if a date string is valid\n  const isValidDate = (dateString) => {\n    // Skip empty values\n    if (!dateString) return true;\n    \n    // Check format\n    const datePattern = /^\\d{4}\\/\\d{2}\\/\\d{2}$/;\n    if (!datePattern.test(dateString)) {\n      return false;\n    }\n    \n    // Parse date parts\n    const parts = dateString.split('/');\n    const year = parseInt(parts[0], 10);\n    const month = parseInt(parts[1], 10);\n    const day = parseInt(parts[2], 10);\n    \n    // Check ranges\n    if (year < 1990 || year > 2030) return false;\n    if (month < 1 || month > 12) return false;\n    \n    // Check days in month\n    const daysInMonth = [\n      31, isLeapYear(year) ? 29 : 28, 31, 30, 31, 30,\n      31, 31, 30, 31, 30, 31\n    ];\n    \n    if (day < 1 || day > daysInMonth[month - 1]) return false;\n    \n    return true;\n  };\n\n\n\n  const handleDatePickerChange = (e, targetFieldName) => {\n    const selectedDate = e.target.value; // This will be in YYYY-MM-DD format\n    \n    // Convert from YYYY-MM-DD to YYYY/MM/DD\n    const formattedDate = selectedDate.replace(/-/g, '/');\n    \n    // Set the value in the appropriate field based on targetFieldName\n    if (targetFieldName === 'createdDate') {\n      // For direct form fields\n      setFormData({\n        ...formData,\n        createdDate: formattedDate\n      });\n    } else if (targetFieldName === 'publishedDate') {\n      setFormData({\n        ...formData,\n        publishedDate: formattedDate\n      });\n    } else if (targetFieldName === 'modifiedDate') {\n      // For the modified date input\n      setModifiedDateInput(formattedDate);\n    } else if (targetFieldName === 'distReleaseDate') {\n      // For distribution date fields\n      setCurrentDistribution({\n        ...currentDistribution,\n        releaseDate: formattedDate\n      });\n    } else if (targetFieldName === 'distModificationDate') {\n      setCurrentDistribution({\n        ...currentDistribution,\n        modificationDate: formattedDate\n      });\n    }\n    \n    // Validate the date after setting it\n    setTimeout(() => {\n      const syntheticEvent = {\n        target: {\n          name: targetFieldName,\n          value: formattedDate,\n          setCustomValidity: () => {}\n        }\n      };\n      validateDateInput(syntheticEvent);\n    }, 0);\n  };\n\n\n  const formatDatesForSubmission = (formData) => {\n    const updatedForm = { ...formData };\n    \n    // Format single date fields\n    if (updatedForm.createdDate) {\n      updatedForm.createdDate = convertToISODate(updatedForm.createdDate);\n    }\n    \n    if (updatedForm.publishedDate) {\n      updatedForm.publishedDate = convertToISODate(updatedForm.publishedDate);\n    }\n    \n    // Format date arrays\n    if (updatedForm.modifiedDate && updatedForm.modifiedDate.length > 0) {\n      updatedForm.modifiedDate = updatedForm.modifiedDate.map(date => \n        convertToISODate(date)\n      );\n    }\n    \n    // Format dates in distributions\n    if (updatedForm.distributions && updatedForm.distributions.length > 0) {\n      updatedForm.distributions = updatedForm.distributions.map(dist => {\n        const newDist = { ...dist };\n        if (newDist.releaseDate) {\n          newDist.releaseDate = convertToISODate(newDist.releaseDate);\n        }\n        if (newDist.modificationDate) {\n          newDist.modificationDate = convertToISODate(newDist.modificationDate);\n        }\n        return newDist;\n      });\n    }\n    \n    return updatedForm;\n  };\n  \n  \n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    const updatedForm = addPendingTagInputs();\n    \n    // Separate arrays for different types of errors\n    const missingFields = [];\n    const invalidDates = [];\n    \n    // Check for missing required fields (including dates)\n    if (!updatedForm.title) missingFields.push('Title');\n    if (!updatedForm.description) missingFields.push('Description'); \n    if (!updatedForm.type || updatedForm.type.length === 0) missingFields.push('Type');\n    if (!updatedForm.publishedDate) missingFields.push('Published Date');\n    if (updatedForm.distributions.length === 0) missingFields.push('Distribution');\n    if (updatedForm.primaryReferenceDocument.length === 0) missingFields.push('Primary Reference Document');\n    if (updatedForm.keywords.length === 0) missingFields.push('Keywords');\n    if (updatedForm.language.length === 0) missingFields.push('Language');\n    if (!updatedForm.accessStatement) missingFields.push('Access Statement');\n    if (updatedForm.vocabulariesUsed.length === 0) missingFields.push('Vocabularies Used');\n    if (updatedForm.metadataSchema.length === 0) missingFields.push('Metadata Schema');\n    \n    // Check for invalid dates (only for dates that are filled)\n    if (createdDateError && updatedForm.createdDate) invalidDates.push(`Created Date: ${createdDateError}`);\n    if (publishedDateError && updatedForm.publishedDate) invalidDates.push(`Published Date: ${publishedDateError}`);\n    if (modifiedDateError && updatedForm.modifiedDate.length > 0) invalidDates.push(`Modified Date: ${modifiedDateError}`);\n    if (distReleaseDateError) invalidDates.push(`Distribution Release Date: ${distReleaseDateError}`);\n    if (distModificationDateError) invalidDates.push(`Distribution Modification Date: ${distModificationDateError}`);\n    \n    // For optional date fields that have values, validate them\n    if (updatedForm.createdDate) {\n      const e = {\n        target: {\n          name: 'createdDate',\n          value: updatedForm.createdDate,\n          setCustomValidity: () => {}\n        }\n      };\n      validateDateInput(e);\n      if (createdDateError) {\n        invalidDates.push(`Created Date: ${createdDateError}`);\n      }\n    }\n\n    // Construct error message\n    let errorMessage = '';\n    \n    if (missingFields.length > 0) {\n      errorMessage += `The following fields are required but have not been filled: ${missingFields.join(', ')}`;\n    }\n    \n    if (invalidDates.length > 0) {\n      if (errorMessage) errorMessage += '\\n\\n';\n      errorMessage += `The following dates are invalid:\\n${invalidDates.join('\\n')}`;\n    }\n\n    if (errorMessage) {\n      setMessage(errorMessage);\n      setIsSubmitting(false);\n      return;\n    }\n    \n    // Sync SPARQL endpoints and Example Resources before submission\n    updatedForm.sparqlEndpoint = sparqlEndpoints;\n    updatedForm.exampleResource = exampleResources;\n\n    // Proceed with submission\n    setIsSubmitting(true);\n    setMessage('');\n    \n    try {\n      // Submit form data to parent component\n      const result = await onSubmit(updatedForm);\n      \n      if (result.success) {\n        setMessage('Form submitted successfully!');\n        setTimeout(() => {\n          setMessage('');\n          onClose();\n        }, 3000);\n      } else {\n        setMessage(result.message);\n      }\n    } catch (error) {\n      console.error('Error in form submission:', error);\n      setMessage('An unexpected error occurred. Please try again.');\n    } finally {\n      setIsSubmitting(false);\n    }\n};\n\n  const formatDate = (dateString) => {\n    if (!dateString) return '';\n    try {\n      const date = new Date(dateString);\n      return date.toISOString().split('T')[0]; //YYYY-MM-DD\n    } catch (e) {\n      return dateString;\n    }\n  };\n\n\n  const handleSaveDraft = () => {\n    // First add any pending tag inputs\n    const updatedForm = addPendingTagInputs();\n    \n    \n    const existingDraftId = updatedForm.draftId || null;\n    const draftId = existingDraftId || `draft-${Date.now()}`;\n    const draft = {\n      id: draftId,\n      name: updatedForm.title || 'Untitled Draft',\n      date: new Date().toISOString(),\n      formData: {\n        ...updatedForm,\n        draftId: draftId // Store the draft ID in the form data\n      }\n    };\n    \n    // Get existing drafts from localStorage\n    let savedDrafts = [];\n    try {\n      const draftsString = localStorage.getItem('kg-metadata-drafts');\n      if (draftsString) {\n        savedDrafts = JSON.parse(draftsString);\n      }\n    } catch (error) {\n      console.error('Error loading saved drafts:', error);\n    }\n    \n    \n    if (existingDraftId) {\n      savedDrafts = savedDrafts.filter(d => d.id !== existingDraftId);\n    }\n    \n    \n    savedDrafts.push(draft);\n    localStorage.setItem('kg-metadata-drafts', JSON.stringify(savedDrafts));\n    \n    \n    setMessage('Draft saved successfully!');\n    setTimeout(() => setMessage(''), 2000);\n\n    if (onDraftSaved) {\n      onDraftSaved();\n    }\n    setTimeout(() => {\n      onClose();\n    }, 2000); \n  };\n\n\n  return (\n    <div className={`modal-overlay`}>\n    <div className={`modal-content`} onClick={e => e.stopPropagation()}>\n    \n    {message && (\n      <div className={`floating-message`}>\n        <div className={message.includes('success') ? 'success-message' : 'error-message'}>\n          <div className={`message-content`}>{message}</div>\n          <button \n            type=\"button\" \n            className={`message-close-button`} \n            onClick={() => setMessage(null)} \n            aria-label=\"Dismiss message\"\n          >\n            Dismiss\n          </button>\n        </div>\n      </div>\n    )}\n      <div className={`modal-header`}>\n        <h2>Knowledge Graph Metadata</h2>\n        <button className={`modal-close-button`} onClick={onClose}>×</button>\n      </div>\n      \n      <div className={`modal-body`} onClick={(e) => e.stopPropagation()}>\n        \n        <form onSubmit={handleSubmit}>\n          \n          {/* Identifier (auto-generated UUID) */}\n          <div className=\"form-group\">\n            <label htmlFor=\"identifier\">\n              Identifier <span className=\"field-indicator\">auto-generated UUID</span>\n            </label>\n            <div className=\"tag-input-container\">\n              <div className=\"tag-list\">\n                {formData.identifier.map((id, index) => (\n                  <div key={`identifier-${index}`} className=\"tag-item tag-item-valid\">\n                    <span className=\"tag-text\">{id}</span>\n                    {/* No remove button since UUID is required */}\n                  </div>\n                ))}\n              </div>\n              <div className=\"field-hint\">This identifier is automatically generated and cannot be edited</div>\n            </div>\n          </div>\n          \n          {/* Title */}\n          <div className=\"form-group\">\n            <label htmlFor=\"title\">\n              Title <span className=\"field-indicator required-indicator\">required, 1 value only</span>\n            </label>\n            <input\n              type=\"text\"\n              id=\"title\"\n              name=\"title\"\n              value={formData.title}\n              onChange={handleChange}\n              className={`form-control ${titleValid ? 'form-input-valid' : ''}`}\n              placeholder=\"Enter title\"\n            />\n          </div>\n          \n          {/* Alternative Title */}\n          <div className=\"form-group\">\n            <label htmlFor=\"alternativeTitle\">\n              Alternative Title <span className=\"field-indicator optional-indicator\">optional, multiple values allowed</span>\n            </label>\n            <div className=\"tag-input-container\">\n              <div className=\"tag-input-row\">\n                <input\n                  type=\"text\"\n                  id=\"alternativeTitle\"\n                  value={alternativeTitleInput}\n                  onChange={(e) => {\n                    setAlternativeTitleInput(e.target.value);\n                    setAlternativeTitleInputValid(false);\n                  }}\n                  onBlur={() => {\n                    if (alternativeTitleInput.trim()) setAlternativeTitleInputValid(true);\n                  }}\n                  onKeyPress={(e) => handleKeyPress(e, 'alternativeTitle', alternativeTitleInput, setAlternativeTitleInput)}\n                  className={`tag-input ${alternativeTitleInputValid ? 'tag-input-valid' : ''}`}\n                />\n                <button \n                  type=\"button\" \n                  className=\"tag-add-button\"\n                  onClick={() => {\n                    handleAddTag('alternativeTitle', alternativeTitleInput, setAlternativeTitleInput);\n                    setAlternativeTitleInputValid(false);\n                  }}\n                >\n                  +\n                </button>\n              </div>\n              <div className=\"tag-list\">\n                {formData.alternativeTitle.map((title, index) => (\n                  <div key={`alt-title-${index}`} className=\"tag-item tag-item-valid\">\n                    <span className=\"tag-text\">{title}</span>\n                    <button \n                      type=\"button\"\n                      className=\"tag-remove\"\n                      onClick={() => handleRemoveTag('alternativeTitle', index)}\n                    >\n                      ×\n                    </button>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          {/* Acronym */}\n          <div className=\"form-group\">\n            <label htmlFor=\"acronym\">\n              Acronym <span className=\"field-indicator optional-indicator\">optional, multiple values allowed</span>\n            </label>\n            <div className=\"tag-input-container\">\n              <div className=\"tag-input-row\">\n                <input\n                  type=\"text\"\n                  id=\"acronym\"\n                  value={acronymInput}\n                  onChange={(e) => {\n                    setAcronymInput(e.target.value);\n                    setAcronymInputValid(false);\n                  }}\n                  onBlur={() => setAcronymInputValid(!!acronymInput.trim())}\n                  onKeyPress={(e) => handleKeyPress(e, 'acronym', acronymInput, setAcronymInput)}\n                  className={`tag-input ${acronymInputValid ? 'tag-input-valid' : ''}`}\n                />\n                <button \n                  type=\"button\" \n                  className=\"tag-add-button\"\n                  onClick={() => handleAddTag('acronym', acronymInput, setAcronymInput)}\n                >\n                  +\n                </button>\n              </div>\n              <div className=\"tag-list\">\n                {formData.acronym.map((acr, index) => (\n                  <div key={`acronym-${index}`} className=\"tag-item\">\n                    <span className=\"tag-text\">{acr}</span>\n                    <button \n                      type=\"button\"\n                      className=\"tag-remove\"\n                      onClick={() => handleRemoveTag('acronym', index)}\n                    >\n                      ×\n                    </button>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          {/* Description */}\n          <div className=\"form-group\">\n            <label htmlFor=\"description\">\n              Description <span className=\"field-indicator required-indicator\">required, 1 value only</span>\n            </label>\n            <textarea\n              id=\"description\"\n              name=\"description\"\n              value={formData.description}\n              onChange={handleChange}\n              className={`form-control ${descriptionValid ? 'form-input-valid' : ''}`}\n              rows=\"4\"\n            />\n          </div>\n\n          {/* Language [1,∞] - Required, multiple values */}\n          <div className=\"form-group\">\n            <label htmlFor=\"language\">\n              Language <span className=\"field-indicator required-indicator\">required, multiple values allowed</span>\n            </label>\n            <div className=\"tag-input-container\">\n              <div className=\"tag-input-row\">\n                <input\n                  type=\"text\"\n                  id=\"language\"\n                  name=\"language\"\n                  value={languageInput}\n                  onChange={(e) => setLanguageInput(e.target.value)}\n                  onBlur={validateRegularInput}\n                  onKeyPress={(e) => handleKeyPress(e, 'language', languageInput, setLanguageInput)}\n                  className={`tag-input ${languageInputValid ? 'form-input-valid' : ''}`}\n                />\n                <button \n                  type=\"button\" \n                  className=\"tag-add-button\"\n                  onClick={() => handleAddTag('language', languageInput, setLanguageInput)}\n                >\n                  +\n                </button>\n              </div>\n              <div className=\"tag-list\">\n                {formData.language.map((lang, index) => (\n                  <div key={`language-${index}`} className=\"tag-item\">\n                    <span className=\"tag-text\">{lang}</span>\n                    <button \n                      type=\"button\"\n                      className=\"tag-remove\"\n                      onClick={() => handleRemoveTag('language', index)}\n                    >\n                      ×\n                    </button>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          {/* Keywords [1,∞] - Required, multiple values */}\n          <div className=\"form-group\">\n            <label htmlFor=\"keywords\">\n              Keywords <span className=\"field-indicator required-indicator\">required, multiple values allowed</span>\n            </label>\n            <div className=\"tag-input-container\">\n              <div className=\"tag-input-row\">\n                <input\n                  type=\"text\"\n                  id=\"keywords\"\n                  name=\"keywords\"\n                  value={keywordsInput}\n                  onChange={(e) => setKeywordsInput(e.target.value)}\n                  onBlur={validateRegularInput}\n                  onKeyPress={(e) => handleKeyPress(e, 'keywords', keywordsInput, setKeywordsInput)}\n                  className={`tag-input ${keywordsInputValid ? 'form-input-valid' : ''}`}\n                />\n                <button \n                  type=\"button\" \n                  className=\"tag-add-button\"\n                  onClick={() => handleAddTag('keywords', keywordsInput, setKeywordsInput)}\n                >\n                  +\n                </button>\n              </div>\n              <div className=\"tag-list\">\n                {formData.keywords.map((keyword, index) => (\n                  <div key={`keyword-${index}`} className=\"tag-item\">\n                    <span className=\"tag-text\">{keyword}</span>\n                    <button \n                      type=\"button\"\n                      className=\"tag-remove\"\n                      onClick={() => handleRemoveTag('keywords', index)}\n                    >\n                      ×\n                    </button>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          {/* Type */}\n          <div className=\"form-group\">\n            <label htmlFor=\"type\">\n              Type <span className=\"field-indicator required-indicator\">required</span>\n            </label>\n            <div className={`checkbox-group ${typeValid ? 'form-input-valid' : ''}`}>\n              <div>\n                <input\n                  type=\"checkbox\"\n                  name=\"type\"\n                  id=\"typeDataset\"\n                  checked={formData.type.includes('dcat:Dataset')}\n                  disabled={true} // Always checked and disabled since it's the default\n                />\n                <label htmlFor=\"typeDataset\">dcat:Dataset (default)</label>\n              </div>\n              <div>\n                <input\n                  type=\"checkbox\"\n                  name=\"type\"\n                  id=\"typeVoidDataset\"\n                  checked={formData.type.includes('void:Dataset')}\n                  onChange={() => handleTypeChange('void:Dataset')}\n                />\n                <label htmlFor=\"typeVoidDataset\">RDF Dataset (void:Dataset)</label>\n              </div>\n            </div>\n          </div>\n\n          {/* Date fields */}\n          <div className=\"form-group\">\n            <label htmlFor=\"createdDate\">\n              Created Date <span className=\"field-indicator optional-indicator\">optional, 1 value only</span>\n            </label>\n            <div className=\"date-input-container\">\n              <input\n                type=\"text\"\n                id=\"createdDate\"\n                name=\"createdDate\"\n                value={formData.createdDate}\n                onChange={handleChange}\n                onBlur={validateDateInput}\n                placeholder=\"YYYY/MM/DD\"\n                className={`date-input ${createdDateError ? 'date-input-error' : ''} ${createdDateValid ? 'date-input-valid' : ''}`}\n              />\n              <input\n                type=\"date\"\n                className=\"date-picker-control\"\n                onChange={(e) => handleDatePickerChange(e, 'createdDate')}\n                aria-label=\"Date picker for Created Date\"\n              />\n            </div>\n            {createdDateError && <div className=\"date-error-message\">{createdDateError}</div>}\n          </div>\n          \n    \n          <div className=\"form-group\">\n            <label htmlFor=\"modifiedDate\">\n              Modified Date <span className=\"field-indicator optional-indicator\">optional, multiple values allowed</span>\n            </label>\n            <div className=\"tag-input-container\">\n              <div className=\"tag-input-row\">\n                <input\n                  type=\"text\"\n                  id=\"modifiedDate\"\n                  name=\"modifiedDate\"\n                  value={modifiedDateInput}\n                  onChange={(e) => setModifiedDateInput(e.target.value)}\n                  onBlur={validateDateInput}\n                  placeholder=\"YYYY/MM/DD\"\n                  className={`date-input ${modifiedDateError ? 'date-input-error' : ''} ${modifiedDateValid ? 'date-input-valid' : ''}`}\n                />\n                <input\n                  type=\"date\"\n                  className=\"date-picker-control\"\n                  onChange={(e) => handleDatePickerChange(e, 'modifiedDate')}\n                  aria-label=\"Date picker for Modified Date\"\n                />\n                <button \n                  type=\"button\" \n                  className=\"tag-add-button\"\n                  onClick={handleAddDate}\n                  disabled={!modifiedDateInput || modifiedDateError}\n                >\n                  +\n                </button>\n              </div>\n              {modifiedDateError && <div className=\"date-error-message\">{modifiedDateError}</div>}\n              <div className=\"tag-list\">\n                {formData.modifiedDate.map((date, index) => (\n                  <div key={`modified-date-${index}`} className=\"tag-item\">\n                    <span className=\"tag-text date-tag\">{date}</span>\n                    <button \n                      type=\"button\"\n                      className=\"tag-remove\"\n                      onClick={() => handleRemoveTag('modifiedDate', index)}\n                    >\n                      ×\n                    </button>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n    \n                      \n          <div className=\"form-group\">\n            <label htmlFor=\"publishedDate\">\n              Published Date <span className=\"field-indicator required-indicator\">required, 1 value only</span>\n            </label>\n            <div className=\"date-input-container\">\n              <input\n                type=\"text\"\n                id=\"publishedDate\"\n                name=\"publishedDate\"\n                value={formData.publishedDate}\n                onChange={handleChange}\n                onBlur={validateDateInput}\n                placeholder=\"YYYY/MM/DD\"\n                required\n                className={`date-input ${publishedDateError ? 'date-input-error' : ''} ${publishedDateValid ? 'date-input-valid' : ''}`}\n              />\n              <input\n                type=\"date\"\n                className=\"date-picker-control\"\n                onChange={(e) => handleDatePickerChange(e, 'publishedDate')}\n                aria-label=\"Date picker for Published Date\"\n              />\n            </div>\n            {publishedDateError && <div className=\"date-error-message\">{publishedDateError}</div>}\n          </div>\n    \n    \n          <div className=\"form-group\">\n          <label htmlFor=\"vocabulariesUsed\">\n              Vocabularies Used <span className=\"field-indicator required-indicator\">required (IRI), multiple values allowed</span>\n          </label>\n          <div className=\"tag-input-container\">\n              <div className=\"tag-input-row\">\n              <input\n                  type=\"text\"\n                  id=\"vocabulariesUsed\"\n                  name=\"vocabulariesUsedInput\"\n                  value={vocabulariesUsedInput}\n                  onChange={(e) => {\n                    setVocabulariesUsedInput(e.target.value);\n                    setVocabulariesUsedInputError('');\n                    setVocabulariesUsedInputValid(false);\n                  }}\n                  onBlur={validateIriInput}\n                  onKeyUp= {(e) => handleKeyPress(e, 'vocabulariesUsed', vocabulariesUsedInput, setVocabulariesUsedInput, setVocabulariesUsedInputError)}\n                  className={`tag-input ${vocabulariesUsedInputError ? 'tag-input-error' : ''} ${vocabulariesUsedInputValid ? 'tag-input-valid' : ''}`}\n              />\n              {vocabulariesUsedInputError && <div className=\"iri-error-message\">{vocabulariesUsedInputError}</div>}\n\n              <button \n                  type=\"button\" \n                  className=\"tag-add-button\"\n                  onClick={() => handleAddTag('vocabulariesUsed', vocabulariesUsedInput, setVocabulariesUsedInput)}\n              >\n                  +\n              </button>\n              </div>\n              <div className=\"tag-list\">\n              {formData.vocabulariesUsed.map((item, index) => (\n                  <div key={`vocabulary-${index}`} className=\"tag-item\">\n                  <span className=\"tag-text\">{item}</span>\n                  <button \n                      type=\"button\"\n                      className=\"tag-remove\"\n                      onClick={() => handleRemoveTag('vocabulariesUsed', index)}\n                  >\n                      ×\n                  </button>\n                  </div>\n              ))}\n              </div>\n              <div className=\"field-hint\"> </div>\n          </div>\n          </div>\n    \n          {/* Metadata Schema [1,∞] - Required, multiple values */}\n          <div className=\"form-group\">\n          <label htmlFor=\"metadataSchema\">\n              Metadata Schema <span className=\"field-indicator required-indicator\">required (IRI), multiple values allowed</span>\n          </label>\n          <div className=\"tag-input-container\">\n              <div className=\"tag-input-row\">\n              <input\n                type=\"text\"\n                id=\"metadataSchema\"\n                name=\"metadataSchemaInput\"\n                value={metadataSchemaInput}\n                onChange={(e) => {\n                  setMetadataSchemaInput(e.target.value);\n                  setMetadataSchemaInputError('');\n                  setMetadataSchemaInputValid(false);\n                }}\n                onBlur={validateIriInput}\n                onKeyPress={(e) => handleKeyPress(e, 'metadataSchema', metadataSchemaInput, setMetadataSchemaInput, setMetadataSchemaInputError)}\n                className={`tag-input ${metadataSchemaInputError ? 'tag-input-error' : ''} ${metadataSchemaInputValid ? 'tag-input-valid' : ''}`}\n              />\n              {metadataSchemaInputError && <div className=\"iri-error-message\">{metadataSchemaInputError}</div>}\n\n              <button \n                  type=\"button\" \n                  className=\"tag-add-button\"\n                  onClick={() => handleAddTag('metadataSchema', metadataSchemaInput, setMetadataSchemaInput)}\n              >\n                  +\n              </button>\n              </div>\n              <div className=\"tag-list\">\n              {formData.metadataSchema.map((item, index) => (\n                  <div key={`metadata-schema-${index}`} className=\"tag-item\">\n                  <span className=\"tag-text\">{item}</span>\n                  <button \n                      type=\"button\"\n                      className=\"tag-remove\"\n                      onClick={() => handleRemoveTag('metadataSchema', index)}\n                  >\n                      ×\n                  </button>\n                  </div>\n              ))}\n              </div>\n              <div className=\"field-hint\"> </div>\n          </div>\n          </div>\n    \n          {/* Primary Reference Document */}\n          <div className=\"form-group\">\n            <label htmlFor=\"primaryReferenceDocument\">\n              Primary Reference Document <span className=\"field-indicator required-indicator\">required (IRI), multiple values allowed</span>\n            </label>\n            <div className=\"tag-input-container\">\n              <div className=\"tag-input-row\">\n              <input\n                type=\"text\"\n                id=\"primaryReferenceDocument\"\n                name=\"primaryReferenceDocInput\"\n                value={primaryReferenceDocInput}\n                onChange={(e) => {\n                  setPrimaryReferenceDocInput(e.target.value);\n                  setPrimaryReferenceDocInputError('');\n                  setPrimaryReferenceDocInputValid(false);\n                }}\n                onBlur={validateIriInput}\n                onKeyUp={(e) => handleKeyPress(e, 'primaryReferenceDocument', primaryReferenceDocInput, setPrimaryReferenceDocInput, setPrimaryReferenceDocInputError)}\n                className={`${primaryReferenceDocInputError ? 'tag-input-error' : ''} ${primaryReferenceDocInputValid ? 'tag-input-valid' : ''}`}\n              />\n              {primaryReferenceDocInputError && <div className=\"iri-error-message\">{primaryReferenceDocInputError}</div>}\n\n                <button \n                  type=\"button\" \n                  className=\"tag-add-button\"\n                  onClick={() => handleAddTag('primaryReferenceDocument', primaryReferenceDocInput, setPrimaryReferenceDocInput)}\n                >\n                  +\n                </button>\n              </div>\n              <div className=\"tag-list\">\n                {formData.primaryReferenceDocument.map((doc, index) => (\n                  <div key={`ref-doc-${index}`} className=\"tag-item\">\n                    <span className=\"tag-text\">{doc}</span>\n                    <button \n                      type=\"button\"\n                      className=\"tag-remove\"\n                      onClick={() => handleRemoveTag('primaryReferenceDocument', index)}\n                    >\n                      ×\n                    </button>\n                  </div>\n                ))}\n              </div>\n              <div className=\"field-hint\"> </div>\n            </div>\n          </div>\n          \n          {/* Meta Graph */}\n          <div className=\"form-group\">\n            <label htmlFor=\"metaGraph\">\n              Meta Graph <span className=\"field-indicator optional-indicator\">optional, multiple values allowed</span>\n            </label>\n            <div className=\"file-upload-section\">\n              <div className=\"file-upload-label\">\n                <span className=\"file-name\">{imageFileName || \"No file selected\"}</span>\n                <button \n                  type=\"button\" \n                  className=\"browse-button\"\n                  onClick={() => fileInputRef.current.click()}\n                >\n                  Browse\n                </button>\n                <input\n          onBlur={validateRegularInput}              type=\"file\"\n                  id=\"metaGraph\"\n                  ref={fileInputRef}\n                  onChange={handleFileUpload}\n                  accept=\"image/*\"\n                  className=\"file-upload-input\"\n                  style={{ display: \"none\" }}\n                />\n              </div>\n              <div className=\"tag-list\">\n                {formData.metaGraph.map((graph, index) => (\n                  <div key={`meta-graph-${index}`} className=\"tag-item\">\n                    <span className=\"tag-text\">{graph}</span>\n                    <button \n                      type=\"button\"\n                      className=\"tag-remove\"\n                      onClick={() => handleRemoveTag('metaGraph', index)}\n                    >\n                      ×\n                    </button>\n                  </div>\n                ))}\n              </div>\n              <div className=\"field-hint\">Upload image files to add to meta graph</div>\n            </div>\n          </div>\n          \n          {/* Statistics */}\n          <div className=\"form-group\">\n            <label htmlFor=\"statistics\">\n              Statistics <span className=\"field-indicator optional-indicator\">optional, multiple values allowed</span>\n            </label>\n            <div className=\"tag-input-container\">\n              <div className=\"tag-input-row\">\n              <input\n                type=\"text\"\n                id=\"statistics\"\n                value={statisticsInput}\n                onChange={(e) => {\n                  setStatisticsInput(e.target.value);\n                  setStatisticsInputValid(false);\n                }}\n                onBlur={() => setStatisticsInputValid(!!statisticsInput.trim())}\n                onKeyPress={(e) => handleKeyPress(e, 'statistics', statisticsInput, setStatisticsInput)}\n                className={`tag-input ${statisticsInputValid ? 'tag-input-valid' : ''}`}\n              />\n              <button \n                  type=\"button\" \n                  className=\"tag-add-button\"\n                  onClick={() => handleAddTag('statistics', statisticsInput, setStatisticsInput)}\n              >\n                  +\n              </button>\n              </div>\n              <div className=\"tag-list\">\n                {formData.statistics.map((stat, index) => (\n                  <div key={`stat-${index}`} className=\"tag-item\">\n                    <span className=\"tag-text\">{stat}</span>\n                    <button \n                      type=\"button\"\n                      className=\"tag-remove\"\n                      onClick={() => handleRemoveTag('statistics', index)}\n                    >\n                      ×\n                    </button>\n                  </div>\n                ))}\n              </div>\n              <div className=\"field-hint\"> </div>\n            </div>\n          </div>\n    \n          {/* Acronym */}\n          <div className=\"form-group\">\n            <label htmlFor=\"acronym\">\n              Acronym <span className=\"field-indicator optional-indicator\">optional, multiple values allowed</span>\n            </label>\n            <div className=\"tag-input-container\">\n              <div className=\"tag-input-row\">\n              <input\n                  type=\"text\"\n                  id=\"acronym\"\n                  value={acronymInput}\n                  onChange={(e) => {\n                    setAcronymInput(e.target.value);\n                    setAcronymInputValid(false);\n                  }}\n                  onBlur={() => setAcronymInputValid(!!acronymInput.trim())}\n                  onKeyPress={(e) => handleKeyPress(e, 'acronym', acronymInput, setAcronymInput)}\n                  className={`tag-input ${acronymInputValid ? 'tag-input-valid' : ''}`}\n              />\n              <button \n                  type=\"button\" \n                  className=\"tag-add-button\"\n                  onClick={() => handleAddTag('acronym', acronymInput, setAcronymInput)}\n              >\n                  +\n              </button>\n              </div>\n              <div className=\"tag-list\">\n                {formData.acronym.map((acr, index) => (\n                  <div key={`acronym-${index}`} className=\"tag-item\">\n                    <span className=\"tag-text\">{acr}</span>\n                    <button \n                      type=\"button\"\n                      className=\"tag-remove\"\n                      onClick={() => handleRemoveTag('acronym', index)}\n                    >\n                      ×\n                    </button>\n                  </div>\n                ))}\n              </div>\n              <div className=\"field-hint\"> </div>\n            </div>\n          </div>\n          \n          {/* Homepage URL (optional, multiple values allowed, IRIs) */}\n          <div className=\"form-group\">\n            <label htmlFor=\"homepageURL\">\n              Homepage URL <span className=\"field-indicator optional-indicator\">optional (IRI), multiple values allowed, IRIs</span>\n            </label>\n            <div className=\"tag-input-container\">\n              <div className=\"tag-input-row\">\n              <input\n                type=\"text\"\n                id=\"homepageURL\"\n                name=\"homepageURLInput\"\n                value={homepageURLInput}\n                onChange={(e) => {\n                  setHomepageURLInput(e.target.value);\n                  setHomepageURLInputError('');\n                  setHomepageURLInputValid(false);\n                }}\n                onBlur={validateIriInput}\n                onKeyPress={(e) => handleKeyPress(e, 'homepageURL', homepageURLInput, setHomepageURLInput, setHomepageURLInputError)}\n                placeholder=\"Enter IRI and press Enter or +\"\n                className={`${homepageURLInputError ? 'tag-input-error' : ''} ${homepageURLInputValid ? 'tag-input-valid' : ''}`}\n              />\n                <button\n                  type=\"button\"\n                  className=\"tag-add-button\"\n                  onClick={() => handleAddTag('homepageURL', homepageURLInput, setHomepageURLInput)}\n                >\n                  +\n                </button>\n              </div>\n              <div className=\"tag-list\">\n                {formData.homepageURL.map((url, index) => (\n                  <div key={`homepage-url-${index}`} className=\"tag-item\">\n                    <span className=\"tag-text\">{url}</span>\n                    <button\n                      type=\"button\"\n                      className=\"tag-remove\"\n                      onClick={() => handleRemoveTag('homepageURL', index)}\n                    >\n                      ×\n                    </button>\n                  </div>\n                ))}\n              </div>\n              {homepageURLInputError && <div className=\"iri-error-message\">{homepageURLInputError}</div>}\n              <div className=\"field-hint\">Press Enter or click + to add IRI</div>\n            </div>\n          </div>\n          \n         {/* Other Pages (optional, multiple values allowed, IRIs) */}\n          <div className=\"form-group\">\n            <label htmlFor=\"otherPages\">\n              Other Pages <span className=\"field-indicator optional-indicator\">optional (IRI), multiple values allowed, IRIs</span>\n            </label>\n            <div className=\"tag-input-container\">\n              <div className=\"tag-input-row\">\n              <input\n                type=\"text\"\n                id=\"otherPages\"\n                name=\"otherPagesInput\"\n                value={otherPagesInput}\n                onChange={(e) => {\n                  setOtherPagesInput(e.target.value);\n                  setOtherPagesInputError('');\n                  setOtherPagesInputValid(false);\n                }}\n                onBlur={validateIriInput}\n                onKeyPress={(e) => handleKeyPress(e, 'otherPages', otherPagesInput, setOtherPagesInput, setOtherPagesInputError)}\n                placeholder=\"Enter IRI and press Enter or +\"\n                className={`tag-input ${otherPagesInputError ? 'tag-input-error' : ''} ${otherPagesInputValid ? 'tag-input-valid' : ''}`}\n              />\n              {otherPagesInputError && <div className=\"iri-error-message\">{otherPagesInputError}</div>}\n\n                <button\n                  type=\"button\"\n                  className=\"tag-add-button\"\n                  onClick={() => handleAddTag('otherPages', otherPagesInput, setOtherPagesInput)}\n                >\n                  +\n                </button>\n              </div>\n              {otherPagesInputError && <div className={`field-error-message`}>{otherPagesInputError}</div>}\n              <div className=\"tag-list\">\n                {formData.otherPages.map((page, index) => (\n                  <div key={`other-page-${index}`} className=\"tag-item\">\n                    <span className=\"tag-text\">{page}</span>\n                    <button\n                      type=\"button\"\n                      className=\"tag-remove\"\n                      onClick={() => handleRemoveTag('otherPages', index)}\n                    >\n                      ×\n                    </button>\n                  </div>\n                ))}\n              </div>\n              <div className=\"field-hint\">Press Enter or click + to add IRI</div>\n            </div>\n          </div>\n\n          {/* Role fields */}\n          <div className={`role-section`}>\n          <div className=\"form-group\">\n          <label className=\"role-label\">\n            Role: Creator <span className=\"field-indicator optional-indicator\">optional, 1 set of values</span>\n          </label>\n          {/* Role Creator */}\n          <div className=\"toggle-container\">\n            <div className=\"toggle-switch-container\">\n              <label className={`toggle-option ${roleCreatorToggle === 'agentIRI' ? 'active' : 'inactive'}`}>\n                Agent IRI available\n              </label>\n              <label className=\"toggle-switch\">\n                <input\n                  type=\"checkbox\"\n                  checked={roleCreatorToggle === 'nameEmail'}\n                  onChange={(e) => {\n                    const newToggle = e.target.checked ? 'nameEmail' : 'agentIRI';\n                    setRoleCreatorToggle(newToggle);\n                    \n                    // Clear fields when switching\n                    if (newToggle === 'agentIRI') {\n                      handleRoleChange('roleCreator', 'givenName', '');\n                      handleRoleChange('roleCreator', 'mbox', '');\n                    } else {\n                      handleRoleChange('roleCreator', 'agent', '');\n                      setRoleCreatorAgentError('');\n                      setRoleCreatorAgentValid(false);\n                    }\n                  }}\n                />\n                <span className={`slider ${roleCreatorToggle === 'nameEmail' ? 'active' : ''}`}></span>\n              </label>\n              <label className={`toggle-option ${roleCreatorToggle === 'nameEmail' ? 'active' : 'inactive'}`}>\n                Name + mBox\n              </label>\n            </div>\n          </div>\n          \n          <div className=\"role-fields\">\n            {roleCreatorToggle === 'agentIRI' ? (\n              <div className=\"role-field\">\n                <label htmlFor=\"roleCreatorAgent\" className=\"subfield-label\">Agent</label>\n                <input\n                  onBlur={validateIriInput}\n                  type=\"text\"\n                  id=\"roleCreatorAgent\"\n                  name=\"roleCreatorAgent\"\n                  value={formData.roleCreator.agent}\n                  onChange={(e) => {\n                    handleRoleChange('roleCreator', 'agent', e.target.value);\n                    setRoleCreatorAgentError('');\n                    setRoleCreatorAgentValid(false);\n                  }}\n                  className={`subfield-input ${roleCreatorAgentError ? 'input-error' : ''} ${roleCreatorAgentValid ? 'input-valid' : ''}`}\n                />\n                {roleCreatorAgentError && <div className=\"iri-error-message\">{roleCreatorAgentError}</div>}\n              </div> \n            ) : (\n              <>\n                <div className=\"role-field\">\n                  <label htmlFor=\"roleCreatorGivenName\" className=\"subfield-label\">Given Name</label>\n                  <input\n                    onBlur={validateRegularInput}\n                    type=\"text\"\n                    id=\"roleCreatorGivenName\"\n                    value={formData.roleCreator.givenName}\n                    onChange={(e) => handleRoleChange('roleCreator', 'givenName', e.target.value)}\n                    className=\"subfield-input\"\n                  />\n                </div>\n                <div className=\"role-field\">\n                  <label htmlFor=\"roleCreatorMbox\" className=\"subfield-label\">Mbox</label>\n                  <input\n                    onBlur={validateRegularInput}\n                    type=\"email\"\n                    id=\"roleCreatorMbox\"\n                    value={formData.roleCreator.mbox}\n                    onChange={(e) => handleRoleChange('roleCreator', 'mbox', e.target.value)}\n                    className=\"subfield-input\"\n                  />\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n\n        {/* Role: Publisher */}\n        <div className=\"form-group\">\n          <label className=\"role-label\">\n            Role: Publisher <span className=\"field-indicator optional-indicator\">optional, 1 set of values</span>\n          </label>\n          \n          <div className=\"toggle-container\">\n            <div className=\"toggle-switch-container\">\n              <label className={`toggle-option ${rolePublisherToggle === 'agentIRI' ? 'active' : 'inactive'}`}>\n                Agent IRI available\n              </label>\n              <label className=\"toggle-switch\">\n                <input\n                  type=\"checkbox\"\n                  checked={rolePublisherToggle === 'nameEmail'}\n                  onChange={(e) => {\n                    const newToggle = e.target.checked ? 'nameEmail' : 'agentIRI';\n                    setRolePublisherToggle(newToggle);\n                    \n                    if (newToggle === 'agentIRI') {\n                      handleRoleChange('rolePublisher', 'givenName', '');\n                      handleRoleChange('rolePublisher', 'mbox', '');\n                    } else {\n                      handleRoleChange('rolePublisher', 'agent', '');\n                      setRolePublisherAgentError('');\n                      setRolePublisherAgentValid(false);\n                    }\n                  }}\n                />\n                <span className={`slider ${rolePublisherToggle === 'nameEmail' ? 'active' : ''}`}></span>\n              </label>\n              <label className={`toggle-option ${rolePublisherToggle === 'nameEmail' ? 'active' : 'inactive'}`}>\n                Name + mBox\n              </label>\n            </div>\n          </div>\n          \n          <div className=\"role-fields\">\n            {rolePublisherToggle === 'agentIRI' ? (\n              <div className=\"role-field\">\n                <label htmlFor=\"rolePublisherAgent\" className=\"subfield-label\">Agent</label>\n                <input\n                  onBlur={validateIriInput}\n                  type=\"text\"\n                  id=\"rolePublisherAgent\"\n                  name=\"rolePublisherAgent\"\n                  value={formData.rolePublisher.agent}\n                  onChange={(e) => {\n                    handleRoleChange('rolePublisher', 'agent', e.target.value);\n                    setRolePublisherAgentError('');\n                    setRolePublisherAgentValid(false);\n                  }}\n                  className={`subfield-input ${rolePublisherAgentError ? 'input-error' : ''} ${rolePublisherAgentValid ? 'input-valid' : ''}`}\n                />\n                {rolePublisherAgentError && <div className=\"iri-error-message\">{rolePublisherAgentError}</div>}\n              </div>\n            ) : (\n              <>\n                <div className=\"role-field\">\n                  <label htmlFor=\"rolePublisherGivenName\" className=\"subfield-label\">Given Name</label>\n                  <input\n                    onBlur={validateRegularInput}\n                    type=\"text\"\n                    id=\"rolePublisherGivenName\"\n                    value={formData.rolePublisher.givenName}\n                    onChange={(e) => handleRoleChange('rolePublisher', 'givenName', e.target.value)}\n                    className=\"subfield-input\"\n                  />\n                </div>\n                <div className=\"role-field\">\n                  <label htmlFor=\"rolePublisherMbox\" className=\"subfield-label\">Mbox</label>\n                  <input\n                    onBlur={validateRegularInput}\n                    type=\"email\"\n                    id=\"rolePublisherMbox\"\n                    value={formData.rolePublisher.mbox}\n                    onChange={(e) => handleRoleChange('rolePublisher', 'mbox', e.target.value)}\n                    className=\"subfield-input\"\n                  />\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n\n        {/* Role Funder */}\n        <div className=\"form-group\">\n          <label className=\"role-label\">\n            Role: Funder <span className=\"field-indicator optional-indicator\">optional, 1 set of values</span>\n          </label>\n          \n          <div className=\"toggle-container\">\n            <div className=\"toggle-switch-container\">\n              <label className={`toggle-option ${roleFunderToggle === 'agentIRI' ? 'active' : 'inactive'}`}>\n                Agent IRI available\n              </label>\n              <label className=\"toggle-switch\">\n                <input\n                  type=\"checkbox\"\n                  checked={roleFunderToggle === 'nameEmail'}\n                  onChange={(e) => {\n                    const newToggle = e.target.checked ? 'nameEmail' : 'agentIRI';\n                    setRoleFunderToggle(newToggle);\n                    \n                    if (newToggle === 'agentIRI') {\n                      handleRoleChange('roleFunder', 'givenName', '');\n                      handleRoleChange('roleFunder', 'mbox', '');\n                    } else {\n                      handleRoleChange('roleFunder', 'agent', '');\n                      setRoleFunderAgentError('');\n                      setRoleFunderAgentValid(false);\n                    }\n                  }}\n                />\n                <span className={`slider ${roleFunderToggle === 'nameEmail' ? 'active' : ''}`}></span>\n              </label>\n              <label className={`toggle-option ${roleFunderToggle === 'nameEmail' ? 'active' : 'inactive'}`}>\n                Name + mBox\n              </label>\n            </div>\n          </div>\n          \n          <div className=\"role-fields\">\n            {roleFunderToggle === 'agentIRI' ? (\n              <div className=\"role-field\">\n                <label htmlFor=\"roleFunderAgent\" className=\"subfield-label\">Agent</label>\n                <input\n                  onBlur={validateIriInput}\n                  type=\"text\"\n                  id=\"roleFunderAgent\"\n                  name=\"roleFunderAgent\"\n                  value={formData.roleFunder.agent}\n                  onChange={(e) => {\n                    handleRoleChange('roleFunder', 'agent', e.target.value);\n                    setRoleFunderAgentError('');\n                    setRoleFunderAgentValid(false);\n                  }}\n                  className={`subfield-input ${roleFunderAgentError ? 'input-error' : ''} ${roleFunderAgentValid ? 'input-valid' : ''}`}\n                />\n                {roleFunderAgentError && <div className=\"iri-error-message\">{roleFunderAgentError}</div>}\n              </div>  \n            ) : (\n              <>\n                <div className=\"role-field\">\n                  <label htmlFor=\"roleFunderGivenName\" className=\"subfield-label\">Given Name</label>\n                  <input\n                    onBlur={validateRegularInput}\n                    type=\"text\"\n                    id=\"roleFunderGivenName\"\n                    value={formData.roleFunder.givenName}\n                    onChange={(e) => handleRoleChange('roleFunder', 'givenName', e.target.value)}\n                    className=\"subfield-input\"\n                  />\n                </div>\n                <div className=\"role-field\">\n                  <label htmlFor=\"roleFunderMbox\" className=\"subfield-label\">Mbox</label>\n                  <input\n                    onBlur={validateRegularInput}\n                    type=\"email\"\n                    id=\"roleFunderMbox\"\n                    value={formData.roleFunder.mbox}\n                    onChange={(e) => handleRoleChange('roleFunder', 'mbox', e.target.value)}\n                    className=\"subfield-input\"\n                  />\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n        </div>\n\n         {/* License */}\n         <div className=\"form-group\">\n           <label htmlFor=\"license\">\n             License <span className=\"field-indicator required-indicator\">required (IRI), 1 value only</span>\n           </label>\n           <input\n              type=\"text\"\n              id=\"license\"\n              name=\"license\"\n              value={formData.license}\n              onChange={(e) => {\n                handleChange(e);\n                setLicenseError('');\n                setLicenseValid(false);\n              }}\n              onBlur={validateIriInput}\n              required\n              className={`form-control ${licenseValid ? 'form-input-valid' : ''} ${licenseError ? 'form-input-error' : ''}`}\n            />\n            {licenseError && <div className=\"iri-error-message\">{licenseError}</div>}\n         </div>\n         \n         {/* Version */}\n         <div className=\"form-group\">\n           <label htmlFor=\"version\">\n             Version <span className=\"field-indicator required-indicator\">required, 1 value only</span>\n           </label>\n           <input\n              type=\"text\"\n              id=\"version\"\n              name=\"version\"\n              value={formData.version}\n              onChange={handleChange}\n              onBlur={() => setVersionValid(!!formData.version.trim())}\n              required\n              className={`form-control ${versionValid ? 'form-input-valid' : ''}`}\n           />\n         </div>\n    \n         {/* Distributions Section */}\n         <div className=\"form-section\">\n           <h3 className=\"section-title\">Distributions</h3>\n           <div className=\"field-indicator required-indicator\">required, multiple submissions allowed</div>\n         </div>\n    \n         {/* Display existing distributions */}\n         <div className=\"distributions-list\">\n           {formData.distributions.map((dist, index) => (\n             <div key={`distribution-${index}`} className=\"distribution-item\">\n               <div className=\"distribution-header\">\n                 <div className=\"distribution-title\">{dist.title}</div>\n                 <div className=\"distribution-actions\">\n                      <button \n                        type=\"button\"\n                        className=\"edit-button\"\n                        onClick={() => {\n                          setCurrentDistribution({...dist});\n                          handleRemoveDistribution(index);\n                          document.querySelector('.distribution-form').scrollIntoView({ behavior: 'smooth' });\n                        }}\n                      >\n                        Edit\n                      </button>\n                      <button \n                        type=\"button\"\n                        className=\"tag-remove\"\n                        onClick={() => handleRemoveDistribution(index)}\n                      >\n                        ×\n                      </button>\n                    </div>\n                  </div>\n               <div className=\"distribution-preview\">\n                 <div className=\"distribution-field\">\n                   <span className=\"field-label\">Description:</span>\n                   <span className=\"field-value\">{dist.description}</span>\n                 </div>\n                 <div className=\"distribution-field\">\n                   <span className=\"field-label\">Media Type:</span>\n                   <span className=\"field-value\">{dist.mediaType}</span>\n                 </div>\n                 <div className=\"distribution-field\">\n                   <span className=\"field-label\">Download URL:</span>\n                   <span className=\"field-value\">{dist.downloadURL}</span>\n                 </div>\n                 <div className=\"distribution-field\">\n                   <span className=\"field-label\">Access URL:</span>\n                   <span className=\"field-value\">{dist.accessURL}</span>\n                 </div>\n                 {dist.accessService && (\n                   <div className=\"distribution-field\">\n                     <span className=\"field-label\">Access Service:</span>\n                     <span className=\"field-value\">{dist.accessService}</span>\n                   </div>\n                 )}\n                 {dist.byteSize && (\n                   <div className=\"distribution-field\">\n                     <span className=\"field-label\">Byte Size:</span>\n                     <span className=\"field-value\">{dist.byteSize}</span>\n                   </div>\n                 )}\n                 {dist.compressionFormat && (\n                   <div className=\"distribution-field\">\n                     <span className=\"field-label\">Compression Format:</span>\n                     <span className=\"field-value\">{dist.compressionFormat}</span>\n                   </div>\n                 )}\n                 {dist.packagingFormat && (\n                   <div className=\"distribution-field\">\n                     <span className=\"field-label\">Packaging Format:</span>\n                     <span className=\"field-value\">{dist.packagingFormat}</span>\n                   </div>\n                 )}\n    \n    \n                 {dist.hasPolicy && (\n                   <div className=\"distribution-field\">\n                     <span className=\"field-label\">Has Policy:</span>\n                     <span className=\"field-value\">{dist.hasPolicy}</span>\n                   </div>\n                 )}\n                 {dist.license && (\n                   <div className=\"distribution-field\">\n                     <span className=\"field-label\">license:</span>\n                     <span className=\"field-value\">{dist.license}</span>\n                   </div>\n                 )}\n                 {dist.rights && (\n                   <div className=\"distribution-field\">\n                     <span className=\"field-label\">Rights:</span>\n                     <span className=\"field-value\">{dist.rights}</span>\n                   </div>\n                 )}\n                 {dist.spatialResolution && (\n                   <div className=\"distribution-field\">\n                     <span className=\"field-label\">Spatial Resolution:</span>\n                     <span className=\"field-value\">{dist.spatialResolution}</span>\n                   </div>\n                 )}\n                 {dist.temporalResolution && (\n                   <div className=\"distribution-field\">\n                     <span className=\"field-label\">Temporal Resolution:</span>\n                     <span className=\"field-value\">{dist.temporalResolution}</span>\n                   </div>\n                 )}\n    \n    \n    \n    \n                 {dist.releaseDate && (\n                   <div className=\"distribution-field\">\n                     <span className=\"field-label\">Release Date:</span>\n                     <span className=\"field-value\">{formatDate(dist.releaseDate)}</span>\n                   </div>\n                 )}\n                 {dist.modificationDate && (\n                   <div className=\"distribution-field\">\n                     <span className=\"field-label\">Modification Date:</span>\n                     <span className=\"field-value\">{formatDate(dist.modificationDate)}</span>\n                   </div>\n                 )}\n               </div>\n             </div>\n           ))}\n         </div>\n    \n         {/* Distribution Form */}\n         <div className=\"distribution-form\">\n           <div className=\"distribution-form-header\">\n             <h4>Add New Distribution</h4>\n           </div>\n           \n           {/* Required distribution fields */}\n           <div className=\"form-group\">\n             <label htmlFor=\"distTitle\">\n               Title <span className=\"field-indicator required-indicator\">required</span>\n             </label>\n             <input\n              type=\"text\"\n              id=\"distTitle\"\n              value={currentDistribution.title}\n              onChange={(e) => handleDistributionChange('title', e.target.value)}\n              className=\"subfield-input\"\n             />\n           </div>\n           \n           <div className=\"form-group\">\n             <label htmlFor=\"distDescription\">\n               Description <span className=\"field-indicator required-indicator\">required</span>\n             </label>\n             <textarea\n              id=\"distDescription\"\n               value={currentDistribution.description}\n               onChange={(e) => handleDistributionChange('description', e.target.value)}\n               rows=\"2\"\n               className=\"subfield-input\"\n             ></textarea>\n           </div>\n           \n           <div className=\"form-group\">\n             <label htmlFor=\"distMediaType\">\n               Media Type <span className=\"field-indicator required-indicator\">required</span>\n             </label>\n             <input\n              type=\"text\"\n              id=\"distMediaType\"\n              value={currentDistribution.mediaType}\n              onChange={(e) => handleDistributionChange('mediaType', e.target.value)}\n              className=\"subfield-input\"\n             />\n           </div>\n           \n           <div className=\"form-group\">\n             <label htmlFor=\"distDownloadURL\">\n               Download URL (dcat:downloadURL) <span className=\"field-indicator required-indicator\">required (IRI)</span>\n             </label>\n             <input\n                type=\"url\"\n                id=\"distDownloadURL\"\n                name=\"distDownloadURL\"\n                value={currentDistribution.downloadURL}\n                onChange={(e) => {\n                  handleDistributionChange('downloadURL', e.target.value);\n                  setDistDownloadURLError('');\n                  setDistDownloadURLValid(false);\n                }}\n                onBlur={validateIriInput}\n                className={`subfield-input ${distDownloadURLError ? 'input-error' : ''} ${distDownloadURLValid ? 'input-valid' : ''}`}\n              />\n              {distDownloadURLError && <div className=\"iri-error-message\">{distDownloadURLError}</div>}\n\n           </div>\n           \n           <div className=\"form-group\">\n             <label htmlFor=\"distAccessURL\">\n               Access URL <span className=\"field-indicator required-indicator\">required (IRI)</span>\n             </label>\n             <input\n                type=\"url\"\n                id=\"distAccessURL\"\n                name=\"distAccessURL\"\n                value={currentDistribution.accessURL}\n                onChange={(e) => {\n                  handleDistributionChange('accessURL', e.target.value);\n                  setDistAccessURLError('');\n                  setDistAccessURLValid(false);\n                }}\n                onBlur={validateIriInput}\n                className={`subfield-input ${distAccessURLError ? 'input-error' : ''} ${distAccessURLValid ? 'input-valid' : ''}`}\n              />\n              {distAccessURLError && <div className=\"iri-error-message\">{distAccessURLError}</div>}\n          </div>    \n           {/* Optional distribution fields */}\n           <div className=\"form-group\">\n             <label htmlFor=\"distAccessService\">\n               Access Service <span className=\"field-indicator optional-indicator\">optional</span>\n             </label>\n             <input\n              type=\"text\"\n              id=\"distAccessService\"\n              value={currentDistribution.accessService}\n              onChange={(e) => handleDistributionChange('accessService', e.target.value)}\n              className=\"subfield-input\"\n             />\n           </div>\n           \n           <div className=\"form-group\">\n             <label htmlFor=\"distByteSize\">\n               Byte Size <span className=\"field-indicator optional-indicator\">optional</span>\n             </label>\n             <input\n              type=\"text\"\n              id=\"distByteSize\"\n              value={currentDistribution.byteSize}\n              onChange={(e) => handleDistributionChange('byteSize', e.target.value)}\n              className=\"subfield-input\"\n             />\n           </div>\n           \n           <div className=\"form-group\">\n             <label htmlFor=\"distCompressionFormat\">\n               Compression Format <span className=\"field-indicator optional-indicator\">optional</span>\n             </label>\n             <input\n               type=\"text\"\n               id=\"distCompressionFormat\"\n               name=\"distCompressionFormat\"\n               value={currentDistribution.compressionFormat}\n               onChange={(e) => handleDistributionChange('compressionFormat', e.target.value)}\n               onBlur={validateRegularInput}\n               className={`subfield-input ${distCompressionFormatValid ? 'form-input-valid' : ''}`}\n             />\n           </div>\n           \n           <div className=\"form-group\">\n             <label htmlFor=\"distPackagingFormat\">\n               Packaging Format <span className=\"field-indicator optional-indicator\">optional</span>\n             </label>\n             <input\n               type=\"text\"\n               id=\"distPackagingFormat\"\n               name=\"distPackagingFormat\"\n               value={currentDistribution.packagingFormat}\n               onChange={(e) => handleDistributionChange('packagingFormat', e.target.value)}\n               onBlur={validateRegularInput}\n               className={`subfield-input ${distPackagingFormatValid ? 'form-input-valid' : ''}`}\n             />\n           </div>\n           <div className=\"form-group\">\n             <label htmlFor=\"distHasPolicy\">\n               Has Policy <span className=\"field-indicator optional-indicator\">optional</span>\n             </label>\n             <input\n               type=\"text\"\n               id=\"distHasPolicy\"\n               name=\"distHasPolicy\"\n               value={currentDistribution.hasPolicy}\n               onChange={(e) => handleDistributionChange('hasPolicy', e.target.value)}\n               onBlur={validateRegularInput}\n               className={`subfield-input ${distHasPolicyValid ? 'form-input-valid' : ''}`}\n             />\n           </div>\n           \n           <div className=\"form-group\">\n             <label htmlFor=\"distLicense\">\n               License <span className=\"field-indicator optional-indicator\">optional</span>\n             </label>\n             <input\n               type=\"text\"\n               id=\"distLicense\"\n               name=\"distLicense\"\n               value={currentDistribution.license}\n               onChange={(e) => handleDistributionChange('license', e.target.value)}\n               onBlur={validateRegularInput}\n               className={`subfield-input ${distLicenseValid ? 'form-input-valid' : ''}`}\n             />\n           </div>\n           \n           <div className=\"form-group\">\n             <label htmlFor=\"distRights\">\n               Rights <span className=\"field-indicator optional-indicator\">optional</span>\n             </label>\n             <input\n               type=\"text\"\n               id=\"distRights\"\n               name=\"distRights\"\n               value={currentDistribution.rights}\n               onChange={(e) => handleDistributionChange('rights', e.target.value)}\n               onBlur={validateRegularInput}\n               className={`subfield-input ${distRightsValid ? 'form-input-valid' : ''}`}\n             />\n           </div>\n           <div className=\"form-group\">\n             <label htmlFor=\"distSpatialResolution\">\n               Spatial Resolution <span className=\"field-indicator optional-indicator\">optional</span>\n             </label>\n             <input\n               type=\"text\"\n               id=\"distSpatialResolution\"\n               name=\"distSpatialResolution\"\n               value={currentDistribution.spatialResolution}\n               onChange={(e) => handleDistributionChange('spatialResolution', e.target.value)}\n               onBlur={validateRegularInput}\n               className={`subfield-input ${distSpatialResolutionValid ? 'form-input-valid' : ''}`}\n             />\n           </div>\n           <div className=\"form-group\">\n             <label htmlFor=\"distTemporalResolution\">\n               Temporal Resolution <span className=\"field-indicator optional-indicator\">optional</span>\n             </label>\n             <input\n               type=\"text\"\n               id=\"distTemporalResolution\"\n               name=\"distTemporalResolution\"\n               value={currentDistribution.temporalResolution}\n               onChange={(e) => handleDistributionChange('temporalResolution', e.target.value)}\n               onBlur={validateRegularInput}\n               className={`subfield-input ${distTemporalResolutionValid ? 'form-input-valid' : ''}`}\n             />\n           </div>\n           <div className=\"form-group\">\n             <label htmlFor=\"distReleaseDate\">\n              Release Date <span className=\"field-indicator optional-indicator\">optional</span>\n            </label>\n            <div className=\"date-input-container\">\n              <input\n                type=\"text\"\n                id=\"distReleaseDate\"\n                name=\"distReleaseDate\"\n                value={currentDistribution.releaseDate}\n                onChange={(e) => handleDistributionChange('releaseDate', e.target.value)}\n                onBlur={validateDateInput}\n                placeholder=\"YYYY/MM/DD\"\n                className={`date-input subfield-input ${distReleaseDateError ? 'date-input-error' : ''}`}\n              />\n              <input\n                type=\"date\"\n                className=\"date-picker-control\"\n                onChange={(e) => handleDatePickerChange(e, 'distReleaseDate')}\n                aria-label=\"Date picker for Release Date\"\n                defaultValue=\"\"\n                tabIndex=\"-1\"\n              />\n            </div>\n            {distReleaseDateError && <div className=\"date-error-message\">{distReleaseDateError}</div>}\n          </div>\n    \n          <div className=\"form-group\">\n            <label htmlFor=\"distModificationDate\">\n              Update/Modification Date <span className=\"field-indicator optional-indicator\">optional</span>\n            </label>\n            <div className=\"date-input-container\">\n              <input\n                type=\"text\"\n                id=\"distModificationDate\"\n                name=\"distModificationDate\"\n                value={currentDistribution.modificationDate}\n                onChange={(e) => handleDistributionChange('modificationDate', e.target.value)}\n                onBlur={validateDateInput}\n                placeholder=\"YYYY/MM/DD\"\n                className={`date-input subfield-input ${distModificationDateError ? 'date-input-error' : ''}`}\n              />\n              <input\n                type=\"date\"\n                className=\"date-picker-control\"\n                onChange={(e) => handleDatePickerChange(e, 'distModificationDate')}\n                aria-label=\"Date picker for Modification Date\"\n                defaultValue=\"\"\n                tabIndex=\"-1\"\n              />\n            </div>\n            {distModificationDateError && <div className=\"date-error-message\">{distModificationDateError}</div>}\n          </div>\n    \n           \n          \n           <div className=\"distribution-actions\">\n             <button \n               type=\"button\" \n               className={`add-button`}\n               onClick={handleAddDistribution}\n             >\n               Add Distribution\n             </button>\n           </div>\n         </div>\n         \n         <div className=\"form-group\">\n          <label htmlFor=\"restAPI\">\n              REST API <span className=\"field-indicator optional-indicator\">optional, multiple values allowed</span>\n          </label>\n          <div className=\"tag-input-container\">\n              <div className=\"tag-input-row\">\n              <input\n                  type=\"text\"\n                  id=\"restAPI\"\n                  value={restAPIInput}\n                  onChange={(e) => {\n                    setRestAPIInput(e.target.value);\n                    setRestAPIInputValid(false);\n                  }}\n                  onBlur={() => setRestAPIInputValid(!!restAPIInput.trim())}\n                  onKeyPress={(e) => handleKeyPress(e, 'restAPI', restAPIInput, setRestAPIInput)}\n                  className={`tag-input ${restAPIInputValid ? 'tag-input-valid' : ''}`}\n              />\n              <button \n                  type=\"button\" \n                  className=\"tag-add-button\"\n                  onClick={() => handleAddTag('restAPI', restAPIInput, setRestAPIInput)}\n              >\n                  +\n              </button>\n              </div>\n              <div className=\"tag-list\">\n              {formData.restAPI.map((item, index) => (\n                  <div key={`rest-api-${index}`} className=\"tag-item\">\n                  <span className=\"tag-text\">{item}</span>\n                  <button \n                      type=\"button\"\n                      className=\"tag-remove\"\n                      onClick={() => handleRemoveTag('restAPI', index)}\n                  >\n                      ×\n                  </button>\n                  </div>\n              ))}\n              </div>\n              <div className=\"field-hint\"> </div>\n          </div>\n          </div>\n    \n          {/* SPARQL Endpoints Section */}\n<div className=\"form-section\">\n  <h3 className=\"section-title\">SPARQL Endpoints</h3>\n  <div className=\"field-indicator optional-indicator\">optional, multiple submissions allowed</div>\n  {/* Display existing SPARQL endpoints */}\n  <div className=\"distributions-list\">\n    {sparqlEndpoints.map((endpoint, idx) => (\n      <div key={`sparql-endpoint-${idx}`} className=\"distribution-item\">\n        <div className=\"distribution-header\">\n          <div className=\"distribution-title\">{endpoint.title || '(no title)'}</div>\n          <div className=\"distribution-actions\">\n            <button\n              type=\"button\"\n              className=\"edit-button\"\n              onClick={() => handleEditSparqlEndpoint(idx)}\n              aria-label=\"Edit SPARQL endpoint\"\n            >\n              Edit\n            </button>\n            <button\n              type=\"button\"\n              className=\"tag-remove\"\n              onClick={() => handleRemoveSparqlEndpoint(idx)}\n              aria-label=\"Remove SPARQL endpoint\"\n            >\n              ×\n            </button>\n          </div>\n        </div>\n        <div className=\"distribution-preview\">\n          <div className=\"distribution-field\">\n            <span className=\"field-label\">dcat:DataService:</span>\n            <span className=\"field-value\">{endpoint.dataService}</span>\n          </div>\n          <div className=\"distribution-field\">\n            <span className=\"field-label\">dcat:endpointURL:</span>\n            <span className=\"field-value\">{endpoint.endpointURL}</span>\n          </div>\n          <div className=\"distribution-field\">\n            <span className=\"field-label\">dct:identifier:</span>\n            <span className=\"field-value\">{endpoint.identifier}</span>\n          </div>\n          <div className=\"distribution-field\">\n            <span className=\"field-label\">dct:title:</span>\n            <span className=\"field-value\">{endpoint.title}</span>\n          </div>\n          <div className=\"distribution-field\">\n            <span className=\"field-label\">dcat:endpointDescription:</span>\n            <span className=\"field-value\">{endpoint.endpointDescription}</span>\n          </div>\n          <div className=\"distribution-field\">\n            <span className=\"field-label\">adms:status:</span>\n            <span className=\"field-value\">{endpoint.status}</span>\n          </div>\n        </div>\n      </div>\n    ))}\n  </div>\n  {/* SPARQL Endpoint Form */}\n  <div className=\"distribution-form sparql-endpoint-form\">\n    <div className=\"distribution-form-header\">\n      <h4>Add New SPARQL Endpoint</h4>\n    </div>\n    <div className=\"form-group\">\n      <label htmlFor=\"sparqlDataService\">\n        dcat:DataService <span className=\"field-indicator optional-indicator\">optional</span>\n      </label>\n      <input\n        type=\"text\"\n        id=\"sparqlDataService\"\n        name=\"sparqlDataService\"\n        value={currentSparqlEndpoint.dataService}\n        onChange={e => handleCurrentSparqlEndpointChange('dataService', e.target.value)}\n        onBlur={validateRegularInput}\n        className={`subfield-input ${sparqlDataServiceValid ? 'form-input-valid' : ''}`}\n      />\n    </div>\n    <div className=\"form-group\">\n      <label htmlFor=\"sparqlEndpointURL\">\n        dcat:endpointURL <span className=\"field-indicator optional-indicator\">optional</span>\n      </label>\n      <input\n        type=\"text\"\n        id=\"sparqlEndpointURL\"\n        name=\"sparqlEndpointURL\"\n        value={currentSparqlEndpoint.endpointURL}\n        onChange={e => handleCurrentSparqlEndpointChange('endpointURL', e.target.value)}\n        onBlur={validateIriInput}\n        className={`subfield-input ${sparqlEndpointURLError ? 'form-input-error' : ''} ${sparqlEndpointURLValid ? 'form-input-valid' : ''}`}\n      />\n      {sparqlEndpointURLError && <div className=\"iri-error-message\">{sparqlEndpointURLError}</div>}\n    </div>\n    <div className=\"form-group\">\n      <label htmlFor=\"sparqlIdentifier\">\n        dct:identifier <span className=\"field-indicator optional-indicator\">optional</span>\n      </label>\n      <input\n        type=\"text\"\n        id=\"sparqlIdentifier\"\n        name=\"sparqlIdentifier\"\n        value={currentSparqlEndpoint.identifier}\n        onChange={e => handleCurrentSparqlEndpointChange('identifier', e.target.value)}\n        onBlur={validateRegularInput}\n        className={`subfield-input ${sparqlIdentifierValid ? 'form-input-valid' : ''}`}\n      />\n    </div>\n    <div className=\"form-group\">\n      <label htmlFor=\"sparqlTitle\">\n        dct:title <span className=\"field-indicator optional-indicator\">optional</span>\n      </label>\n      <input\n        type=\"text\"\n        id=\"sparqlTitle\"\n        name=\"sparqlTitle\"\n        value={currentSparqlEndpoint.title}\n        onChange={e => handleCurrentSparqlEndpointChange('title', e.target.value)}\n        onBlur={validateRegularInput}\n        className={`subfield-input ${sparqlTitleValid ? 'form-input-valid' : ''}`}\n      />\n    </div>\n    <div className=\"form-group\">\n      <label htmlFor=\"sparqlEndpointDescription\">\n        dcat:endpointDescription <span className=\"field-indicator optional-indicator\">optional</span>\n      </label>\n      <input\n        type=\"text\"\n        id=\"sparqlEndpointDescription\"\n        name=\"sparqlEndpointDescription\"\n        value={currentSparqlEndpoint.endpointDescription}\n        onChange={e => handleCurrentSparqlEndpointChange('endpointDescription', e.target.value)}\n        onBlur={validateRegularInput}\n        className={`subfield-input ${sparqlEndpointDescriptionValid ? 'form-input-valid' : ''}`}\n      />\n    </div>\n    <div className=\"form-group\">\n      <label htmlFor=\"sparqlStatus\">\n        adms:status <span className=\"field-indicator optional-indicator\">optional</span>\n      </label>\n      <input\n        type=\"text\"\n        id=\"sparqlStatus\"\n        name=\"sparqlStatus\"\n        value={currentSparqlEndpoint.status}\n        onChange={e => handleCurrentSparqlEndpointChange('status', e.target.value)}\n        onBlur={validateRegularInput}\n        className={`subfield-input ${sparqlStatusValid ? 'form-input-valid' : ''}`}\n      />\n    </div>\n    <div className=\"distribution-actions\">\n      <button\n        type=\"button\"\n        className=\"add-button\"\n        onClick={handleAddSparqlEndpoint}\n      >\n        {editingSparqlEndpointIdx !== null ? 'Save SPARQL Endpoint' : 'Add SPARQL Endpoint'}\n      </button>\n      {editingSparqlEndpointIdx !== null && (\n        <button\n          type=\"button\"\n          className=\"cancel-button\"\n          onClick={handleCancelEditSparqlEndpoint}\n        >\n          Cancel\n        </button>\n      )}\n    </div>\n  </div>\n</div>\n\n          {/* Example Resource Section */}\n<div className=\"form-section\">\n  <h3 className=\"section-title\">Example Resources</h3>\n  <div className=\"field-indicator optional-indicator\">optional, multiple submissions allowed</div>\n  \n  {/* Display existing Example Resources */}\n  <div className=\"distributions-list\">\n    {exampleResources.map((resource, idx) => (\n      <div key={`example-resource-${idx}`} className=\"distribution-item\">\n        <div className=\"distribution-header\">\n          <div className=\"distribution-title\">{resource.title || '(no title)'}</div>\n          <div className=\"distribution-actions\">\n            <button\n              type=\"button\"\n              className=\"edit-button\"\n              onClick={() => handleEditExampleResource(idx)}\n              aria-label=\"Edit Example Resource\"\n            >\n              Edit\n            </button>\n            <button\n              type=\"button\"\n              className=\"tag-remove\"\n              onClick={() => handleRemoveExampleResource(idx)}\n              aria-label=\"Remove Example Resource\"\n            >\n              ×\n            </button>\n          </div>\n        </div>\n        <div className=\"distribution-preview\">\n          <div className=\"distribution-field\">\n            <span className=\"field-label\">dcat:accessURL:</span>\n            <span className=\"field-value\">{resource.accessURL}</span>\n          </div>\n          <div className=\"distribution-field\">\n            <span className=\"field-label\">dct:title:</span>\n            <span className=\"field-value\">{resource.title}</span>\n          </div>\n          <div className=\"distribution-field\">\n            <span className=\"field-label\">dcat:mediaType:</span>\n            <span className=\"field-value\">{resource.mediaType}</span>\n          </div>\n          <div className=\"distribution-field\">\n            <span className=\"field-label\">dct:description:</span>\n            <span className=\"field-value\">{resource.description}</span>\n          </div>\n          <div className=\"distribution-field\">\n            <span className=\"field-label\">adms:status:</span>\n            <span className=\"field-value\">{resource.status}</span>\n          </div>\n        </div>\n      </div>\n    ))}\n  </div>\n\n  {/* Example Resource Form */}\n  <div className=\"distribution-form\">\n    <div className=\"form-group\">\n      <label htmlFor=\"exampleResourceAccessURL\">\n        dcat:accessURL <span className=\"field-indicator optional-indicator\">optional (IRI)</span>\n      </label>\n      <input\n        type=\"text\"\n        id=\"exampleResourceAccessURL\"\n        name=\"exampleResourceAccessURL\"\n        value={currentExampleResource.accessURL}\n        onChange={e => handleCurrentExampleResourceChange('accessURL', e.target.value)}\n        onBlur={validateIriInput}\n        className={`subfield-input ${exampleResourceAccessURLError ? 'form-input-error' : ''} ${exampleResourceAccessURLValid ? 'form-input-valid' : ''}`}\n      />\n      {exampleResourceAccessURLError && <div className=\"iri-error-message\">{exampleResourceAccessURLError}</div>}\n    </div>\n    <div className=\"form-group\">\n      <label htmlFor=\"exampleResourceTitle\">\n        dct:title <span className=\"field-indicator optional-indicator\">optional</span>\n      </label>\n      <input\n        type=\"text\"\n        id=\"exampleResourceTitle\"\n        name=\"exampleResourceTitle\"\n        value={currentExampleResource.title}\n        onChange={e => handleCurrentExampleResourceChange('title', e.target.value)}\n        onBlur={validateRegularInput}\n        className={`subfield-input ${exampleResourceTitleValid ? 'form-input-valid' : ''}`}\n      />\n    </div>\n    <div className=\"form-group\">\n      <label htmlFor=\"exampleResourceMediaType\">\n        dcat:mediaType <span className=\"field-indicator optional-indicator\">optional</span>\n      </label>\n      <input\n        type=\"text\"\n        id=\"exampleResourceMediaType\"\n        name=\"exampleResourceMediaType\"\n        value={currentExampleResource.mediaType}\n        onChange={e => handleCurrentExampleResourceChange('mediaType', e.target.value)}\n        onBlur={validateRegularInput}\n        className={`subfield-input ${exampleResourceMediaTypeValid ? 'form-input-valid' : ''}`}\n      />\n    </div>\n    <div className=\"form-group\">\n      <label htmlFor=\"exampleResourceDescription\">\n        dct:description <span className=\"field-indicator optional-indicator\">optional</span>\n      </label>\n      <input\n        type=\"text\"\n        id=\"exampleResourceDescription\"\n        name=\"exampleResourceDescription\"\n        value={currentExampleResource.description}\n        onChange={e => handleCurrentExampleResourceChange('description', e.target.value)}\n        onBlur={validateRegularInput}\n        className={`subfield-input ${exampleResourceDescriptionValid ? 'form-input-valid' : ''}`}\n      />\n    </div>\n    <div className=\"form-group\">\n      <label htmlFor=\"exampleResourceStatus\">\n        adms:status <span className=\"field-indicator optional-indicator\">optional</span>\n      </label>\n      <input\n        type=\"text\"\n        id=\"exampleResourceStatus\"\n        name=\"exampleResourceStatus\"\n        value={currentExampleResource.status}\n        onChange={e => handleCurrentExampleResourceChange('status', e.target.value)}\n        onBlur={validateRegularInput}\n        className={`subfield-input ${exampleResourceStatusValid ? 'form-input-valid' : ''}`}\n      />\n    </div>\n    <div className=\"button-row\">\n      <button\n        type=\"button\"\n        className=\"add-button\"\n        onClick={handleAddExampleResource}\n      >\n        {editingExampleResourceIdx !== null ? 'Save Changes' : 'Add Example Resource'}\n      </button>\n      {editingExampleResourceIdx !== null && (\n        <button\n          type=\"button\"\n          className=\"cancel-button\"\n          onClick={handleCancelEditExampleResource}\n        >\n          Cancel\n        </button>\n      )}\n    </div>\n  </div>\n</div>\n\n          {/* Example Queries [0,∞] - Optional, multiple values */}\n          <div className=\"form-group\">\n          <label htmlFor=\"exampleQueries\">\n              Example Queries <span className=\"field-indicator optional-indicator\">optional, multiple values allowed</span>\n          </label>\n          <div className=\"tag-input-container\">\n              <div className=\"tag-input-row\">\n              <input\n                  type=\"text\"\n                  id=\"exampleQueries\"\n                  name=\"exampleQueries\"\n                  value={exampleQueriesInput}\n                  onChange={(e) => setExampleQueriesInput(e.target.value)}\n                  onBlur={validateRegularInput}\n                  onKeyPress={(e) => handleKeyPress(e, 'exampleQueries', exampleQueriesInput, setExampleQueriesInput)}\n                  className={`tag-input ${exampleQueriesInputValid ? 'form-input-valid' : ''}`}\n              />\n              <button \n                  type=\"button\" \n                  className=\"tag-add-button\"\n                  onClick={() => handleAddTag('exampleQueries', exampleQueriesInput, setExampleQueriesInput)}\n              >\n                  +\n              </button>\n              </div>\n              <div className=\"tag-list\">\n              {formData.exampleQueries.map((item, index) => (\n                  <div key={`example-query-${index}`} className=\"tag-item\">\n                  <span className=\"tag-text\">{item}</span>\n                  <button \n                      type=\"button\"\n                      className=\"tag-remove\"\n                      onClick={() => handleRemoveTag('exampleQueries', index)}\n                  >\n                      ×\n                  </button>\n                  </div>\n              ))}\n              </div>\n              <div className=\"field-hint\"> </div>\n          </div>\n      </div>\n    \n         {/* Keywords [1,∞] - Required, multiple values */}\n         <div className=\"form-group\">\n           <label htmlFor=\"keywords\">\n             Keywords <span className=\"field-indicator required-indicator\">required, multiple values allowed</span>\n           </label>\n           <div className=\"tag-input-container\">\n             <div className=\"tag-input-row\">\n               <input\n                 type=\"text\"\n                 id=\"keywords\"\n                 name=\"keywords\"\n                 value={keywordsInput}\n                 onChange={(e) => setKeywordsInput(e.target.value)}\n                 onBlur={validateRegularInput}\n                 onKeyPress={(e) => handleKeyPress(e, 'keywords', keywordsInput, setKeywordsInput)}\n                 className={`tag-input ${keywordsInputValid ? 'form-input-valid' : ''}`}\n               />\n               <button \n                 type=\"button\" \n                 className=\"tag-add-button\"\n                 onClick={() => handleAddTag('keywords', keywordsInput, setKeywordsInput)}\n               >\n                 +\n               </button>\n             </div>\n             <div className=\"tag-list\">\n               {formData.keywords.map((keyword, index) => (\n                 <div key={`keyword-${index}`} className=\"tag-item\">\n                   <span className=\"tag-text\">{keyword}</span>\n                   <button \n                     type=\"button\"\n                     className=\"tag-remove\"\n                     onClick={() => handleRemoveTag('keywords', index)}\n                   >\n                     ×\n                   </button>\n                 </div>\n               ))}\n             </div>\n             <div className=\"field-hint\"> </div>\n           </div>\n         </div>\n    \n         {/* Category [0,∞] - Optional, multiple values */}\n         <div className=\"form-group\">\n           <label htmlFor=\"category\">\n             Category <span className=\"field-indicator optional-indicator\">optional (IRI), multiple values allowed</span>\n           </label>\n           <div className=\"tag-input-container\">\n             <div className=\"tag-input-row\">\n             <input\n                    type=\"text\"\n                    id=\"category\"\n                    name=\"categoryInput\"\n                    value={categoryInput}\n                    onChange={(e) => {\n                      setCategoryInput(e.target.value);\n                      setCategoryInputError('');\n                      setCategoryInputValid(false);\n                    }}\n                    onBlur={validateIriInput}\n                    onKeyUp={(e) => handleKeyPress(e, 'category', categoryInput, setCategoryInput, setCategoryInputError)}\n                    className={`${categoryInputError ? 'tag-input-error' : ''} ${categoryInputValid ? 'tag-input-valid' : ''}`}\n                  />\n                  {categoryInputError && <div className=\"iri-error-message\">{categoryInputError}</div>}\n\n               <button \n                 type=\"button\" \n                 className=\"tag-add-button\"\n                 onClick={() => handleAddTag('category', categoryInput, setCategoryInput)}\n               >\n                 +\n               </button>\n             </div>\n             <div className=\"tag-list\">\n               {formData.category.map((cat, index) => (\n                 <div key={`category-${index}`} className=\"tag-item\">\n                   <span className=\"tag-text\">{cat}</span>\n                   <button \n                     type=\"button\"\n                     className=\"tag-remove\"\n                     onClick={() => handleRemoveTag('category', index)}\n                   >\n                     ×\n                   </button>\n                 </div>\n               ))}\n             </div>\n             <div className=\"field-hint\"> </div>\n           </div>\n         </div>\n    \n         {/* Publication/References [0,∞] - Optional, multiple values */}\n         <div className=\"form-group\">\n           <label htmlFor=\"publicationReferences\">\n             Publication/References <span className=\"field-indicator optional-indicator\">optional (IRI), multiple values allowed</span>\n           </label>\n           <div className=\"tag-input-container\">\n             <div className=\"tag-input-row\">\n             <input\n                type=\"text\"\n                id=\"publicationReferences\"\n                name=\"publicationReferencesInput\"\n                value={publicationReferencesInput}\n                onChange={(e) => {\n                  setPublicationReferencesInput(e.target.value);\n                  setPublicationReferencesInputError('');\n                  setPublicationReferencesInputValid(false);\n                }}\n                onBlur={validateIriInput}\n                onKeyPress={(e) => handleKeyPress(e, 'publicationReferences', publicationReferencesInput, setPublicationReferencesInput, setPublicationReferencesInputError)}\n                className={`${publicationReferencesInputError ? 'tag-input-error' : ''} ${publicationReferencesInputValid ? 'tag-input-valid' : ''}`}\n              />\n              {publicationReferencesInputError && <div className=\"iri-error-message\">{publicationReferencesInputError}</div>}\n\n               <button \n                 type=\"button\" \n                 className=\"tag-add-button\"\n                 onClick={() => handleAddTag('publicationReferences', publicationReferencesInput, setPublicationReferencesInput)}\n               >\n                 +\n               </button>\n             </div>\n             <div className=\"tag-list\">\n               {formData.publicationReferences.map((ref, index) => (\n                 <div key={`pub-ref-${index}`} className=\"tag-item\">\n                   <span className=\"tag-text\">{ref}</span>\n                   <button \n                     type=\"button\"\n                     className=\"tag-remove\"\n                     onClick={() => handleRemoveTag('publicationReferences', index)}\n                   >\n                     ×\n                   </button>\n                 </div>\n               ))}\n             </div>\n             <div className=\"field-hint\"> </div>\n           </div>\n         </div>\n    \n         {/* Language [1,∞] - Required, multiple values */}\n         <div className=\"form-group\">\n           <label htmlFor=\"language\">\n             Language <span className=\"field-indicator required-indicator\">required, multiple values allowed</span>\n           </label>\n           <div className=\"tag-input-container\">\n             <div className=\"tag-input-row\">\n               <input\n                 type=\"text\"\n                 id=\"language\"\n                 name=\"language\"\n                 value={languageInput}\n                 onChange={(e) => setLanguageInput(e.target.value)}\n                 onBlur={validateRegularInput}\n                 onKeyPress={(e) => handleKeyPress(e, 'language', languageInput, setLanguageInput)}\n                 className={`tag-input ${languageInputValid ? 'form-input-valid' : ''}`}\n               />\n               <button \n                 type=\"button\" \n                 className=\"tag-add-button\"\n                 onClick={() => handleAddTag('language', languageInput, setLanguageInput)}\n               >\n                 +\n               </button>\n             </div>\n             <div className=\"tag-list\">\n               {formData.language.map((lang, index) => (\n                 <div key={`language-${index}`} className=\"tag-item\">\n                   <span className=\"tag-text\">{lang}</span>\n                   <button \n                     type=\"button\"\n                     className=\"tag-remove\"\n                     onClick={() => handleRemoveTag('language', index)}\n                   >\n                     ×\n                   </button>\n                 </div>\n               ))}\n             </div>\n             <div className=\"field-hint\"> </div>\n           </div>\n         </div>\n    \n         {/* IRI Template [0,∞] - Optional, multiple values */}\n         <div className=\"form-group\">\n           <label htmlFor=\"iriTemplate\">\n             IRI Template <span className=\"field-indicator optional-indicator\">optional, multiple values allowed</span>\n           </label>\n           <div className=\"tag-input-container\">\n             <div className=\"tag-input-row\">\n                <input\n                  type=\"text\"\n                  id=\"iriTemplate\"\n                  name=\"iriTemplate\"\n                  value={iriTemplateInput}\n                  onChange={(e) => setIriTemplateInput(e.target.value)}\n                  onBlur={validateRegularInput}\n                  onKeyPress={(e) => handleKeyPress(e, 'iriTemplate', iriTemplateInput, setIriTemplateInput)}\n                  className={`tag-input ${iriTemplateInputValid ? 'form-input-valid' : ''}`}\n                />\n               <button \n                 type=\"button\" \n                 className=\"tag-add-button\"\n                 onClick={() => handleAddTag('iriTemplate', iriTemplateInput, setIriTemplateInput)}\n               >\n                 +\n               </button>\n             </div>\n             <div className=\"tag-list\">\n               {formData.iriTemplate.map((iri, index) => (\n                 <div key={`iri-${index}`} className=\"tag-item\">\n                   <span className=\"tag-text\">{iri}</span>\n                   <button \n                     type=\"button\"\n                     className=\"tag-remove\"\n                     onClick={() => handleRemoveTag('iriTemplate', index)}\n                   >\n                     ×\n                   </button>\n                 </div>\n               ))}\n             </div>\n             <div className=\"field-hint\"> </div>\n           </div>\n         </div>\n    \n         {/* Linked Resources [0,∞] - Optional, multiple values */}\n         <div className=\"form-group\">\n           <label htmlFor=\"linkedResources\">\n             Linked Resources <span className=\"field-indicator optional-indicator\">optional, multiple values allowed</span>\n           </label>\n           <div className=\"tag-input-container\">\n             <div className=\"tag-input-row\">\n                <input\n                  type=\"text\"\n                  id=\"linkedResources\"\n                  name=\"linkedResources\"\n                  value={linkedResourcesInput}\n                  onChange={(e) => setLinkedResourcesInput(e.target.value)}\n                  onBlur={validateRegularInput}\n                  onKeyPress={(e) => handleKeyPress(e, 'linkedResources', linkedResourcesInput, setLinkedResourcesInput)}\n                  className={`tag-input ${linkedResourcesInputValid ? 'form-input-valid' : ''}`}\n                />\n               <button \n                 type=\"button\" \n                 className=\"tag-add-button\"\n                 onClick={() => handleAddTag('linkedResources', linkedResourcesInput, setLinkedResourcesInput)}\n               >\n                 +\n               </button>\n             </div>\n             <div className=\"tag-list\">\n               {formData.linkedResources.map((resource, index) => (\n                 <div key={`linked-resource-${index}`} className=\"tag-item\">\n                   <span className=\"tag-text\">{resource}</span>\n                   <button \n                     type=\"button\"\n                     className=\"tag-remove\"\n                     onClick={() => handleRemoveTag('linkedResources', index)}\n                   >\n                     ×\n                   </button>\n                 </div>\n               ))}\n             </div>\n             <div className=\"field-hint\"> </div>\n           </div>\n         </div>\n    \n         {/* Access Statement [1] - Required, single value */}\n         <div className=\"form-group\">\n           <label htmlFor=\"accessStatement\">\n             Access Statement <span className=\"field-indicator required-indicator\">required (IRI), 1 value only</span>\n           </label>\n           <input\n                id=\"accessStatement\"\n                name=\"accessStatement\"\n                value={formData.accessStatement}\n                onChange={(e) => {\n                  handleChange(e);\n                  setAccessStatementError('');\n                  setAccessStatementValid(false);\n                }}\n                onBlur={validateIriInput}\n                required\n                rows=\"3\"\n                className={`form-control ${accessStatementValid ? 'form-input-valid' : ''} ${accessStatementError ? 'form-input-error' : ''}`}\n              ></input>\n            {accessStatementError && <div className=\"iri-error-message\">{accessStatementError}</div>}\n\n         </div>\n    \n         {/* Source [0,∞] - Optional, multiple values */}\n         <div className=\"form-group\">\n           <label htmlFor=\"source\">\n             Source <span className=\"field-indicator optional-indicator\">optional (IRI), multiple values allowed</span>\n           </label>\n           <div className=\"tag-input-container\">\n             <div className=\"tag-input-row\">\n             <input\n                  type=\"text\"\n                  id=\"source\"\n                  name=\"sourceInput\"\n                  value={sourceInput}\n                  onChange={(e) => {\n                    setSourceInput(e.target.value);\n                    setSourceInputError('');\n                    setSourceInputValid(false);\n                  }}\n                  onBlur={validateIriInput}\n                  onKeyPress={(e) => handleKeyPress(e, 'source', sourceInput, setSourceInput, setSourceInputError)}\n                  className={`${sourceInputError ? 'tag-input-error' : ''} ${sourceInputValid ? 'tag-input-valid' : ''}`}\n            />\n            {sourceInputError && <div className=\"iri-error-message\">{sourceInputError}</div>}\n\n                              <button \n                 type=\"button\" \n                 className=\"tag-add-button\"\n                 onClick={() => handleAddTag('source', sourceInput, setSourceInput)}\n               >\n                 +\n               </button>\n             </div>\n             <div className=\"tag-list\">\n               {formData.source.map((src, index) => (\n                 <div key={`source-${index}`} className=\"tag-item\">\n                   <span className=\"tag-text\">{src}</span>\n                   <button \n                     type=\"button\"\n                     className=\"tag-remove\"\n                     onClick={() => handleRemoveTag('source', index)}\n                   >\n                     ×\n                   </button>\n                 </div>\n               ))}\n             </div>\n             <div className=\"field-hint\"> </div>\n           </div>\n         </div>\n    \n         {/* Name Space [0,∞] - Optional, multiple values */}\n         <div className=\"form-group\">\n           <label htmlFor=\"nameSpace\">\n             Name Space <span className=\"field-indicator optional-indicator\">optional, multiple values allowed</span>\n           </label>\n           <div className=\"tag-input-container\">\n             <div className=\"tag-input-row\">\n                <input\n                  type=\"text\"\n                  id=\"nameSpace\"\n                  name=\"nameSpace\"\n                  value={nameSpaceInput}\n                  onChange={(e) => setNameSpaceInput(e.target.value)}\n                  onBlur={validateRegularInput}\n                  onKeyPress={(e) => handleKeyPress(e, 'nameSpace', nameSpaceInput, setNameSpaceInput)}\n                  className={`tag-input ${nameSpaceInputValid ? 'form-input-valid' : ''}`}\n                />\n               <button \n                 type=\"button\" \n                 className=\"tag-add-button\"\n                 onClick={() => handleAddTag('nameSpace', nameSpaceInput, setNameSpaceInput)}\n               >\n                 +\n               </button>\n             </div>\n             <div className=\"tag-list\">\n               {formData.nameSpace.map((ns, index) => (\n                 <div key={`namespace-${index}`} className=\"tag-item\">\n                   <span className=\"tag-text\">{ns}</span>\n                   <button \n                     type=\"button\"\n                     className=\"tag-remove\"\n                     onClick={() => handleRemoveTag('nameSpace', index)}\n                   >\n                     ×\n                   </button>\n                 </div>\n               ))}\n             </div>\n             <div className=\"field-hint\"> </div>\n           </div>\n         </div>\n       </form>\n       </div>\n     \n     <div className=\"modal-footer\">\n       <button \n         className=\"cancel-button\"\n         onClick={onClose}\n       >\n         Cancel\n       </button>\n    \n       <button \n        className=\"save-draft-button\"\n      onClick={handleSaveDraft}\n      >\n        Save Draft\n      </button>\n    \n       <button \n         className=\"submit-button\"\n         onClick={handleSubmit}\n         disabled={isSubmitting}\n       >\n         {isSubmitting ? 'Submitting...' : 'Submit'}\n       </button>\n     </div>\n    </div>\n    </div>\n    );\n    }\n    \n\nexport default ModalForm;\n","// src/components/DataTable.js\nimport React from 'react';\n\nfunction DataTable({ submissions }) {\n  const downloadJSON = () => {\n    if (submissions.length === 0) {\n      alert('No data to export');\n      return;\n    }\n    \n    // Add browser type and ensure timestamp for all submissions\n    const enrichedData = submissions.map(submission => ({\n      ...submission,\n      browserType: navigator.userAgent,\n      timestamp: submission.timestamp || submission.date || new Date().toISOString(),\n      exportDate: new Date().toISOString()\n    }));\n    \n    // Convert to JSON string with proper formatting\n    const jsonData = JSON.stringify(enrichedData, null, 2);\n    \n    // Create download\n    const blob = new Blob([jsonData], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    \n    link.setAttribute('href', url);\n    link.setAttribute('download', `kg-metadata-${new Date().toISOString().slice(0,10)}.json`);\n    link.style.visibility = 'hidden';\n    \n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  const clearSubmissions = () => {\n    if (window.confirm('Are you sure you want to clear all metadata? This cannot be undone.')) {\n      localStorage.removeItem('kg-metadata-submissions');\n      window.location.reload(); // Reload to update the UI\n    }\n  };\n\n  return (\n    <div className=\"data-table-container\">\n      <div className=\"table-header\">\n        <h2>Metadata Submissions ({submissions.length})</h2>\n        <div className=\"table-actions\">\n          <button \n            onClick={downloadJSON}\n            disabled={submissions.length === 0}\n            className=\"download-button\"\n          >\n            Export JSON\n          </button>\n          <button \n            onClick={clearSubmissions}\n            disabled={submissions.length === 0}\n            className=\"clear-button\"\n          >\n            Clear All\n          </button>\n        </div>\n      </div>\n      \n      {submissions.length > 0 ? (\n        <div className=\"table-scroll\">\n          <table className=\"data-table\">\n            <thead>\n              <tr>\n                <th>Title</th>\n                <th>Description</th>\n                <th>Type</th>\n                <th>Date Submitted</th>\n              </tr>\n            </thead>\n            <tbody>\n              {submissions.map((item, index) => (\n                <tr key={index}>\n                  <td>{item.name}</td>\n                  <td>{item.description}</td>\n                  <td>{item.type}</td>\n                  <td>{new Date(item.date).toLocaleString()}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      ) : (\n        <p className=\"no-data\">No metadata submissions yet</p>\n      )}\n    </div>\n  );\n}\n\nexport default DataTable;","import React, { useState, useEffect, useImperativeHandle, forwardRef } from 'react';\n\n\nconst SavedDrafts = forwardRef(({ onLoadDraft }, ref) => {\n  const [drafts, setDrafts] = useState([]);\n  \n  const loadDrafts = () => {\n    try {\n      const draftsString = localStorage.getItem('kg-metadata-drafts');\n      if (draftsString) {\n        \n        const parsedDrafts = JSON.parse(draftsString);\n        \n        \n        parsedDrafts.sort((a, b) => {\n          const dateA = new Date(a.date);\n          const dateB = new Date(b.date);\n          return dateB - dateA; // Descending order (newest first)\n        });\n        \n        setDrafts(parsedDrafts);\n      } else {\n        setDrafts([]);\n      }\n    } catch (error) {\n      console.error('Error loading saved drafts:', error);\n      setDrafts([]);\n    }\n  };\n  \n  useEffect(() => {\n    loadDrafts();\n  }, []);\n  \n  useImperativeHandle(ref, () => ({\n    refreshDrafts: loadDrafts\n  }));\n  \n  const handleDeleteDraft = (id, e) => {\n    e.stopPropagation(); // Prevent triggering row click\n    \n    if (window.confirm('Are you sure you want to delete this draft?')) {\n      // Filter out the draft to delete\n      const updatedDrafts = drafts.filter(draft => draft.id !== id);\n      \n      // Save back to localStorage\n      localStorage.setItem('kg-metadata-drafts', JSON.stringify(updatedDrafts));\n      \n      // Update state\n      setDrafts(updatedDrafts);\n    }\n  };\n  \n  const handleLoadDraft = (draft) => {\n    // Call the onLoadDraft callback directly without confirmation\n    onLoadDraft(draft.formData);\n  };\n  \n  const clearAllDrafts = () => {\n    if (window.confirm('Are you sure you want to delete all drafts? This cannot be undone.')) {\n      localStorage.removeItem('kg-metadata-drafts');\n      setDrafts([]);\n    }\n  };\n\n  const formatDate = (dateString) => {\n    if (!dateString) return '';\n    try {\n      const date = new Date(dateString);\n      const dateFormatted = date.toISOString().split('T')[0];\n      \n      const hours = date.getHours().toString().padStart(2, '0');\n      const minutes = date.getMinutes().toString().padStart(2, '0');\n      \n      return `${dateFormatted} ${hours}:${minutes}`;\n    } catch (e) {\n      return dateString;\n    }\n  };\n\n  return (\n    <div className=\"data-table-container\">\n      <div className=\"table-header\">\n        <h2>Saved Drafts ({drafts.length})</h2>\n        <div className=\"table-actions\">\n          <button \n            onClick={clearAllDrafts}\n            disabled={drafts.length === 0}\n            className=\"clear-button\"\n          >\n            Clear All\n          </button>\n        </div>\n      </div>\n      \n      {drafts.length > 0 ? (\n        <div className=\"table-scroll\">\n          <table className=\"data-table\">\n            <thead>\n              <tr>\n                <th>Title</th>\n                <th>Date Last Saved</th>\n                <th>Actions</th>\n              </tr>\n            </thead>\n            <tbody>\n              {drafts.map((draft) => (\n                <tr \n                  key={draft.id} \n                  onClick={() => handleLoadDraft(draft)}\n                  style={{ cursor: 'pointer' }}\n                >\n                  <td>{draft.name}</td>\n                  <td>{formatDate(draft.date)}</td>\n                  <td>\n                    <div className=\"draft-actions\">\n                      <button \n                        className=\"load-button\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          handleLoadDraft(draft);\n                        }}\n                      >\n                        Load\n                      </button>\n                      <button \n                        className=\"delete-button\"\n                        onClick={(e) => handleDeleteDraft(draft.id, e)}\n                      >\n                        Delete\n                      </button>\n                    </div>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      ) : (\n        <p className=\"no-data\">No saved drafts</p>\n      )}\n    </div>\n  );\n});\n\nexport default SavedDrafts;","// src/App.js\nimport React, { useState, useEffect, useRef } from 'react';\nimport ModalForm from './components/ModalForm';\nimport DataTable from './components/DataTable';\nimport SavedDrafts from './components/SavedDrafts';\nimport './App.css';\n\nfunction App() {\n  const [submissions, setSubmissions] = useState([]);\n  const [showModal, setShowModal] = useState(false);\n  const [draftToLoad, setDraftToLoad] = useState(null);\n  \n  // Create a ref for the SavedDrafts component\n  const savedDraftsRef = useRef(null);\n  \n  // Load any saved submissions from localStorage on component mount\n  useEffect(() => {\n    const savedSubmissions = localStorage.getItem('kg-metadata-submissions');\n    if (savedSubmissions) {\n      try {\n        setSubmissions(JSON.parse(savedSubmissions));\n      } catch (error) {\n        console.error('Error loading saved submissions:', error);\n      }\n    }\n  }, []);\n  \n  // Save submissions to localStorage whenever they change\n  useEffect(() => {\n    if (submissions.length > 0) {\n      localStorage.setItem('kg-metadata-submissions', JSON.stringify(submissions));\n    }\n  }, [submissions]);\n  \n  // Handle loading a draft\n  const handleLoadDraft = (formData) => {\n    setDraftToLoad(formData);\n    setShowModal(true);\n  };\n  \n  // Handle drafts being saved\n  const handleDraftSaved = () => {\n    // Refresh the saved drafts display\n    if (savedDraftsRef.current) {\n      savedDraftsRef.current.refreshDrafts();\n    }\n  };\n  \n  // Handle opening the modal with a new form\n  const handleOpenModal = () => {\n    setDraftToLoad(null); // Reset any loaded draft\n    setShowModal(true);\n  };\n  \n  // Handle closing the modal\n  const handleCloseModal = () => {\n    setShowModal(false);\n    setDraftToLoad(null); // Reset the loaded draft when closing\n  };\n  \n  // Handle form submission\n  const handleSubmission = async (formData) => {\n    try {\n      // Create submission with complete data and metadata\n      const timestamp = new Date().toISOString();\n      \n      const submission = {\n        // Display data for the table\n        name: formData.title,\n        description: formData.description,\n        type: \"KG-Metadata\",\n        date: timestamp,\n        \n        // Complete form data\n        formData: {\n          ...formData,\n          timestamp: timestamp,\n          browserType: navigator.userAgent,\n          submissionId: `kg-meta-${Date.now()}`\n        }\n      };\n      \n      // Add to submissions\n      const newSubmissions = [...submissions, submission];\n      setSubmissions(newSubmissions);\n      \n      return { success: true, message: 'Metadata submitted successfully!' };\n    } catch (error) {\n      console.error('Error submitting form:', error);\n      return { \n        success: false, \n        message: 'Error submitting metadata. Please try again.' \n      };\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Knowledge Graph Metadata</h1>\n      </header>\n      <main>\n        <div className=\"form-container\">\n          <button \n            className=\"submit-button\" \n            onClick={handleOpenModal}\n            style={{ width: 'auto' }}\n          >\n            Create Metadata\n          </button>\n        </div>\n        <DataTable submissions={submissions} />\n        \n        {/* Add SavedDrafts component below DataTable */}\n        <div className=\"saved-drafts-section\">\n          <SavedDrafts \n            ref={savedDraftsRef}\n            onLoadDraft={handleLoadDraft} \n          />\n        </div>\n        \n        {showModal && (\n          <ModalForm \n            onSubmit={handleSubmission} \n            onClose={handleCloseModal}\n            initialFormData={draftToLoad}\n            onDraftSaved={handleDraftSaved}\n          />\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}